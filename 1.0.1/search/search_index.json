{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DeepSentinel Python SDK","text":"<p>AI compliance middleware for safe LLM interactions</p> <p>DeepSentinel sits between your application and LLM providers like OpenAI and Anthropic, automatically checking for sensitive data and ensuring compliance with regulations like GDPR, HIPAA, and CCPA.</p>"},{"location":"#key-features","title":"Key Features","text":"<p>\ud83d\udee1\ufe0f Compliance Checking - Automatic detection of PII, PHI, and regulatory violations \ud83d\udd04 Multiple Providers - Support for OpenAI, Anthropic, and other LLM providers \ud83d\udcca Audit Logging - Comprehensive activity logging for compliance tracking \u26a1 Performance - Local detection with smart caching for minimal latency \ud83d\udd0c MCP Support - Integration with Model Context Protocol for advanced features \ud83c\udf10 Streaming - Full support for streaming responses with compliance checks  </p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install DeepSentinel:</p> <pre><code>pip install deepsentinel-sdk```\n\nUse it just like you would use OpenAI's SDK:\n\n```python\nfrom deepsentinel import SentinelClient\n\n# Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-api-key\",\n    openai_api_key=\"your-openai-api-key\"\n)\n\n# Send a compliant request\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello, world!\"}]\n)\n\nprint(response.choices[0].message.content)\n</code></pre> <p>That's it! DeepSentinel automatically: - Scans your requests for sensitive data - Ensures compliance with your configured policies - Logs all interactions for audit purposes - Routes requests to your chosen LLM provider</p>"},{"location":"#why-deepsentinel","title":"Why DeepSentinel?","text":""},{"location":"#before-direct-api-usage","title":"Before: Direct API Usage","text":"<pre><code>import openai\n\n# No compliance checking\n# No audit logging\n# Manual security implementation\n# Multiple provider integrations\nclient = openai.OpenAI(api_key=\"sk-...\")\nresponse = client.chat.completions.create(...)\n</code></pre>"},{"location":"#after-with-deepsentinel","title":"After: With DeepSentinel","text":"<pre><code>from deepsentinel import SentinelClient\n\n# Automatic compliance checking \u2713\n# Built-in audit logging \u2713\n# Enterprise security \u2713\n# Unified provider interface \u2713\nclient = SentinelClient(\n    sentinel_api_key=\"ds-...\",\n    openai_api_key=\"sk-...\"\n)\nresponse = client.chat.completions.create(...)\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph LR\n    A[Your Application] --&gt; B[DeepSentinel SDK]\n    B --&gt; C[Compliance Engine]\n    B --&gt; D[Audit Logger]\n    B --&gt; E[Provider Registry]\n    E --&gt; F[OpenAI]\n    E --&gt; G[Anthropic]\n    E --&gt; H[Other Providers]\n\n    C --&gt; I[PII Detection]\n    C --&gt; J[PHI Detection]\n    C --&gt; K[Policy Engine]</code></pre> <p>DeepSentinel acts as an intelligent middleware layer that:</p> <ol> <li>Intercepts all requests before they reach LLM providers</li> <li>Analyzes content for sensitive data and compliance violations</li> <li>Enforces your organization's compliance policies</li> <li>Logs all interactions for audit and monitoring</li> <li>Routes approved requests to the appropriate provider</li> </ol>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>Core Concepts - Understand how DeepSentinel works</li> <li>API Reference - Complete API documentation</li> <li>Tutorials - Step-by-step guides for common use cases</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>API key from DeepSentinel (sign up here)</li> <li>API keys from supported LLM providers (OpenAI, Anthropic, etc.)</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Documentation: https://deepsentinel-ai.github.io/deepsentinel-python</li> <li>GitHub: https://github.com/deepsentinel/deepsentinel-sdk</li> <li>Support: support@deepsentinel.ai</li> <li>Community: Discord</li> </ul> <p>Ready to secure your AI applications? Get started now \u2192</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>Common questions and solutions for using the DeepSentinel Python SDK.</p>"},{"location":"faq/#getting-started","title":"Getting Started","text":""},{"location":"faq/#q-how-do-i-get-a-deepsentinel-api-key","title":"Q: How do I get a DeepSentinel API key?","text":"<p>A: Sign up for a free account at deepsentinel.ai/signup. You'll receive an API key immediately after registration.</p>"},{"location":"faq/#q-do-i-need-to-change-my-existing-openai-code","title":"Q: Do I need to change my existing OpenAI code?","text":"<p>A: Minimal changes are required. DeepSentinel provides the same interface as OpenAI's SDK:</p> <pre><code># Before\nfrom openai import OpenAI\nclient = OpenAI(api_key=\"sk-...\")\n\n# After  \nfrom deepsentinel import SentinelClient\nclient = SentinelClient(\n    sentinel_api_key=\"ds-...\",\n    openai_api_key=\"sk-...\"\n)\n\n# Rest of your code stays the same!\nresponse = client.chat.completions.create(...)\n</code></pre>"},{"location":"faq/#q-what-python-versions-are-supported","title":"Q: What Python versions are supported?","text":"<p>A: DeepSentinel supports Python 3.8 and higher. We recommend using Python 3.9+ for the best experience.</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#q-how-do-i-install-deepsentinel","title":"Q: How do I install DeepSentinel?","text":"<p>A: Install using pip:</p> <pre><code>pip install deepsentinel-sdk```\n\nFor development with all optional dependencies:\n\n```bash\npip install \"deepsentinel[dev]\"\n</code></pre>"},{"location":"faq/#q-im-getting-an-import-error-what-should-i-do","title":"Q: I'm getting an import error. What should I do?","text":"<p>A: Make sure DeepSentinel is properly installed:</p> <pre><code>pip show deepsentinel\n</code></pre> <p>If not installed, run:</p> <pre><code>pip install deepsentinel-sdk```\n\nIf you're still having issues, try:\n1. Ensure you're using a supported Python version\n2. Try installing in a clean virtual environment\n3. Update pip: `pip install --upgrade pip`\n4. Check your PYTHONPATH environment variable\n\n### Q: Can I use DeepSentinel with virtual environments?\n\n**A:** Yes! We recommend using virtual environments:\n\n```bash\npython -m venv deepsentinel-env\nsource deepsentinel-env/bin/activate  # On Windows: deepsentinel-env\\Scripts\\activate\npip install deepsentinel-sdk```\n\n### Q: Is DeepSentinel compatible with containerized environments like Docker?\n\n**A:** Yes, DeepSentinel works well in containerized environments. Add it to your Dockerfile:\n\n```dockerfile\nFROM python:3.9-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nRUN pip install deepsentinel-sdk\n# Set environment variables\nENV DEEPSENTINEL_API_KEY=\"your-key\"\nENV OPENAI_API_KEY=\"your-openai-key\"\n\nCOPY . .\nCMD [\"python\", \"your_app.py\"]\n</code></pre>"},{"location":"faq/#configuration","title":"Configuration","text":""},{"location":"faq/#q-how-do-i-configure-environment-variables","title":"Q: How do I configure environment variables?","text":"<p>A: Set these environment variables:</p> <pre><code>export DEEPSENTINEL_API_KEY=\"your-deepsentinel-key\"\nexport OPENAI_API_KEY=\"your-openai-key\"\nexport ANTHROPIC_API_KEY=\"your-anthropic-key\"  # Optional\n</code></pre> <p>Then initialize without explicit keys:</p> <pre><code>client = SentinelClient()  # Automatically reads environment variables\n</code></pre>"},{"location":"faq/#q-can-i-use-configuration-files","title":"Q: Can I use configuration files?","text":"<p>A: Yes! Create a YAML configuration file:</p> <pre><code># deepsentinel.yaml\nsentinel_api_key: \"your-key\"\ndefault_provider: \"openai\"\nproviders:\n  openai:\n    api_key: \"your-openai-key\"\n</code></pre> <p>Load it in your code:</p> <pre><code>from deepsentinel import SentinelConfig, SentinelClient\n\nconfig = SentinelConfig.from_file(\"deepsentinel.yaml\")\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"faq/#q-how-do-i-adjust-compliance-strictness","title":"Q: How do I adjust compliance strictness?","text":"<p>A: Configure the <code>max_risk_score</code> parameter:</p> <pre><code>from deepsentinel import CompliancePolicy\n\n# More strict (blocks more content)\nstrict_policy = CompliancePolicy(\n    name=\"strict\",\n    max_risk_score=0.6  # Lower = more strict\n)\n\n# More lenient (allows more content)\nlenient_policy = CompliancePolicy(\n    name=\"lenient\", \n    max_risk_score=0.9  # Higher = more lenient\n)\n</code></pre>"},{"location":"faq/#q-what-are-the-best-practices-for-configuration","title":"Q: What are the best practices for configuration?","text":"<p>A: Follow these best practices:</p> <ol> <li>Use environment variables for secrets in production environments</li> <li>Create different policies for development vs. production</li> <li>Start strict and loosen gradually based on user feedback</li> <li>Enable detailed logging during initial deployment</li> <li>Store configurations in version control (without API keys)</li> <li>Create environment-specific configs (dev, staging, production)</li> </ol>"},{"location":"faq/#compliance-and-security","title":"Compliance and Security","text":""},{"location":"faq/#q-what-types-of-sensitive-data-does-deepsentinel-detect","title":"Q: What types of sensitive data does DeepSentinel detect?","text":"<p>A: DeepSentinel detects various types of sensitive information:</p> <ul> <li>PII: Email addresses, phone numbers, SSNs, addresses, names</li> <li>PHI: Medical record numbers, insurance IDs, health conditions</li> <li>PCI: Credit card numbers, bank accounts, CVV codes</li> <li>Custom: Organization-specific patterns you define</li> </ul>"},{"location":"faq/#q-why-was-my-request-blocked","title":"Q: Why was my request blocked?","text":"<p>A: Your request likely contained sensitive data. Check the error details:</p> <pre><code>from deepsentinel import ComplianceViolationError\n\ntry:\n    response = client.chat.completions.create(...)\nexcept ComplianceViolationError as e:\n    print(f\"Blocked because: {e.message}\")\n    print(f\"Detected: {[v.type for v in e.violations]}\")\n    print(f\"Risk score: {e.risk_score}\")\n</code></pre>"},{"location":"faq/#q-can-i-allowlist-certain-types-of-data","title":"Q: Can I allowlist certain types of data?","text":"<p>A: Yes, create a custom policy:</p> <pre><code>policy = CompliancePolicy(\n    name=\"custom-policy\",\n    enable_pii_detection=True,\n    enable_phi_detection=False,  # Disable PHI detection\n    custom_allowlist=[\"email_addresses\"]  # Allow emails\n)\n</code></pre>"},{"location":"faq/#q-how-do-i-handle-false-positives","title":"Q: How do I handle false positives?","text":"<p>A: You can:</p> <ol> <li> <p>Adjust risk thresholds: <pre><code>policy = CompliancePolicy(max_risk_score=0.9)  # More lenient\n</code></pre></p> </li> <li> <p>Use anonymization instead of blocking: <pre><code>policy = CompliancePolicy(\n    block_on_violation=False,\n    anonymize_sensitive_data=True\n)\n</code></pre></p> </li> <li> <p>Create custom patterns for your specific use case</p> </li> </ol>"},{"location":"faq/#q-is-my-data-sent-to-deepsentinels-servers","title":"Q: Is my data sent to DeepSentinel's servers?","text":"<p>A: DeepSentinel uses a layered approach:</p> <ul> <li>Local detection runs on your machine (fast, private)</li> <li>Cloud analysis is used only for ambiguous cases</li> <li>You can configure <code>local_only=True</code> to disable cloud analysis entirely</li> </ul>"},{"location":"faq/#q-how-secure-is-deepsentinel","title":"Q: How secure is DeepSentinel?","text":"<p>A: DeepSentinel employs multiple security measures:</p> <ol> <li>End-to-end encryption for all API communication</li> <li>No storage of content - data is analyzed in memory and not persisted</li> <li>Zero-trust architecture for backend systems</li> <li>Regular security audits and penetration testing</li> <li>SOC 2 Type II compliant infrastructure</li> <li>Role-based access control for audit logs</li> </ol>"},{"location":"faq/#q-are-there-scenarios-where-compliance-might-be-bypassed","title":"Q: Are there scenarios where compliance might be bypassed?","text":"<p>A: Several scenarios to be aware of:</p> <ol> <li>Risk threshold too high: If <code>max_risk_score</code> is set very high, sensitive data might pass through</li> <li>Detection disabled: If you disable specific detectors (<code>enable_pii_detection=False</code>)</li> <li>Data obfuscation: Intentionally altered sensitive data (e.g., adding spaces between digits)</li> <li>Custom content: Novel formats of sensitive data not in standard patterns</li> <li>Specific allowlists: If you explicitly allowlist certain types of data</li> </ol> <p>To prevent accidental bypasses: - Start with stricter settings - Review audit logs regularly - Use anonymization as a fallback - Implement layered compliance (client and server-side) - Update patterns regularly</p>"},{"location":"faq/#q-how-can-i-maintain-gdpr-compliance","title":"Q: How can I maintain GDPR compliance?","text":"<p>A: To ensure GDPR compliance:</p> <ol> <li> <p>Enable anonymization:  <pre><code>policy = CompliancePolicy(\n    anonymize_sensitive_data=True, \n    jurisdictions=[\"GDPR\"]\n)\n</code></pre></p> </li> <li> <p>Set appropriate data retention: <pre><code>config = SentinelConfig(\n    audit_log_retention_days=30  # Set appropriate retention period\n)\n</code></pre></p> </li> <li> <p>Implement right to be forgotten using the audit client: <pre><code>client.audit.delete_user_data(user_id=\"user123\")\n</code></pre></p> </li> <li> <p>Use geographic restrictions to comply with data transfer regulations: <pre><code>policy = CompliancePolicy(\n    geo_restrictions=[\"EU_ONLY\"]\n)\n</code></pre></p> </li> </ol>"},{"location":"faq/#provider-integration","title":"Provider Integration","text":""},{"location":"faq/#q-which-llm-providers-are-supported","title":"Q: Which LLM providers are supported?","text":"<p>A: Currently supported providers:</p> <ul> <li>\u2705 OpenAI (GPT-4, GPT-3.5, embeddings, images)</li> <li>\u2705 Anthropic (Claude 3 models)</li> <li>\ud83d\udd04 More providers coming soon</li> </ul>"},{"location":"faq/#q-can-i-use-multiple-providers","title":"Q: Can I use multiple providers?","text":"<p>A: Yes! Configure multiple providers and choose per request:</p> <pre><code>client = SentinelClient(\n    sentinel_api_key=\"ds-...\",\n    openai_api_key=\"sk-...\",\n    anthropic_api_key=\"ant-...\"\n)\n\n# Use OpenAI\nopenai_response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[...],\n    provider=\"openai\"\n)\n\n# Use Anthropic\nanthropic_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[...],\n    provider=\"anthropic\"\n)\n</code></pre>"},{"location":"faq/#q-what-happens-if-a-provider-is-down","title":"Q: What happens if a provider is down?","text":"<p>A: Configure automatic failover:</p> <pre><code>config = SentinelConfig(\n    fallback_strategy={\n        \"primary\": \"openai\",\n        \"fallbacks\": [\"anthropic\"],\n        \"auto_failover\": True\n    }\n)\n</code></pre>"},{"location":"faq/#q-can-i-dynamically-switch-providers-based-on-content","title":"Q: Can I dynamically switch providers based on content?","text":"<p>A: Yes, you can implement content-based provider selection:</p> <pre><code>def select_provider(content):\n    \"\"\"Select provider based on content complexity.\"\"\"\n    if len(content) &gt; 1000 or \"complex analysis\" in content.lower():\n        return \"anthropic\"  # Use Claude for complex tasks\n    elif \"image\" in content.lower():\n        return \"openai\"     # Use OpenAI for image-related tasks\n    else:\n        return \"openai\"     # Default to OpenAI\n\n# Usage\nuser_content = \"Please analyze this complex data...\"\nselected_provider = select_provider(user_content)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\" if selected_provider == \"openai\" else \"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": user_content}],\n    provider=selected_provider\n)\n</code></pre>"},{"location":"faq/#performance","title":"Performance","text":""},{"location":"faq/#q-how-much-latency-does-deepsentinel-add","title":"Q: How much latency does DeepSentinel add?","text":"<p>A: Performance impact is minimal:</p> <ul> <li>Local detection: &lt; 5ms</li> <li>Cloud analysis: 50-200ms (only for ambiguous cases)</li> <li>Caching: Near-zero latency for repeated patterns</li> </ul>"},{"location":"faq/#q-how-do-i-optimize-performance","title":"Q: How do I optimize performance?","text":"<p>A: Several strategies:</p> <ol> <li> <p>Enable caching: <pre><code>config = SentinelConfig(\n    cache_enabled=True,\n    cache_ttl=3600  # 1 hour\n)\n</code></pre></p> </li> <li> <p>Use local-only detection: <pre><code>config = SentinelConfig(local_detection_only=True)\n</code></pre></p> </li> <li> <p>Tune risk thresholds to reduce cloud analysis</p> </li> <li> <p>Use connection pooling for high-volume applications: <pre><code>from deepsentinel import PerformanceConfig\n\nperf_config = PerformanceConfig(\n    connection_pool_size=50,  # Increase for high throughput\n    connection_pool_per_host=10\n)\n\nconfig = SentinelConfig(performance_config=perf_config)\n</code></pre></p> </li> <li> <p>Implement batch processing for multiple requests: <pre><code># Process multiple messages in one batch\nresults = await client.process_batch([\n    {\"messages\": message_set_1, \"model\": \"gpt-4o\"},\n    {\"messages\": message_set_2, \"model\": \"gpt-4o\"}\n])\n</code></pre></p> </li> </ol>"},{"location":"faq/#q-can-i-monitor-performance-metrics","title":"Q: Can I monitor performance metrics?","text":"<p>A: Yes, DeepSentinel provides comprehensive metrics:</p> <pre><code>metrics = client.metrics_collector\nprint(f\"Average latency: {metrics.average_latency}ms\")\nprint(f\"Cache hit rate: {metrics.cache_hit_rate}%\")\nprint(f\"Compliance violations: {metrics.compliance_violations}\")\n</code></pre> <p>For detailed analysis:</p> <pre><code># Get comprehensive metrics report\nreport = metrics.generate_report()\n\n# Provider-specific performance\nprovider_metrics = metrics.get_provider_metrics()\nfor provider, stats in provider_metrics.items():\n    print(f\"{provider} avg. latency: {stats['avg_latency']}ms\")\n</code></pre>"},{"location":"faq/#q-how-can-i-improve-deepsentinels-performance-in-production","title":"Q: How can I improve DeepSentinel's performance in production?","text":"<p>A: For production optimization:</p> <ol> <li>Implement request batching to reduce overhead</li> <li>Use async methods for non-blocking operations</li> <li>Optimize compliance policies - disable unnecessary detectors</li> <li>Configure appropriate caching based on your use case</li> <li>Monitor and tune connection pool settings</li> <li>Use edge caching in distributed environments</li> <li>Implement regional routing to reduce latency</li> </ol> <p>Example performance configuration:</p> <pre><code>from deepsentinel import SentinelConfig, PerformanceConfig\n\n# Create optimized performance configuration\nperf_config = PerformanceConfig(\n    enable_caching=True,\n    cache_ttl=300,            # 5 minutes\n    cache_max_size=10000,     # Adjust based on memory availability\n    connection_pool_size=100, # High-throughput settings\n    connection_pool_per_host=20,\n    enable_metrics=True,\n    pattern_cache_size=500,   # Cache compiled regex patterns\n    enable_async=True         # Use async operations where possible\n)\n\nconfig = SentinelConfig(performance_config=perf_config)\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"faq/#error-handling","title":"Error Handling","text":""},{"location":"faq/#q-how-do-i-handle-different-types-of-errors","title":"Q: How do I handle different types of errors?","text":"<p>A: Use specific exception types:</p> <pre><code>from deepsentinel import (\n    ComplianceViolationError,\n    ProviderError, \n    AuthenticationError,\n    RateLimitError\n)\n\ntry:\n    response = client.chat.completions.create(...)\nexcept ComplianceViolationError as e:\n    # Handle compliance issues\n    print(f\"Compliance violation: {e.violations}\")\nexcept AuthenticationError as e:\n    # Handle authentication issues\n    print(f\"Auth error: {e.message}\")\nexcept RateLimitError as e:\n    # Handle rate limiting\n    print(f\"Rate limited. Retry after {e.retry_after} seconds\")\nexcept ProviderError as e:\n    # Handle provider issues\n    print(f\"Provider {e.provider} error: {e.message}\")\n</code></pre>"},{"location":"faq/#q-what-should-i-do-when-i-get-a-rate-limit-error","title":"Q: What should I do when I get a rate limit error?","text":"<p>A: Implement exponential backoff:</p> <pre><code>import time\nimport random\nfrom deepsentinel import RateLimitError\n\ndef make_request_with_retry(client, **kwargs):\n    max_retries = 5\n    base_delay = 1\n\n    for attempt in range(max_retries):\n        try:\n            return client.chat.completions.create(**kwargs)\n        except RateLimitError as e:\n            if attempt == max_retries - 1:\n                raise\n\n            # Exponential backoff with jitter\n            delay = base_delay * (2 ** attempt) + random.uniform(0, 1)\n            time.sleep(min(delay, 60))  # Cap at 60 seconds\n</code></pre>"},{"location":"faq/#q-how-do-i-create-a-robust-error-handling-strategy","title":"Q: How do I create a robust error handling strategy?","text":"<p>A: Implement a comprehensive error handling system:</p> <pre><code>import logging\nfrom deepsentinel import (\n    SentinelClient, \n    ComplianceViolationError,\n    ProviderError,\n    AuthenticationError,\n    RateLimitError,\n    InvalidRequestError\n)\n\nlogger = logging.getLogger(__name__)\n\nclass AIClient:\n    def __init__(self):\n        self.client = SentinelClient(...)\n\n    def send_request(self, messages, **kwargs):\n        \"\"\"Send a request with robust error handling.\"\"\"\n        try:\n            return self.client.chat.completions.create(\n                messages=messages,\n                **kwargs\n            )\n\n        except ComplianceViolationError as e:\n            logger.warning(f\"Compliance violation: {e.message}\")\n            # Return user-friendly message\n            return self._format_error_response(\n                \"Your request contains sensitive information that cannot be processed.\"\n            )\n\n        except RateLimitError as e:\n            logger.warning(f\"Rate limited: {e.message}\")\n            # Implement retry mechanism\n            return self._retry_with_backoff(messages, **kwargs)\n\n        except ProviderError as e:\n            logger.error(f\"Provider error ({e.provider}): {e.message}\")\n            # Try with fallback provider\n            if kwargs.get(\"provider\") != \"anthropic\" and not kwargs.get(\"_is_fallback\"):\n                kwargs[\"provider\"] = \"anthropic\"\n                kwargs[\"_is_fallback\"] = True\n                return self.send_request(messages, **kwargs)\n            return self._format_error_response(\"Service temporarily unavailable\")\n\n        except AuthenticationError:\n            logger.critical(\"Authentication failed - check API keys\")\n            return self._format_error_response(\"Authentication error\")\n\n        except InvalidRequestError as e:\n            logger.error(f\"Invalid request: {e.message}\")\n            return self._format_error_response(\"Invalid request format\")\n\n        except Exception as e:\n            logger.exception(f\"Unexpected error: {str(e)}\")\n            return self._format_error_response(\"An unexpected error occurred\")\n\n    def _retry_with_backoff(self, messages, **kwargs):\n        \"\"\"Retry with exponential backoff.\"\"\"\n        # Implementation here...\n\n    def _format_error_response(self, message):\n        \"\"\"Format consistent error response.\"\"\"\n        return {\n            \"error\": True,\n            \"message\": message\n        }\n</code></pre>"},{"location":"faq/#streaming","title":"Streaming","text":""},{"location":"faq/#q-does-deepsentinel-support-streaming","title":"Q: Does DeepSentinel support streaming?","text":"<p>A: Yes! Streaming works the same as with provider SDKs:</p> <pre><code>stream = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[...],\n    stream=True\n)\n\nfor chunk in stream:\n    if chunk.choices[0].delta.content:\n        print(chunk.choices[0].delta.content, end=\"\")\n</code></pre>"},{"location":"faq/#q-how-does-compliance-work-with-streaming","title":"Q: How does compliance work with streaming?","text":"<p>A: DeepSentinel checks the request before streaming starts. Response content is monitored during streaming for any violations.</p>"},{"location":"faq/#q-how-do-i-handle-errors-in-streaming-responses","title":"Q: How do I handle errors in streaming responses?","text":"<p>A: Implement proper error handling for streaming:</p> <pre><code>try:\n    stream = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[...],\n        stream=True\n    )\n\n    for chunk in stream:\n        try:\n            if chunk.choices[0].delta.content:\n                print(chunk.choices[0].delta.content, end=\"\")\n        except Exception as e:\n            print(f\"Error processing chunk: {str(e)}\")\n\nexcept ComplianceViolationError as e:\n    print(f\"Compliance violation in request: {e.message}\")\nexcept Exception as e:\n    print(f\"Error initiating stream: {str(e)}\")\n</code></pre>"},{"location":"faq/#mcp-tools-integration","title":"MCP Tools Integration","text":""},{"location":"faq/#q-what-are-mcp-tools","title":"Q: What are MCP tools?","text":"<p>A: Model Context Protocol (MCP) tools allow LLMs to interact with external systems through DeepSentinel's middleware. They enable capabilities like:</p> <ul> <li>File access and manipulation</li> <li>Web searches and content retrieval</li> <li>Database queries</li> <li>API interactions</li> <li>Complex data processing</li> </ul>"},{"location":"faq/#q-how-do-i-use-mcp-tools-with-deepsentinel","title":"Q: How do I use MCP tools with DeepSentinel?","text":"<p>A: Configure MCP tools during client initialization:</p> <pre><code>from deepsentinel import SentinelClient, MCPConfig, MCPTool\n\n# Define custom tools\nweather_tool = MCPTool(\n    name=\"get_weather\",\n    description=\"Get weather information for a location\",\n    parameters={\n        \"location\": {\"type\": \"string\", \"description\": \"City or location name\"},\n        \"days\": {\"type\": \"integer\", \"description\": \"Forecast days\"}\n    },\n    handler=get_weather_function  # Your function that handles the tool\n)\n\n# Configure MCP\nmcp_config = MCPConfig(\n    tools=[weather_tool],\n    enable_builtin_tools=True,  # Enable default tools\n)\n\n# Initialize client with MCP support\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\",\n    mcp_config=mcp_config\n)\n</code></pre>"},{"location":"faq/#q-what-built-in-mcp-tools-are-available","title":"Q: What built-in MCP tools are available?","text":"<p>A: DeepSentinel includes several built-in tools:</p> <ul> <li>web_search: Search the internet for information</li> <li>file_reader: Read file contents</li> <li>database_query: Run SQL queries against connected databases</li> <li>api_request: Make HTTP requests to external APIs</li> <li>calculator: Perform complex mathematical calculations</li> </ul>"},{"location":"faq/#q-can-i-integrate-mcp-tools-with-external-services","title":"Q: Can I integrate MCP tools with external services?","text":"<p>A: Yes, you can build integrations with various services:</p> <pre><code>import requests\nfrom deepsentinel import MCPTool\n\n# Create a Jira ticket creation tool\ndef create_jira_ticket(summary, description, ticket_type=\"Bug\"):\n    # Implementation for API call to Jira\n    response = requests.post(\n        \"https://your-jira-instance/rest/api/2/issue\",\n        json={\n            \"fields\": {\n                \"project\": {\"key\": \"PROJECT\"},\n                \"summary\": summary,\n                \"description\": description,\n                \"issuetype\": {\"name\": ticket_type}\n            }\n        },\n        auth=(\"username\", \"api_token\")\n    )\n    return {\"ticket_id\": response.json()[\"id\"]}\n\n# Register as MCP tool\njira_tool = MCPTool(\n    name=\"create_jira_ticket\",\n    description=\"Create a Jira ticket\",\n    parameters={\n        \"summary\": {\"type\": \"string\", \"description\": \"Ticket summary\"},\n        \"description\": {\"type\": \"string\", \"description\": \"Detailed description\"},\n        \"ticket_type\": {\"type\": \"string\", \"description\": \"Type of ticket\", \"default\": \"Bug\"}\n    },\n    handler=create_jira_ticket\n)\n\n# Add to client configuration\nclient = SentinelClient(\n    # ... other config\n    mcp_config=MCPConfig(tools=[jira_tool])\n)\n</code></pre>"},{"location":"faq/#development-and-testing","title":"Development and Testing","text":""},{"location":"faq/#q-how-do-i-test-my-integration","title":"Q: How do I test my integration?","text":"<p>A: Create test cases for compliance detection:</p> <pre><code>def test_compliance():\n    # Test normal content (should work)\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n    )\n    assert response is not None\n\n    # Test sensitive content (should be blocked)\n    try:\n        client.chat.completions.create(\n            model=\"gpt-4o\", \n            messages=[{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789\"}]\n        )\n        assert False, \"Should have been blocked\"\n    except ComplianceViolationError:\n        pass  # Expected\n</code></pre>"},{"location":"faq/#q-can-i-use-deepsentinel-in-development-without-api-keys","title":"Q: Can I use DeepSentinel in development without API keys?","text":"<p>A: Use mock mode for testing:</p> <pre><code>config = SentinelConfig(\n    mock_mode=True,  # Don't make real API calls\n    mock_responses={\"gpt-4o\": \"Mock response\"}\n)\n</code></pre>"},{"location":"faq/#q-how-do-i-run-unit-tests-with-deepsentinel","title":"Q: How do I run unit tests with DeepSentinel?","text":"<p>A: Use the test fixtures and mocks provided:</p> <pre><code>from deepsentinel.testing import MockSentinelClient\n\ndef test_your_function():\n    # Create a mock client\n    mock_client = MockSentinelClient()\n\n    # Configure mock responses\n    mock_client.add_response(\n        model=\"gpt-4o\",\n        content=\"This is a mock response\",\n        tokens={\"prompt\": 10, \"completion\": 5}\n    )\n\n    # Configure violations\n    mock_client.add_violation(\n        pattern=\"credit card\",\n        violation_type=\"PCI\",\n        risk_score=0.95\n    )\n\n    # Test with mock\n    response = mock_client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n    )\n    assert response.choices[0].message.content == \"This is a mock response\"\n\n    # Test violation detection\n    try:\n        mock_client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": \"My credit card number\"}]\n        )\n        assert False, \"Should have detected violation\"\n    except ComplianceViolationError as e:\n        assert e.violations[0].type == \"PCI\"\n</code></pre>"},{"location":"faq/#pricing-and-limits","title":"Pricing and Limits","text":""},{"location":"faq/#q-how-much-does-deepsentinel-cost","title":"Q: How much does DeepSentinel cost?","text":"<p>A: DeepSentinel offers:</p> <ul> <li>Free tier: 1,000 requests/month</li> <li>Pro tier: Starting at $29/month</li> <li>Enterprise: Custom pricing</li> </ul> <p>Visit deepsentinel.ai/pricing for current pricing.</p>"},{"location":"faq/#q-are-there-rate-limits","title":"Q: Are there rate limits?","text":"<p>A: Rate limits depend on your plan:</p> <ul> <li>Free: 100 requests/hour</li> <li>Pro: 10,000 requests/hour  </li> <li>Enterprise: Custom limits</li> </ul>"},{"location":"faq/#q-do-i-still-pay-provider-costs","title":"Q: Do I still pay provider costs?","text":"<p>A: Yes, you pay both:</p> <ul> <li>DeepSentinel: For compliance and middleware services</li> <li>LLM Provider: For the actual AI model usage (OpenAI, Anthropic, etc.)</li> </ul>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#q-my-requests-are-being-blocked-unexpectedly","title":"Q: My requests are being blocked unexpectedly","text":"<p>A: Check your compliance configuration:</p> <ol> <li>Review risk threshold: Lower values are more strict</li> <li>Check detection settings: Ensure appropriate detectors are enabled</li> <li>Test with known content: Verify detection is working correctly</li> <li>Review logs: Check audit logs for violation details</li> </ol>"},{"location":"faq/#q-im-seeing-high-latency","title":"Q: I'm seeing high latency","text":"<p>A: Optimize performance:</p> <ol> <li>Enable caching to reuse compliance decisions</li> <li>Use local detection for obvious patterns</li> <li>Tune risk thresholds to reduce cloud analysis</li> <li>Monitor metrics to identify bottlenecks</li> </ol>"},{"location":"faq/#q-authentication-keeps-failing","title":"Q: Authentication keeps failing","text":"<p>A: Verify your API keys:</p> <ol> <li>Check key format: DeepSentinel keys start with <code>ds-</code></li> <li>Verify permissions: Ensure keys have proper permissions</li> <li>Check expiration: Some keys may have expiration dates</li> <li>Test independently: Test each provider's key separately</li> </ol>"},{"location":"faq/#q-how-do-i-resolve-connection-errors","title":"Q: How do I resolve connection errors?","text":"<p>A: Common connection issues:</p> <ol> <li>Timeout errors:</li> <li>Increase timeout settings: <code>config = SentinelConfig(request_timeout=30)</code></li> <li> <p>Check network connectivity and firewall settings</p> </li> <li> <p>SSL errors:</p> </li> <li>Update CA certificates: <code>pip install --upgrade certifi</code></li> <li> <p>Check for TLS interception in corporate environments</p> </li> <li> <p>DNS issues:</p> </li> <li>Verify DNS resolution for API endpoints</li> <li>Try alternate DNS servers if needed</li> </ol>"},{"location":"faq/#q-deepsentinel-is-working-in-development-but-not-in-production","title":"Q: DeepSentinel is working in development but not in production","text":"<p>A: Common production issues:</p> <ol> <li>Environment variables: Verify they're correctly set in production</li> <li>Network restrictions: Check if production environments have restricted outbound access</li> <li>Proxy settings: Configure proxy if your production environment uses one:    <pre><code>config = SentinelConfig(\n    proxies={\n        \"http\": \"http://proxy:8080\",\n        \"https\": \"https://proxy:8080\"\n    }\n)\n</code></pre></li> <li>Resource limits: Ensure sufficient memory and CPU allocation</li> </ol>"},{"location":"faq/#getting-more-help","title":"Getting More Help","text":""},{"location":"faq/#q-where-can-i-get-additional-support","title":"Q: Where can I get additional support?","text":"<p>A: Multiple support channels available:</p> <ul> <li>\ud83d\udcd6 Documentation: deepsentinel-ai.github.io/deepsentinel-python</li> <li>\ud83d\udcac Discord: discord.gg/deepsentinel</li> <li>\ud83d\udc1b GitHub Issues: GitHub Issues</li> <li>\ud83d\udce7 Email Support: support@deepsentinel.ai</li> <li>\ud83d\udcde Enterprise Support: Available for enterprise customers</li> </ul>"},{"location":"faq/#q-how-do-i-report-a-bug","title":"Q: How do I report a bug?","text":"<p>A: Please include this information:</p> <ol> <li>DeepSentinel version: <code>pip show deepsentinel</code></li> <li>Python version: <code>python --version</code></li> <li>Error message: Full stack trace</li> <li>Minimal reproduction: Simplified code that reproduces the issue</li> <li>Expected vs actual behavior</li> </ol>"},{"location":"faq/#q-can-i-contribute-to-deepsentinel","title":"Q: Can I contribute to DeepSentinel?","text":"<p>A: Yes! We welcome contributions:</p> <ul> <li>Report bugs and request features</li> <li>Improve documentation </li> <li>Submit pull requests for bug fixes</li> <li>Share usage examples and tutorials</li> </ul> <p>Check our Contributing Guide for details.</p> <p>Still have questions? Join our Discord community or contact support@deepsentinel.ai</p>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with DeepSentinel in 5 minutes. This guide shows you how to install the SDK and make your first compliant API call.</p>"},{"location":"quickstart/#system-requirements","title":"System Requirements","text":"<p>Before installing DeepSentinel, ensure your system meets these requirements:</p> <ul> <li>Python: 3.8 or higher</li> <li>Operating Systems: Windows 10+, macOS 10.14+, Linux (any modern distribution)</li> <li>Memory: Minimum 4GB RAM (8GB+ recommended for production)</li> <li>Disk Space: At least 100MB free space</li> <li>Network: Internet connection for API access</li> <li>Dependencies: pip package manager</li> </ul>"},{"location":"quickstart/#installation-options","title":"Installation Options","text":""},{"location":"quickstart/#standard-installation","title":"Standard Installation","text":"<p>Install the DeepSentinel SDK using pip:</p> <pre><code>pip install deepsentinel-sdk```\n\n### Development Installation\n\nFor development with additional tools and dependencies:\n\n```bash\n# Clone the repository\ngit clone https://github.com/deepsentinel/deepsentinel-sdk.git\ncd deepsentinel-sdk/python\n\n# Install in development mode with all extras\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"quickstart/#virtual-environment-recommended","title":"Virtual Environment (Recommended)","text":"<p>We recommend using a virtual environment for isolation:</p> <pre><code># Create virtual environment\npython -m venv deepsentinel-env\n\n# Activate on Windows\ndeepsentinel-env\\Scripts\\activate\n\n# Activate on macOS/Linux\nsource deepsentinel-env/bin/activate\n\n# Install DeepSentinel\npip install deepsentinel-sdk```\n\n## Verify Installation\n\nAfter installation, verify that DeepSentinel is correctly installed:\n\n```bash\n# Check the installed version\npython -c \"import deepsentinel; print(f'DeepSentinel SDK version: {deepsentinel.__version__}')\"\n\n# Run the verification script (if installed in development mode)\npython -m deepsentinel.verify\n</code></pre>"},{"location":"quickstart/#get-api-keys","title":"Get API Keys","text":"<p>You'll need:</p> <ol> <li>DeepSentinel API Key - Sign up for free</li> <li>LLM Provider API Key - From OpenAI, Anthropic, etc.</li> </ol>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":"<p>Create a new Python file and add this code:</p> <pre><code>from deepsentinel import SentinelClient\n\n# Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-api-key\",\n    openai_api_key=\"your-openai-api-key\"\n)\n\n# Make a chat completion request\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"What are the key benefits of AI compliance?\"}\n    ]\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"quickstart/#run-your-code","title":"Run Your Code","text":"<p>Save the file as <code>test_deepsentinel.py</code> and run it:</p> <pre><code>python test_deepsentinel.py\n</code></pre> <p>That's it! \ud83c\udf89 You've just made your first compliant AI request.</p>"},{"location":"quickstart/#what-just-happened","title":"What Just Happened?","text":"<p>Behind the scenes, DeepSentinel:</p> <ol> <li>\u2705 Scanned your request for sensitive data (PII, PHI, etc.)</li> <li>\u2705 Applied compliance policies based on your configuration</li> <li>\u2705 Logged the interaction for audit purposes</li> <li>\u2705 Sent the request to OpenAI using their API</li> <li>\u2705 Returned the response through the same interface</li> </ol>"},{"location":"quickstart/#testing-compliance","title":"Testing Compliance","text":"<p>Try sending a request with sensitive data to see DeepSentinel in action:</p> <pre><code>from deepsentinel import SentinelClient, ComplianceViolationError\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-api-key\",\n    openai_api_key=\"your-openai-api-key\"\n)\n\ntry:\n    # This request contains a credit card number\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\", \n            \"content\": \"My credit card number is 4111-1111-1111-1111\"\n        }]\n    )\nexcept ComplianceViolationError as e:\n    print(f\"Compliance violation detected: {e}\")\n    print(f\"Violation types: {e.violations}\")\n</code></pre> <p>DeepSentinel will block this request and raise a <code>ComplianceViolationError</code> because it detected a credit card number.</p>"},{"location":"quickstart/#configuration-options","title":"Configuration Options","text":"<p>You can customize DeepSentinel's behavior during initialization:</p> <pre><code>from deepsentinel import SentinelClient, CompliancePolicy\n\n# Create a custom compliance policy\npolicy = CompliancePolicy(\n    name=\"strict-policy\",\n    jurisdictions=[\"GDPR\", \"HIPAA\", \"CCPA\"],\n    block_on_violation=True,\n    max_risk_score=0.7  # More strict than default (0.8)\n)\n\n# Initialize with custom configuration\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-api-key\",\n    openai_api_key=\"your-openai-api-key\",\n    compliance_policies=[policy],\n    debug_mode=True  # Enable debug logging\n)\n</code></pre>"},{"location":"quickstart/#using-different-providers","title":"Using Different Providers","text":"<p>DeepSentinel supports multiple LLM providers with the same interface:</p> <pre><code>client = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-api-key\",\n    openai_api_key=\"your-openai-api-key\",\n    anthropic_api_key=\"your-anthropic-api-key\"\n)\n\n# Use OpenAI (default)\nopenai_response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello from OpenAI!\"}]\n)\n\n# Use Anthropic\nanthropic_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello from Anthropic!\"}],\n    provider=\"anthropic\"  # Specify the provider\n)\n</code></pre>"},{"location":"quickstart/#streaming-responses","title":"Streaming Responses","text":"<p>DeepSentinel fully supports streaming responses:</p> <pre><code># Create a streaming request\nstream = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Write a poem about AI safety\"}],\n    stream=True\n)\n\n# Print the response as it arrives\nfor chunk in stream:\n    if chunk.choices and chunk.choices[0].delta.content:\n        print(chunk.choices[0].delta.content, end=\"\", flush=True)\n</code></pre>"},{"location":"quickstart/#environment-variables","title":"Environment Variables","text":"<p>For production applications, use environment variables for API keys:</p> <pre><code># Set environment variables\nexport DEEPSENTINEL_API_KEY=\"your-deepsentinel-api-key\"\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n</code></pre> <pre><code>import os\nfrom deepsentinel import SentinelClient\n\n# DeepSentinel automatically reads from environment variables\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n</code></pre>"},{"location":"quickstart/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"quickstart/#package-not-found","title":"Package Not Found","text":"<p><pre><code>ERROR: Could not find a version that satisfies the requirement deepsentinel\nERROR: No matching distribution found for deepsentinel\n</code></pre> Solution:  - Check your internet connection - Verify you're using Python 3.8+: <code>python --version</code> - Ensure pip is up to date: <code>pip install --upgrade pip</code></p>"},{"location":"quickstart/#dependency-conflicts","title":"Dependency Conflicts","text":"<p><pre><code>ERROR: pip's dependency resolver does not currently take into account all the packages that are installed.\n</code></pre> Solution: Use a virtual environment for a clean installation: <pre><code>python -m venv deepsentinel-env\nsource deepsentinel-env/bin/activate  # Windows: deepsentinel-env\\Scripts\\activate\npip install deepsentinel-sdk```\n\n### Permission Errors\n</code></pre> ERROR: Could not install packages due to PermissionError <pre><code>**Solution**: \n- Use `--user` flag: `pip install --user deepsentinel`\n- On Unix systems, use `sudo` (not recommended): `sudo pip install deepsentinel-sdk`\n- Use a virtual environment (recommended)\n\n### Import Error\n</code></pre> ImportError: No module named 'deepsentinel' <pre><code>**Solution**: \n- Verify installation: `pip show deepsentinel`\n- Check Python path: `python -c \"import sys; print(sys.path)\"`\n- Install again with verbose output: `pip install -v deepsentinel`\n\n### SSL Certificate Errors\n</code></pre> URLError:  <pre><code>**Solution**:\n- Update certificate authorities: `pip install --upgrade certifi`\n- On macOS, run the Python Install Certificates command: `/Applications/Python X.Y/Install Certificates.command`\n\n## Next Steps\n\nNow that you have DeepSentinel working, explore more advanced features:\n\n- **[Core Concepts](concepts/overview.md)** - Learn how DeepSentinel works under the hood\n- **[Tutorials](tutorials/basic-integration.md)** - Step-by-step guides for common scenarios\n- **[API Reference](reference/)** - Complete documentation of all classes and methods\n- **[Best Practices](guides/best-practices.md)** - Guidelines for production deployments\n\n## Common Issues\n\n### Import Error\n</code></pre> ImportError: No module named 'deepsentinel' <pre><code>**Solution**: Make sure you've installed the package: `pip install deepsentinel-sdk`\n\n### Authentication Error\n</code></pre> AuthenticationError: Invalid API key <pre><code>**Solution**: Check that your API keys are correct and have proper permissions\n\n### Configuration Error\n</code></pre> ConfigurationError: No providers configured ``` Solution: Make sure you've provided at least one LLM provider API key"},{"location":"quickstart/#getting-help","title":"Getting Help","text":"<p>If you run into issues:</p> <ul> <li>Check the FAQ for common questions</li> <li>Review the API Reference for detailed documentation</li> <li>Open an issue on GitHub</li> <li>Contact support at support@deepsentinel.ai</li> </ul> <p>Ready for more advanced usage? Continue to Core Concepts \u2192</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>Understanding how DeepSentinel works will help you make the most of its compliance and security features. This section covers the fundamental concepts and architecture.</p>"},{"location":"concepts/#overview","title":"Overview","text":"<p>DeepSentinel is designed around a simple principle: intercept, analyze, and protect. It sits between your application and LLM providers, ensuring that sensitive data never leaves your control without proper checks.</p> <pre><code>graph TB\n    A[Your Application] --&gt; B[DeepSentinel SDK]\n    B --&gt; C{Compliance Check}\n    C --&gt;|Pass| D[LLM Provider]\n    C --&gt;|Fail| E[Block/Anonymize]\n    D --&gt; F[Response]\n    F --&gt; G[Response Check]\n    G --&gt; H[Your Application]\n\n    B --&gt; I[Audit Logger]\n    B --&gt; J[Metrics Collector]\n    B --&gt; K[Cache Layer]</code></pre>"},{"location":"concepts/#key-components","title":"Key Components","text":""},{"location":"concepts/#1-overview","title":"1. Overview","text":"<p>Learn how DeepSentinel works as middleware and understand the request/response flow.</p>"},{"location":"concepts/#2-compliance-security","title":"2. Compliance &amp; Security","text":"<p>Understand the compliance engine, detection capabilities, and security features.</p>"},{"location":"concepts/#3-provider-integration","title":"3. Provider Integration","text":"<p>Learn how DeepSentinel integrates with different LLM providers while maintaining a consistent interface.</p>"},{"location":"concepts/#4-configuration","title":"4. Configuration","text":"<p>Master the configuration system to customize DeepSentinel for your specific needs.</p>"},{"location":"concepts/#design-principles","title":"Design Principles","text":""},{"location":"concepts/#simple-integration","title":"Simple Integration","text":"<p>DeepSentinel is designed to be a drop-in replacement for direct LLM provider SDKs. If you're using OpenAI's SDK, you can switch to DeepSentinel with minimal code changes.</p>"},{"location":"concepts/#compliance-first","title":"Compliance First","text":"<p>Every request is analyzed for compliance violations before reaching the LLM provider. This ensures that sensitive data is protected at the source.</p>"},{"location":"concepts/#performance-focused","title":"Performance Focused","text":"<p>Local detection and intelligent caching minimize latency impact. Most compliance checks add less than 5ms to request processing time.</p>"},{"location":"concepts/#provider-agnostic","title":"Provider Agnostic","text":"<p>The same interface works across all supported LLM providers, making it easy to switch providers or use multiple providers in the same application.</p>"},{"location":"concepts/#observable","title":"Observable","text":"<p>Comprehensive logging and metrics provide visibility into compliance events, performance, and system health.</p>"},{"location":"concepts/#getting-started","title":"Getting Started","text":"<p>If you haven't already, start with the Quick Start Guide to get DeepSentinel running in your application.</p> <p>Then dive into each concept section to understand how to configure and optimize DeepSentinel for your specific use case.</p> <p>Next: Overview \u2192</p>"},{"location":"concepts/compliance/","title":"Compliance &amp; Security","text":"<p>DeepSentinel's compliance engine is designed to detect and prevent sensitive data from being exposed to LLM providers. This section explains how the detection systems work and how to configure them for your needs.</p>"},{"location":"concepts/compliance/#compliance-architecture","title":"Compliance Architecture","text":"<pre><code>graph TB\n    A[Request] --&gt; B[Local Detection]\n    B --&gt; C[Pattern Matching]\n    B --&gt; D[Regex Engines]\n    B --&gt; E[ML Models]\n\n    C --&gt; F[Risk Assessment]\n    D --&gt; F\n    E --&gt; F\n\n    F --&gt; G{Risk Score}\n    G --&gt;|Low Risk| H[Allow]\n    G --&gt;|Medium Risk| I[Cloud Analysis]\n    G --&gt;|High Risk| J[Block/Anonymize]\n\n    I --&gt; K[DeepSentinel Cloud]\n    K --&gt; L[Advanced ML]\n    K --&gt; M[Context Analysis]\n    K --&gt; N[Final Decision]</code></pre>"},{"location":"concepts/compliance/#detection-engines","title":"Detection Engines","text":""},{"location":"concepts/compliance/#pii-personally-identifiable-information-detection","title":"PII (Personally Identifiable Information) Detection","text":"<p>Detects various types of personal information:</p> <pre><code>from deepsentinel import PIIDetector\n\ndetector = PIIDetector()\n\n# Detected PII types\npii_types = [\n    \"email_addresses\",\n    \"phone_numbers\", \n    \"social_security_numbers\",\n    \"credit_card_numbers\",\n    \"passport_numbers\",\n    \"driver_license_numbers\",\n    \"addresses\",\n    \"names\",\n    \"ip_addresses\",\n    \"mac_addresses\"\n]\n</code></pre> <p>Example Detection: <pre><code>text = \"Contact John Doe at john.doe@example.com or call 555-123-4567\"\n\nviolations = detector.scan(text)\n# Returns: [\n#   {\"type\": \"email\", \"value\": \"john.doe@example.com\", \"confidence\": 0.95},\n#   {\"type\": \"phone\", \"value\": \"555-123-4567\", \"confidence\": 0.90}\n# ]\n</code></pre></p>"},{"location":"concepts/compliance/#phi-protected-health-information-detection","title":"PHI (Protected Health Information) Detection","text":"<p>Specialized for healthcare data under HIPAA:</p> <pre><code>from deepsentinel import PHIDetector\n\ndetector = PHIDetector()\n\n# Detected PHI types\nphi_types = [\n    \"medical_record_numbers\",\n    \"insurance_numbers\", \n    \"prescription_numbers\",\n    \"medical_conditions\",\n    \"treatment_information\",\n    \"lab_results\",\n    \"medication_names\",\n    \"healthcare_provider_names\"\n]\n</code></pre> <p>Example Detection: <pre><code>text = \"Patient MRN 123456789 has diabetes and takes metformin 500mg\"\n\nviolations = detector.scan(text)\n# Returns: [\n#   {\"type\": \"medical_record_number\", \"value\": \"123456789\", \"confidence\": 0.98},\n#   {\"type\": \"medical_condition\", \"value\": \"diabetes\", \"confidence\": 0.85},\n#   {\"type\": \"medication\", \"value\": \"metformin 500mg\", \"confidence\": 0.90}\n# ]\n</code></pre></p>"},{"location":"concepts/compliance/#pci-payment-card-industry-detection","title":"PCI (Payment Card Industry) Detection","text":"<p>Focuses on payment-related sensitive data:</p> <pre><code>from deepsentinel import PCIDetector\n\ndetector = PCIDetector()\n\n# Detected PCI types\npci_types = [\n    \"credit_card_numbers\",\n    \"debit_card_numbers\",\n    \"cvv_codes\",\n    \"bank_account_numbers\",\n    \"routing_numbers\",\n    \"payment_processor_ids\"\n]\n</code></pre> <p>Example Detection: <pre><code>text = \"My Visa card number is 4111-1111-1111-1111 with CVV 123\"\n\nviolations = detector.scan(text)\n# Returns: [\n#   {\"type\": \"credit_card\", \"value\": \"4111-1111-1111-1111\", \"confidence\": 0.99},\n#   {\"type\": \"cvv\", \"value\": \"123\", \"confidence\": 0.95}\n# ]\n</code></pre></p>"},{"location":"concepts/compliance/#compliance-policies","title":"Compliance Policies","text":""},{"location":"concepts/compliance/#creating-policies","title":"Creating Policies","text":"<p>Policies define how DeepSentinel should handle different types of sensitive data:</p> <pre><code>from deepsentinel import CompliancePolicy, PIIPolicy, ContentFilterPolicy\n\n# Basic compliance policy\nbasic_policy = CompliancePolicy(\n    name=\"basic-compliance\",\n    jurisdictions=[\"GDPR\", \"CCPA\"],\n    block_on_violation=True,\n    max_risk_score=0.8,\n    enable_pii_detection=True,\n    enable_phi_detection=False,\n    enable_pci_detection=True\n)\n\n# Specialized PII policy\npii_policy = PIIPolicy(\n    name=\"strict-pii\",\n    pii_types=[\"email\", \"phone\", \"ssn\", \"credit_card\"],\n    anonymization_strategy=\"mask\",\n    block_threshold=0.7,\n    notify_on_detection=True\n)\n\n# Content filtering policy\ncontent_policy = ContentFilterPolicy(\n    name=\"content-filter\",\n    blocked_categories=[\"harassment\", \"hate_speech\", \"violence\"],\n    severity_threshold=\"medium\",\n    custom_patterns=[\"company_confidential\", \"internal_only\"]\n)\n</code></pre>"},{"location":"concepts/compliance/#policy-configuration","title":"Policy Configuration","text":"<p>Apply policies to your client:</p> <pre><code>from deepsentinel import SentinelClient\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\",\n    compliance_policies=[basic_policy, pii_policy, content_policy]\n)\n</code></pre>"},{"location":"concepts/compliance/#risk-assessment","title":"Risk Assessment","text":"<p>DeepSentinel calculates risk scores for content based on:</p>"},{"location":"concepts/compliance/#risk-factors","title":"Risk Factors","text":"<ul> <li>Sensitivity Level: Type of data detected (SSN = high, email = medium)  </li> <li>Confidence Score: How certain the detection is</li> <li>Context: Where the sensitive data appears in the request</li> <li>Quantity: Amount of sensitive data in a single request</li> <li>Patterns: Unusual patterns that might indicate data dumps</li> </ul>"},{"location":"concepts/compliance/#risk-scores","title":"Risk Scores","text":"<ul> <li>0.0 - 0.3: Low risk - Usually allowed</li> <li>0.4 - 0.7: Medium risk - May trigger additional analysis</li> <li>0.8 - 1.0: High risk - Typically blocked or anonymized</li> </ul> <pre><code># Example risk calculation\ntext = \"Employee SSN: 123-45-6789, Email: employee@company.com\"\n\nrisk_assessment = {\n    \"overall_score\": 0.85,  # High risk due to SSN\n    \"factors\": [\n        {\"type\": \"ssn\", \"score\": 0.95, \"confidence\": 0.98},\n        {\"type\": \"email\", \"score\": 0.3, \"confidence\": 0.95}\n    ],\n    \"recommendation\": \"block\"\n}\n</code></pre>"},{"location":"concepts/compliance/#compliance-actions","title":"Compliance Actions","text":"<p>When violations are detected, DeepSentinel can take several actions:</p>"},{"location":"concepts/compliance/#block-request","title":"Block Request","text":"<pre><code>from deepsentinel import ComplianceViolationError\n\ntry:\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789\"}]\n    )\nexcept ComplianceViolationError as e:\n    print(f\"Request blocked: {e.message}\")\n    print(f\"Violations: {[v.type for v in e.violations]}\")\n</code></pre>"},{"location":"concepts/compliance/#anonymize-data","title":"Anonymize Data","text":"<pre><code># Original: \"Contact John at john@example.com\"\n# Anonymized: \"Contact [NAME] at [EMAIL]\"\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\",\n    anonymization_enabled=True\n)\n\n# Request is automatically anonymized before sending to provider\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Contact John at john@example.com\"}]\n)\n</code></pre>"},{"location":"concepts/compliance/#log-and-continue","title":"Log and Continue","text":"<pre><code># Allow request but log the violation\npolicy = CompliancePolicy(\n    name=\"log-only\",\n    block_on_violation=False,  # Don't block\n    log_violations=True        # But log them\n)\n</code></pre>"},{"location":"concepts/compliance/#jurisdiction-specific-compliance","title":"Jurisdiction-Specific Compliance","text":""},{"location":"concepts/compliance/#gdpr-general-data-protection-regulation","title":"GDPR (General Data Protection Regulation)","text":"<pre><code>gdpr_policy = CompliancePolicy(\n    name=\"gdpr-compliance\",\n    jurisdictions=[\"GDPR\"],\n    block_on_violation=True,\n    pii_categories=[\n        \"personal_identifiers\",\n        \"location_data\", \n        \"online_identifiers\",\n        \"biometric_data\"\n    ],\n    right_to_erasure=True,\n    data_minimization=True\n)\n</code></pre>"},{"location":"concepts/compliance/#hipaa-health-insurance-portability-and-accountability-act","title":"HIPAA (Health Insurance Portability and Accountability Act)","text":"<pre><code>hipaa_policy = CompliancePolicy(\n    name=\"hipaa-compliance\", \n    jurisdictions=[\"HIPAA\"],\n    enable_phi_detection=True,\n    phi_categories=[\n        \"medical_records\",\n        \"health_plan_numbers\",\n        \"medical_device_identifiers\"\n    ],\n    minimum_necessary=True,\n    audit_logging=True\n)\n</code></pre>"},{"location":"concepts/compliance/#ccpa-california-consumer-privacy-act","title":"CCPA (California Consumer Privacy Act)","text":"<pre><code>ccpa_policy = CompliancePolicy(\n    name=\"ccpa-compliance\",\n    jurisdictions=[\"CCPA\"],\n    consumer_categories=[\n        \"personal_identifiers\",\n        \"commercial_information\",\n        \"internet_activity\",\n        \"geolocation_data\"\n    ],\n    opt_out_rights=True,\n    transparency_requirements=True\n)\n</code></pre>"},{"location":"concepts/compliance/#custom-detection-patterns","title":"Custom Detection Patterns","text":"<p>Add your own detection patterns for organization-specific sensitive data:</p> <pre><code>from deepsentinel import PatternMatcher\n\n# Define custom patterns\ncustom_patterns = {\n    \"employee_id\": r\"EMP\\d{6}\",\n    \"project_code\": r\"PROJ-[A-Z]{3}-\\d{4}\",\n    \"api_key\": r\"sk-[a-zA-Z0-9]{32}\"\n}\n\npattern_matcher = PatternMatcher(custom_patterns)\n\n# Register with compliance engine\nclient.compliance_engine.add_detector(pattern_matcher)\n</code></pre>"},{"location":"concepts/compliance/#performance-optimization","title":"Performance Optimization","text":""},{"location":"concepts/compliance/#local-vs-cloud-detection","title":"Local vs Cloud Detection","text":"<pre><code># Fast local detection for obvious patterns\nlocal_config = {\n    \"enable_local_detection\": True,\n    \"local_patterns\": [\"ssn\", \"credit_card\", \"email\"],\n    \"cloud_threshold\": 0.7  # Only use cloud for medium risk\n}\n\n# More thorough but slower cloud analysis\ncloud_config = {\n    \"enable_cloud_analysis\": True,\n    \"cloud_models\": [\"advanced_pii\", \"context_analysis\"],\n    \"max_cloud_latency\": 200  # ms\n}\n</code></pre>"},{"location":"concepts/compliance/#caching-detection-results","title":"Caching Detection Results","text":"<pre><code># Cache compliance decisions to avoid re-analyzing similar content\ncache_config = {\n    \"enable_compliance_cache\": True,\n    \"cache_ttl\": 3600,  # 1 hour\n    \"cache_max_size\": 10000,  # entries\n    \"hash_content\": True  # Hash content for privacy\n}\n</code></pre>"},{"location":"concepts/compliance/#monitoring-compliance-events","title":"Monitoring Compliance Events","text":""},{"location":"concepts/compliance/#real-time-monitoring","title":"Real-time Monitoring","text":"<pre><code>from deepsentinel import ComplianceMonitor\n\nmonitor = ComplianceMonitor(client)\n\n# Set up event handlers\n@monitor.on(\"violation_detected\")\ndef handle_violation(event):\n    print(f\"Violation: {event.type} - Risk: {event.risk_score}\")\n\n@monitor.on(\"policy_triggered\") \ndef handle_policy(event):\n    print(f\"Policy '{event.policy}' triggered action: {event.action}\")\n\n# Start monitoring\nmonitor.start()\n</code></pre>"},{"location":"concepts/compliance/#compliance-reporting","title":"Compliance Reporting","text":"<pre><code>from deepsentinel import ComplianceReporter\n\nreporter = ComplianceReporter(client)\n\n# Generate compliance report\nreport = reporter.generate_report(\n    start_date=\"2025-01-01\",\n    end_date=\"2025-01-31\",\n    include_trends=True,\n    group_by=[\"violation_type\", \"policy\"]\n)\n\nprint(f\"Total violations: {report.total_violations}\")\nprint(f\"Most common type: {report.top_violation_type}\")\nprint(f\"Compliance rate: {report.compliance_rate}%\")\n</code></pre>"},{"location":"concepts/compliance/#best-practices","title":"Best Practices","text":""},{"location":"concepts/compliance/#1-start-with-conservative-policies","title":"1. Start with Conservative Policies","text":"<p>Begin with strict policies and relax them based on your needs:</p> <pre><code>conservative_policy = CompliancePolicy(\n    name=\"conservative-start\",\n    block_on_violation=True,\n    max_risk_score=0.6,  # Strict threshold\n    enable_all_detectors=True\n)\n</code></pre>"},{"location":"concepts/compliance/#2-use-layered-detection","title":"2. Use Layered Detection","text":"<p>Combine multiple detection methods for comprehensive coverage:</p> <pre><code>layered_config = {\n    \"local_patterns\": True,      # Fast, basic patterns\n    \"ml_models\": True,          # Context-aware detection  \n    \"cloud_analysis\": True,     # Advanced analysis\n    \"custom_rules\": True        # Organization-specific rules\n}\n</code></pre>"},{"location":"concepts/compliance/#3-monitor-and-tune","title":"3. Monitor and Tune","text":"<p>Regularly review compliance events and adjust policies:</p> <pre><code># Review recent false positives\nfalse_positives = client.audit_api.get_events(\n    event_types=[\"false_positive\"],\n    limit=100\n)\n\n# Adjust thresholds based on data\nfor fp in false_positives:\n    print(f\"Pattern: {fp.pattern}, Score: {fp.risk_score}\")\n</code></pre>"},{"location":"concepts/compliance/#4-test-thoroughly","title":"4. Test Thoroughly","text":"<p>Test your compliance configuration with known sensitive data:</p> <pre><code>test_cases = [\n    \"SSN: 123-45-6789\",\n    \"Credit card: 4111-1111-1111-1111\", \n    \"Email: test@example.com\",\n    \"Medical record: MRN-123456\"\n]\n\nfor test_case in test_cases:\n    try:\n        client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": test_case}]\n        )\n        print(f\"\u274c Not detected: {test_case}\")\n    except ComplianceViolationError:\n        print(f\"\u2705 Detected: {test_case}\")\n</code></pre> <p>Next: Provider Integration \u2192</p>"},{"location":"concepts/configuration/","title":"Configuration","text":"<p>DeepSentinel provides a flexible configuration system that supports multiple configuration sources and layered overrides. This section explains how to configure the SDK for different environments and use cases.</p>"},{"location":"concepts/configuration/#configuration-architecture","title":"Configuration Architecture","text":"<pre><code>graph TB\n    A[Configuration Sources] --&gt; B[Code Configuration]\n    A --&gt; C[Environment Variables]\n    A --&gt; D[Configuration Files]\n    A --&gt; E[Runtime Updates]\n\n    B --&gt; F[Final Configuration]\n    C --&gt; F\n    D --&gt; F\n    E --&gt; F\n\n    F --&gt; G[SentinelClient]\n    F --&gt; H[Provider Registry]\n    F --&gt; I[Compliance Engine]\n    F --&gt; J[Audit System]</code></pre>"},{"location":"concepts/configuration/#configuration-sources","title":"Configuration Sources","text":""},{"location":"concepts/configuration/#1-code-configuration","title":"1. Code Configuration","text":"<p>Direct configuration through Python code:</p> <pre><code>from deepsentinel import SentinelClient, SentinelConfig, CompliancePolicy\n\n# Direct client configuration\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\",\n    debug_mode=True,\n    max_risk_score=0.8\n)\n\n# Using configuration object\nconfig = SentinelConfig(\n    sentinel_api_key=\"your-key\",\n    default_provider=\"openai\",\n    debug_mode=True,\n    compliance_policies=[\n        CompliancePolicy(\n            name=\"basic-policy\",\n            block_on_violation=True,\n            max_risk_score=0.8\n        )\n    ]\n)\n\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"concepts/configuration/#2-environment-variables","title":"2. Environment Variables","text":"<p>Configure through environment variables:</p> <pre><code># Basic configuration\nexport DEEPSENTINEL_API_KEY=\"your-deepsentinel-key\"\nexport OPENAI_API_KEY=\"your-openai-key\"\nexport ANTHROPIC_API_KEY=\"your-anthropic-key\"\n\n# Advanced configuration\nexport DEEPSENTINEL_DEBUG_MODE=\"true\"\nexport DEEPSENTINEL_MAX_RISK_SCORE=\"0.7\"\nexport DEEPSENTINEL_DEFAULT_PROVIDER=\"openai\"\nexport DEEPSENTINEL_ENVIRONMENT=\"production\"\n\n# Compliance configuration\nexport DEEPSENTINEL_BLOCK_ON_VIOLATION=\"true\"\nexport DEEPSENTINEL_ENABLE_PII_DETECTION=\"true\"\nexport DEEPSENTINEL_ENABLE_PHI_DETECTION=\"false\"\n\n# Performance configuration\nexport DEEPSENTINEL_REQUEST_TIMEOUT=\"30.0\"\nexport DEEPSENTINEL_MAX_RETRIES=\"3\"\nexport DEEPSENTINEL_CACHE_TTL=\"3600\"\n</code></pre>"},{"location":"concepts/configuration/#3-configuration-files","title":"3. Configuration Files","text":"<p>Load configuration from YAML or JSON files:</p> <p>deepsentinel.yaml: <pre><code># Basic settings\nsentinel_api_key: \"your-deepsentinel-key\"\ndefault_provider: \"openai\"\ndebug_mode: true\nenvironment: \"production\"\n\n# Provider configurations\nproviders:\n  openai:\n    api_key: \"your-openai-key\"\n    timeout: 30.0\n    max_retries: 3\n    base_url: \"https://api.openai.com/v1\"\n\n  anthropic:\n    api_key: \"your-anthropic-key\"\n    timeout: 45.0\n    max_retries: 2\n    base_url: \"https://api.anthropic.com\"\n\n# Compliance settings\ncompliance:\n  block_on_violation: true\n  max_risk_score: 0.8\n  enable_pii_detection: true\n  enable_phi_detection: false\n  enable_pci_detection: true\n\n  policies:\n    - name: \"gdpr-policy\"\n      jurisdictions: [\"GDPR\"]\n      block_on_violation: true\n      max_risk_score: 0.7\n\n    - name: \"hipaa-policy\"\n      jurisdictions: [\"HIPAA\"]\n      enable_phi_detection: true\n      block_on_violation: true\n\n# Audit configuration\naudit:\n  enabled: true\n  detailed_logs: true\n  retention_days: 90\n\n# Performance settings\nperformance:\n  cache_enabled: true\n  cache_ttl: 3600\n  cache_max_size: 10000\n  local_detection: true\n  connection_pool_size: 10\n\n# Logging configuration\nlogging:\n  level: \"INFO\"\n  structured: true\n  include_request_body: false\n  include_response_body: false\n</code></pre></p> <p>Load from file: <pre><code>from deepsentinel import SentinelConfig, SentinelClient\n\n# Load from YAML\nconfig = SentinelConfig.from_file(\"deepsentinel.yaml\")\nclient = SentinelClient(config=config)\n\n# Load from JSON\nconfig = SentinelConfig.from_file(\"deepsentinel.json\")\nclient = SentinelClient(config=config)\n</code></pre></p>"},{"location":"concepts/configuration/#configuration-classes","title":"Configuration Classes","text":""},{"location":"concepts/configuration/#sentinelconfig","title":"SentinelConfig","text":"<p>The main configuration class that holds all settings:</p> <pre><code>from deepsentinel import SentinelConfig\n\nconfig = SentinelConfig(\n    # API credentials\n    sentinel_api_key=\"your-key\",\n\n    # Provider settings\n    default_provider=\"openai\",\n    provider_configs=[...],\n\n    # Compliance settings\n    compliance_policies=[...],\n    max_risk_score=0.8,\n    block_on_violation=True,\n\n    # Performance settings\n    request_timeout=30.0,\n    max_retries=3,\n    cache_enabled=True,\n\n    # Environment settings\n    environment=\"production\",\n    debug_mode=False,\n\n    # Logging settings\n    log_level=\"INFO\"\n)\n</code></pre>"},{"location":"concepts/configuration/#compliancepolicy","title":"CompliancePolicy","text":"<p>Configuration for compliance rules and detection:</p> <pre><code>from deepsentinel import CompliancePolicy\n\npolicy = CompliancePolicy(\n    name=\"custom-policy\",\n    description=\"Custom compliance policy for our organization\",\n\n    # Jurisdictions to comply with\n    jurisdictions=[\"GDPR\", \"HIPAA\", \"CCPA\"],\n\n    # Detection settings\n    enable_pii_detection=True,\n    enable_phi_detection=True,\n    enable_pci_detection=True,\n\n    # Risk assessment\n    max_risk_score=0.8,\n    block_threshold=0.7,\n    anonymize_threshold=0.5,\n\n    # Actions\n    block_on_violation=True,\n    anonymize_sensitive_data=False,\n    log_violations=True,\n    notify_on_violation=True,\n\n    # Custom patterns\n    custom_patterns={\n        \"employee_id\": r\"EMP\\d{6}\",\n        \"project_code\": r\"PROJ-[A-Z]{3}-\\d{4}\"\n    }\n)\n</code></pre>"},{"location":"concepts/configuration/#piipolicy","title":"PIIPolicy","text":"<p>Specialized policy for PII detection:</p> <pre><code>from deepsentinel import PIIPolicy\n\npii_policy = PIIPolicy(\n    name=\"strict-pii\",\n\n    # PII types to detect\n    pii_types=[\n        \"email_addresses\",\n        \"phone_numbers\",\n        \"social_security_numbers\",\n        \"credit_card_numbers\",\n        \"ip_addresses\"\n    ],\n\n    # Handling strategy\n    anonymization_strategy=\"mask\",  # or \"redact\", \"hash\"\n    block_threshold=0.7,\n    anonymize_threshold=0.5,\n\n    # Notifications\n    notify_on_detection=True,\n    notification_webhook=\"https://your-domain.com/pii-alerts\"\n)\n</code></pre>"},{"location":"concepts/configuration/#providerconfig","title":"ProviderConfig","text":"<p>Configuration for individual LLM providers:</p> <pre><code>from deepsentinel import ProviderConfig\n\nopenai_config = ProviderConfig(\n    name=\"openai\",\n    api_key=\"your-openai-key\",\n    base_url=\"https://api.openai.com/v1\",\n\n    # Connection settings\n    timeout=30.0,\n    max_retries=3,\n\n    # Rate limiting\n    rate_limit={\n        \"requests_per_minute\": 3500,\n        \"tokens_per_minute\": 90000\n    },\n\n    # Model aliases\n    model_aliases={\n        \"gpt-4-latest\": \"gpt-4o\",\n        \"gpt-3.5\": \"gpt-3.5-turbo\"\n    },\n\n    # Custom headers\n    headers={\n        \"User-Agent\": \"MyApp/1.0\",\n        \"X-Custom-Header\": \"value\"\n    }\n)\n</code></pre>"},{"location":"concepts/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>DeepSentinel automatically validates configuration and provides helpful error messages:</p> <pre><code>from deepsentinel import SentinelConfig, ConfigurationError\n\ntry:\n    config = SentinelConfig(\n        sentinel_api_key=\"\",  # Invalid: empty key\n        max_risk_score=1.5,   # Invalid: score &gt; 1.0\n        request_timeout=-1    # Invalid: negative timeout\n    )\nexcept ConfigurationError as e:\n    print(f\"Configuration error: {e.message}\")\n    print(f\"Invalid fields: {e.invalid_fields}\")\n</code></pre>"},{"location":"concepts/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"concepts/configuration/#development-environment","title":"Development Environment","text":"<pre><code>dev_config = SentinelConfig(\n    environment=\"development\",\n    debug_mode=True,\n    log_level=\"DEBUG\",\n\n    # Relaxed compliance for testing\n    max_risk_score=0.9,\n    block_on_violation=False,\n\n    # Faster timeouts for development\n    request_timeout=10.0,\n\n    # Disable caching for fresh results\n    cache_enabled=False\n)\n</code></pre>"},{"location":"concepts/configuration/#production-environment","title":"Production Environment","text":"<pre><code>prod_config = SentinelConfig(\n    environment=\"production\",\n    debug_mode=False,\n    log_level=\"INFO\",\n\n    # Strict compliance\n    max_risk_score=0.8,\n    block_on_violation=True,\n\n    # Production timeouts\n    request_timeout=30.0,\n    max_retries=3,\n\n    # Enable all performance optimizations\n    cache_enabled=True,\n    local_detection=True,\n    connection_pool_size=20,\n\n    # Comprehensive audit logging\n    audit_config=AuditConfig(\n        enabled=True,\n        detailed_logs=True,\n        retention_days=365\n    )\n)\n</code></pre>"},{"location":"concepts/configuration/#testing-environment","title":"Testing Environment","text":"<pre><code>test_config = SentinelConfig(\n    environment=\"testing\",\n    debug_mode=True,\n\n    # Use mock providers for testing\n    provider_configs=[\n        ProviderConfig(\n            name=\"mock\",\n            base_url=\"http://localhost:8080/mock\"\n        )\n    ],\n\n    # Disable external calls\n    api_integration_enabled=False,\n\n    # Fast timeouts for tests\n    request_timeout=5.0,\n\n    # Deterministic behavior\n    cache_enabled=False\n)\n</code></pre>"},{"location":"concepts/configuration/#dynamic-configuration","title":"Dynamic Configuration","text":""},{"location":"concepts/configuration/#runtime-updates","title":"Runtime Updates","text":"<p>Update configuration at runtime:</p> <pre><code>client = SentinelClient(config=initial_config)\n\n# Update compliance policy\nnew_policy = CompliancePolicy(\n    name=\"stricter-policy\",\n    max_risk_score=0.6\n)\nclient.config.add_compliance_policy(new_policy)\n\n# Update provider configuration\nclient.config.add_provider(ProviderConfig(\n    name=\"new_provider\",\n    api_key=\"new-key\"\n))\n\n# Update performance settings\nclient.config.performance_config.cache_ttl = 7200\n</code></pre>"},{"location":"concepts/configuration/#configuration-monitoring","title":"Configuration Monitoring","text":"<p>Monitor configuration changes:</p> <pre><code>@client.on_config_change\ndef handle_config_change(event):\n    print(f\"Configuration changed: {event.field} = {event.new_value}\")\n\n    # Re-initialize components if needed\n    if event.field in [\"compliance_policies\", \"provider_configs\"]:\n        client.reinitialize()\n</code></pre>"},{"location":"concepts/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"concepts/configuration/#1-use-environment-specific-configs","title":"1. Use Environment-Specific Configs","text":"<p>Create separate configuration files for each environment:</p> <pre><code>configs/\n\u251c\u2500\u2500 development.yaml\n\u251c\u2500\u2500 staging.yaml\n\u251c\u2500\u2500 production.yaml\n\u2514\u2500\u2500 testing.yaml\n</code></pre>"},{"location":"concepts/configuration/#2-secure-api-keys","title":"2. Secure API Keys","text":"<p>Never hardcode API keys in configuration files:</p> <pre><code># Good: Use environment variables\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\n# Better: Use secret management\nfrom your_secrets import get_secret\n\nconfig = SentinelConfig(\n    sentinel_api_key=get_secret(\"deepsentinel-api-key\"),\n    openai_api_key=get_secret(\"openai-api-key\")\n)\n</code></pre>"},{"location":"concepts/configuration/#3-layer-configuration-sources","title":"3. Layer Configuration Sources","text":"<p>Use multiple configuration sources with proper precedence:</p> <pre><code># 1. Start with file configuration\nconfig = SentinelConfig.from_file(\"config.yaml\")\n\n# 2. Override with environment variables\nconfig.update_from_env()\n\n# 3. Apply runtime overrides\nconfig.update_from_dict({\n    \"debug_mode\": True,\n    \"log_level\": \"DEBUG\"\n})\n</code></pre>"},{"location":"concepts/configuration/#4-validate-configuration-early","title":"4. Validate Configuration Early","text":"<p>Validate configuration at startup:</p> <pre><code>def validate_config(config: SentinelConfig) -&gt; None:\n    \"\"\"Validate configuration before using it.\"\"\"\n    if not config.sentinel_api_key:\n        raise ConfigurationError(\"DeepSentinel API key is required\")\n\n    if not any(p.api_key for p in config.provider_configs):\n        raise ConfigurationError(\"At least one provider API key is required\")\n\n    if config.max_risk_score &lt; 0 or config.max_risk_score &gt; 1:\n        raise ConfigurationError(\"max_risk_score must be between 0 and 1\")\n\n# Validate before creating client\nvalidate_config(config)\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"concepts/configuration/#5-use-configuration-templates","title":"5. Use Configuration Templates","text":"<p>Create reusable configuration templates:</p> <pre><code>def create_gdpr_config(**overrides) -&gt; SentinelConfig:\n    \"\"\"Create GDPR-compliant configuration.\"\"\"\n    base_config = {\n        \"compliance_policies\": [\n            CompliancePolicy(\n                name=\"gdpr-policy\",\n                jurisdictions=[\"GDPR\"],\n                block_on_violation=True,\n                max_risk_score=0.7,\n                enable_pii_detection=True\n            )\n        ],\n        \"audit_config\": AuditConfig(\n            enabled=True,\n            retention_days=365,\n            detailed_logs=True\n        )\n    }\n\n    base_config.update(overrides)\n    return SentinelConfig(**base_config)\n\n# Use the template\nconfig = create_gdpr_config(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\"\n)\n</code></pre>"},{"location":"concepts/configuration/#configuration-reference","title":"Configuration Reference","text":""},{"location":"concepts/configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>from deepsentinel import (\n    SentinelConfig, CompliancePolicy, PIIPolicy, \n    ProviderConfig, AuditConfig, LoggingConfig, PerformanceConfig\n)\n\nconfig = SentinelConfig(\n    # API credentials\n    sentinel_api_key=\"your-deepsentinel-key\",\n\n    # Environment\n    environment=\"production\",\n    debug_mode=False,\n\n    # Provider settings\n    default_provider=\"openai\",\n    provider_configs=[\n        ProviderConfig(\n            name=\"openai\",\n            api_key=\"your-openai-key\",\n            timeout=30.0,\n            max_retries=3\n        ),\n        ProviderConfig(\n            name=\"anthropic\",\n            api_key=\"your-anthropic-key\",\n            timeout=45.0,\n            max_retries=2\n        )\n    ],\n\n    # Compliance policies\n    compliance_policies=[\n        CompliancePolicy(\n            name=\"base-policy\",\n            jurisdictions=[\"GDPR\", \"CCPA\"],\n            block_on_violation=True,\n            max_risk_score=0.8,\n            enable_pii_detection=True,\n            enable_phi_detection=False,\n            enable_pci_detection=True\n        ),\n        PIIPolicy(\n            name=\"pii-policy\",\n            pii_types=[\"email\", \"phone\", \"ssn\"],\n            anonymization_strategy=\"mask\",\n            block_threshold=0.7\n        )\n    ],\n\n    # Audit configuration\n    audit_config=AuditConfig(\n        enabled=True,\n        detailed_logs=True,\n        retention_days=90,\n        export_format=\"json\"\n    ),\n\n    # Logging configuration\n    logging_config=LoggingConfig(\n        level=\"INFO\",\n        structured=True,\n        include_request_body=False,\n        include_response_body=False\n    ),\n\n    # Performance configuration\n    performance_config=PerformanceConfig(\n        cache_enabled=True,\n        cache_ttl=3600,\n        cache_max_size=10000,\n        local_detection=True,\n        connection_pool_size=10,\n        request_timeout=30.0,\n        max_retries=3\n    )\n)\n</code></pre> <p>Next: Tutorials \u2192</p>"},{"location":"concepts/overview/","title":"Overview - How DeepSentinel Works","text":"<p>DeepSentinel acts as an intelligent middleware layer between your application and LLM providers. It intercepts requests, applies compliance checks, and ensures sensitive data is handled safely.</p>"},{"location":"concepts/overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph LR\n    subgraph \"Your Application\"\n        A[Python Code]\n    end\n\n    subgraph \"DeepSentinel SDK\"\n        B[SentinelClient]\n        C[Compliance Engine]\n        D[Provider Registry]\n        E[Audit Logger]\n        F[Cache Layer]\n        G[Metrics Collector]\n    end\n\n    subgraph \"LLM Providers\"\n        H[OpenAI]\n        I[Anthropic]\n        J[Other Providers]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    B --&gt; D\n    B --&gt; E\n    B --&gt; F\n    B --&gt; G\n    D --&gt; H\n    D --&gt; I\n    D --&gt; J</code></pre>"},{"location":"concepts/overview/#request-flow","title":"Request Flow","text":"<p>Understanding the request flow helps you see where compliance checks happen and how to optimize performance:</p>"},{"location":"concepts/overview/#1-request-initiation","title":"1. Request Initiation","text":"<pre><code>response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello, world!\"}]\n)\n</code></pre>"},{"location":"concepts/overview/#2-pre-processing","title":"2. Pre-Processing","text":"<ul> <li>Local Detection: Fast, on-device scanning for obvious sensitive data patterns</li> <li>Request Validation: Ensures the request format is correct</li> <li>Cache Check: Looks for previous compliance decisions for similar requests</li> </ul>"},{"location":"concepts/overview/#3-compliance-analysis","title":"3. Compliance Analysis","text":"<ul> <li>PII Detection: Scans for personally identifiable information</li> <li>PHI Detection: Checks for protected health information</li> <li>PCI Detection: Looks for payment card information</li> <li>Policy Evaluation: Applies your organization's compliance policies</li> </ul>"},{"location":"concepts/overview/#4-decision-making","title":"4. Decision Making","text":"<p>Based on the compliance analysis, DeepSentinel will:</p> <ul> <li>\u2705 Allow: Request passes all checks and proceeds to the provider</li> <li>\ud83d\udeab Block: Request contains sensitive data and is rejected</li> <li>\ud83d\udd04 Anonymize: Sensitive data is masked before sending to the provider</li> </ul>"},{"location":"concepts/overview/#5-provider-communication","title":"5. Provider Communication","text":"<ul> <li>Provider Selection: Routes to the appropriate LLM provider</li> <li>Request Transformation: Adapts the request format for the specific provider</li> <li>Error Handling: Manages provider-specific errors and retries</li> </ul>"},{"location":"concepts/overview/#6-response-processing","title":"6. Response Processing","text":"<ul> <li>Response Validation: Ensures the response format is correct</li> <li>Compliance Check: Scans response content for any leaked sensitive data</li> <li>Audit Logging: Records the interaction for compliance tracking</li> </ul>"},{"location":"concepts/overview/#7-response-delivery","title":"7. Response Delivery","text":"<p>The processed response is returned to your application with the same interface you'd expect from the provider's SDK.</p>"},{"location":"concepts/overview/#core-components","title":"Core Components","text":""},{"location":"concepts/overview/#sentinelclient","title":"SentinelClient","text":"<p>The main entry point for all interactions. It provides interfaces that match popular LLM provider SDKs:</p> <pre><code>from deepsentinel import SentinelClient\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\"\n)\n\n# Chat interface (like OpenAI)\nclient.chat.completions.create(...)\n\n# Embeddings interface\nclient.embeddings.create(...)\n\n# Models interface\nclient.models.list()\n</code></pre>"},{"location":"concepts/overview/#compliance-engine","title":"Compliance Engine","text":"<p>The heart of DeepSentinel's security features:</p> <ul> <li>Detection Engines: Specialized modules for different types of sensitive data</li> <li>Policy Manager: Enforces your organization's compliance rules</li> <li>Risk Assessment: Calculates risk scores for content</li> <li>Action Enforcement: Blocks, allows, or anonymizes based on policies</li> </ul>"},{"location":"concepts/overview/#provider-registry","title":"Provider Registry","text":"<p>Manages connections to different LLM providers:</p> <ul> <li>Provider Adapters: Translates between DeepSentinel's interface and provider APIs</li> <li>Load Balancing: Distributes requests across multiple providers</li> <li>Health Monitoring: Tracks provider availability and performance</li> <li>Fallback Handling: Switches providers when one becomes unavailable</li> </ul>"},{"location":"concepts/overview/#audit-system","title":"Audit System","text":"<p>Comprehensive logging for compliance and monitoring:</p> <ul> <li>Request Logging: Records all incoming requests and their compliance status</li> <li>Response Logging: Tracks all responses and any transformations</li> <li>Event Streaming: Real-time events for monitoring systems</li> <li>Retention Management: Automatically manages log retention based on policies</li> </ul>"},{"location":"concepts/overview/#interfaces","title":"Interfaces","text":"<p>DeepSentinel provides familiar interfaces that match popular LLM provider SDKs:</p>"},{"location":"concepts/overview/#chat-interface","title":"Chat Interface","text":"<pre><code># Synchronous\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n)\n\n# Streaming\nfor chunk in client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    stream=True\n):\n    print(chunk.choices[0].delta.content, end=\"\")\n</code></pre>"},{"location":"concepts/overview/#embeddings-interface","title":"Embeddings Interface","text":"<pre><code>response = client.embeddings.create(\n    model=\"text-embedding-ada-002\",\n    input=\"Text to embed\"\n)\n</code></pre>"},{"location":"concepts/overview/#models-interface","title":"Models Interface","text":"<pre><code># List available models\nmodels = client.models.list()\n\n# Get model details\nmodel = client.models.retrieve(\"gpt-4o\")\n</code></pre>"},{"location":"concepts/overview/#configuration-layers","title":"Configuration Layers","text":"<p>DeepSentinel supports multiple configuration layers for flexibility:</p>"},{"location":"concepts/overview/#1-code-configuration","title":"1. Code Configuration","text":"<pre><code>from deepsentinel import SentinelClient, CompliancePolicy\n\npolicy = CompliancePolicy(\n    name=\"strict-policy\",\n    block_on_violation=True,\n    max_risk_score=0.7\n)\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    compliance_policies=[policy]\n)\n</code></pre>"},{"location":"concepts/overview/#2-environment-variables","title":"2. Environment Variables","text":"<pre><code>export DEEPSENTINEL_API_KEY=\"your-key\"\nexport DEEPSENTINEL_DEBUG_MODE=\"true\"\nexport DEEPSENTINEL_MAX_RISK_SCORE=\"0.7\"\n</code></pre>"},{"location":"concepts/overview/#3-configuration-files","title":"3. Configuration Files","text":"<pre><code>from deepsentinel import SentinelConfig\n\nconfig = SentinelConfig.from_file(\"deepsentinel.yaml\")\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"concepts/overview/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"concepts/overview/#latency-impact","title":"Latency Impact","text":"<ul> <li>Local Detection: &lt; 5ms for most requests</li> <li>Cloud Compliance: 50-200ms depending on content complexity</li> <li>Caching: Near-zero latency for repeated patterns</li> </ul>"},{"location":"concepts/overview/#throughput","title":"Throughput","text":"<ul> <li>Concurrent Requests: Handles thousands of concurrent requests</li> <li>Provider Limits: Respects and manages provider rate limits</li> <li>Connection Pooling: Efficient connection reuse</li> </ul>"},{"location":"concepts/overview/#memory-usage","title":"Memory Usage","text":"<ul> <li>Minimal Footprint: ~50MB base memory usage</li> <li>Efficient Caching: Configurable cache size limits</li> <li>Streaming Support: Constant memory usage for streaming responses</li> </ul>"},{"location":"concepts/overview/#error-handling","title":"Error Handling","text":"<p>DeepSentinel provides comprehensive error handling:</p> <pre><code>from deepsentinel import (\n    ComplianceViolationError,\n    ProviderError,\n    ConfigurationError\n)\n\ntry:\n    response = client.chat.completions.create(...)\nexcept ComplianceViolationError as e:\n    # Handle compliance violations\n    print(f\"Sensitive data detected: {e.violations}\")\nexcept ProviderError as e:\n    # Handle provider issues\n    print(f\"Provider error: {e.provider}, {e.message}\")\nexcept ConfigurationError as e:\n    # Handle configuration problems\n    print(f\"Configuration issue: {e.message}\")\n</code></pre>"},{"location":"concepts/overview/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>DeepSentinel provides rich monitoring capabilities:</p>"},{"location":"concepts/overview/#health-checks","title":"Health Checks","text":"<pre><code>health = await client.health_check()\nprint(f\"Status: {health['status']}\")\nprint(f\"Providers: {health['providers']}\")\n</code></pre>"},{"location":"concepts/overview/#metrics-collection","title":"Metrics Collection","text":"<pre><code>from deepsentinel import MetricsCollector\n\nmetrics = client.metrics_collector\nprint(f\"Total requests: {metrics.total_requests}\")\nprint(f\"Compliance violations: {metrics.compliance_violations}\")\nprint(f\"Average latency: {metrics.average_latency}ms\")\n</code></pre>"},{"location":"concepts/overview/#audit-events","title":"Audit Events","text":"<pre><code>from deepsentinel import AuditAPI\n\naudit = AuditAPI(client)\nevents = await audit.get_recent_events(limit=10)\nfor event in events:\n    print(f\"{event.timestamp}: {event.event_type} - {event.message}\")\n</code></pre>"},{"location":"concepts/overview/#next-steps","title":"Next Steps","text":"<p>Now that you understand how DeepSentinel works, dive deeper into specific concepts:</p> <ul> <li>Compliance &amp; Security - Learn about detection capabilities and policies</li> <li>Provider Integration - Understand how provider adapters work</li> <li>Configuration - Master the configuration system</li> </ul> <p>Next: Compliance &amp; Security \u2192</p>"},{"location":"concepts/providers/","title":"Provider Integration","text":"<p>DeepSentinel provides a unified interface for multiple LLM providers while maintaining compatibility with their native SDKs. This section explains how provider adapters work and how to configure multiple providers.</p>"},{"location":"concepts/providers/#provider-architecture","title":"Provider Architecture","text":"<pre><code>graph TB\n    A[SentinelClient] --&gt; B[Provider Registry]\n    B --&gt; C[OpenAI Adapter]\n    B --&gt; D[Anthropic Adapter]\n    B --&gt; E[Custom Adapter]\n\n    C --&gt; F[OpenAI API]\n    D --&gt; G[Anthropic API]\n    E --&gt; H[Custom Provider]\n\n    subgraph \"Adapter Features\"\n        I[Request Translation]\n        J[Response Normalization]\n        K[Error Handling]\n        L[Rate Limit Management]\n    end\n\n    C --&gt; I\n    D --&gt; I\n    E --&gt; I</code></pre>"},{"location":"concepts/providers/#supported-providers","title":"Supported Providers","text":""},{"location":"concepts/providers/#openai","title":"OpenAI","text":"<p>Full support for OpenAI's API with all model types:</p> <pre><code>from deepsentinel import SentinelClient\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\"\n)\n\n# Chat completions\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n)\n\n# Embeddings\nembeddings = client.embeddings.create(\n    model=\"text-embedding-ada-002\",\n    input=\"Text to embed\"\n)\n\n# Image generation\nimage = client.images.generate(\n    prompt=\"A sunset over mountains\",\n    model=\"dall-e-3\"\n)\n</code></pre>"},{"location":"concepts/providers/#anthropic","title":"Anthropic","text":"<p>Complete Claude model support:</p> <pre><code>client = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    anthropic_api_key=\"your-anthropic-key\"\n)\n\n# Use Claude with the same interface\nresponse = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"anthropic\"  # Specify provider\n)\n</code></pre>"},{"location":"concepts/providers/#multiple-providers","title":"Multiple Providers","text":"<p>Use multiple providers in the same application:</p> <pre><code>client = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    openai_api_key=\"your-openai-key\",\n    anthropic_api_key=\"your-anthropic-key\"\n)\n\n# Default provider (OpenAI)\nopenai_response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello from OpenAI!\"}]\n)\n\n# Explicit provider selection\nanthropic_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello from Anthropic!\"}],\n    provider=\"anthropic\"\n)\n</code></pre>"},{"location":"concepts/providers/#provider-adapters","title":"Provider Adapters","text":""},{"location":"concepts/providers/#how-adapters-work","title":"How Adapters Work","text":"<p>Each provider adapter handles the translation between DeepSentinel's unified interface and the provider's specific API:</p> <pre><code># DeepSentinel unified interface\nrequest = ChatRequest(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    temperature=0.7,\n    max_tokens=100\n)\n\n# OpenAI adapter translates to:\nopenai_request = {\n    \"model\": \"gpt-4o\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello!\"}],\n    \"temperature\": 0.7,\n    \"max_tokens\": 100\n}\n\n# Anthropic adapter translates to:\nanthropic_request = {\n    \"model\": \"claude-3-opus-20240229\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello!\"}],\n    \"temperature\": 0.7,\n    \"max_tokens\": 100\n}\n</code></pre>"},{"location":"concepts/providers/#custom-adapters","title":"Custom Adapters","text":"<p>Create your own adapter for unsupported providers:</p> <pre><code>from deepsentinel import BaseLLMProvider, ProviderAdapter\n\nclass CustomProvider(BaseLLMProvider):\n    \"\"\"Custom provider adapter.\"\"\"\n\n    def __init__(self, api_key: str, base_url: str = None):\n        self.api_key = api_key\n        self.base_url = base_url or \"https://api.custom-provider.com\"\n\n    async def chat_completion(self, request: ChatRequest, **kwargs) -&gt; ChatResponse:\n        \"\"\"Implement chat completion for your provider.\"\"\"\n        # Transform request to provider format\n        provider_request = self._transform_request(request)\n\n        # Make API call\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{self.base_url}/v1/chat/completions\",\n                headers={\"Authorization\": f\"Bearer {self.api_key}\"},\n                json=provider_request\n            )\n\n        # Transform response to DeepSentinel format\n        return self._transform_response(response.json())\n\n    def _transform_request(self, request: ChatRequest) -&gt; dict:\n        \"\"\"Transform DeepSentinel request to provider format.\"\"\"\n        return {\n            \"model\": request.model,\n            \"messages\": [msg.dict() for msg in request.messages],\n            \"temperature\": request.temperature,\n            # ... other transformations\n        }\n\n    def _transform_response(self, provider_response: dict) -&gt; ChatResponse:\n        \"\"\"Transform provider response to DeepSentinel format.\"\"\"\n        return ChatResponse(\n            id=provider_response[\"id\"],\n            choices=[\n                Choice(\n                    index=choice[\"index\"],\n                    message=Message(\n                        role=choice[\"message\"][\"role\"],\n                        content=choice[\"message\"][\"content\"]\n                    ),\n                    finish_reason=choice[\"finish_reason\"]\n                )\n                for choice in provider_response[\"choices\"]\n            ],\n            usage=Usage(\n                prompt_tokens=provider_response[\"usage\"][\"prompt_tokens\"],\n                completion_tokens=provider_response[\"usage\"][\"completion_tokens\"],\n                total_tokens=provider_response[\"usage\"][\"total_tokens\"]\n            )\n        )\n\n# Register the custom provider\nclient.provider_registry.register(\"custom\", CustomProvider(api_key=\"your-key\"))\n\n# Use the custom provider\nresponse = client.chat.completions.create(\n    model=\"custom-model\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"custom\"\n)\n</code></pre>"},{"location":"concepts/providers/#provider-configuration","title":"Provider Configuration","text":""},{"location":"concepts/providers/#basic-configuration","title":"Basic Configuration","text":"<pre><code>from deepsentinel import SentinelClient, ProviderConfig\n\n# Individual provider configs\nopenai_config = ProviderConfig(\n    name=\"openai\",\n    api_key=\"your-openai-key\",\n    base_url=\"https://api.openai.com/v1\",\n    timeout=30.0,\n    max_retries=3\n)\n\nanthropic_config = ProviderConfig(\n    name=\"anthropic\", \n    api_key=\"your-anthropic-key\",\n    base_url=\"https://api.anthropic.com\",\n    timeout=30.0,\n    max_retries=3\n)\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-key\",\n    provider_configs=[openai_config, anthropic_config]\n)\n</code></pre>"},{"location":"concepts/providers/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>from deepsentinel import SentinelConfig, ProviderConfig\n\nconfig = SentinelConfig(\n    sentinel_api_key=\"your-key\",\n    default_provider=\"openai\",\n    provider_configs=[\n        ProviderConfig(\n            name=\"openai\",\n            api_key=\"your-openai-key\",\n            timeout=30.0,\n            max_retries=3,\n            rate_limit={\n                \"requests_per_minute\": 3500,\n                \"tokens_per_minute\": 90000\n            },\n            model_aliases={\n                \"gpt-4-latest\": \"gpt-4o\",\n                \"gpt-3.5\": \"gpt-3.5-turbo\"\n            }\n        ),\n        ProviderConfig(\n            name=\"anthropic\",\n            api_key=\"your-anthropic-key\", \n            timeout=45.0,\n            max_retries=2,\n            rate_limit={\n                \"requests_per_minute\": 1000,\n                \"tokens_per_minute\": 40000\n            }\n        )\n    ]\n)\n\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"concepts/providers/#provider-selection-strategies","title":"Provider Selection Strategies","text":""},{"location":"concepts/providers/#manual-selection","title":"Manual Selection","text":"<p>Explicitly choose the provider for each request:</p> <pre><code># Use OpenAI\nopenai_response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"openai\"\n)\n\n# Use Anthropic\nanthropic_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\", \n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"anthropic\"\n)\n</code></pre>"},{"location":"concepts/providers/#automatic-provider-selection","title":"Automatic Provider Selection","text":"<p>Let DeepSentinel choose based on model availability:</p> <pre><code># DeepSentinel automatically selects the provider based on the model\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",  # Automatically routes to OpenAI\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n)\n\nresponse = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",  # Automatically routes to Anthropic\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n)\n</code></pre>"},{"location":"concepts/providers/#load-balancing","title":"Load Balancing","text":"<p>Distribute requests across multiple providers:</p> <pre><code>from deepsentinel import LoadBalancingStrategy\n\nconfig = SentinelConfig(\n    load_balancing=LoadBalancingStrategy(\n        strategy=\"round_robin\",  # or \"weighted\", \"least_latency\"\n        providers=[\"openai\", \"anthropic\"],\n        weights={\"openai\": 0.7, \"anthropic\": 0.3}  # For weighted strategy\n    )\n)\n</code></pre>"},{"location":"concepts/providers/#fallback-strategy","title":"Fallback Strategy","text":"<p>Automatically fallback to secondary providers:</p> <pre><code>config = SentinelConfig(\n    fallback_strategy={\n        \"primary\": \"openai\",\n        \"fallbacks\": [\"anthropic\", \"custom\"],\n        \"retry_attempts\": 2,\n        \"fallback_conditions\": [\"rate_limit\", \"timeout\", \"server_error\"]\n    }\n)\n</code></pre>"},{"location":"concepts/providers/#model-mapping","title":"Model Mapping","text":""},{"location":"concepts/providers/#cross-provider-model-mapping","title":"Cross-Provider Model Mapping","text":"<p>Map equivalent models across providers:</p> <pre><code>model_mapping = {\n    \"gpt-4\": {\n        \"openai\": \"gpt-4o\",\n        \"anthropic\": \"claude-3-opus-20240229\"\n    },\n    \"gpt-3.5\": {\n        \"openai\": \"gpt-3.5-turbo\",\n        \"anthropic\": \"claude-3-haiku-20240307\"\n    }\n}\n\n# Use the same model name, different providers\nresponse1 = client.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"openai\"  # Uses gpt-4o\n)\n\nresponse2 = client.chat.completions.create(\n    model=\"gpt-4\", \n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}],\n    provider=\"anthropic\"  # Uses claude-3-opus-20240229\n)\n</code></pre>"},{"location":"concepts/providers/#provider-specific-features","title":"Provider-Specific Features","text":""},{"location":"concepts/providers/#openai-specific-features","title":"OpenAI-Specific Features","text":"<pre><code># Function calling\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"What's the weather?\"}],\n    tools=[{\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Get weather information\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\"type\": \"string\"}\n                }\n            }\n        }\n    }],\n    tool_choice=\"auto\"\n)\n\n# Image generation\nimage = client.images.generate(\n    prompt=\"A futuristic city\",\n    model=\"dall-e-3\",\n    size=\"1024x1024\",\n    quality=\"hd\"\n)\n</code></pre>"},{"location":"concepts/providers/#anthropic-specific-features","title":"Anthropic-Specific Features","text":"<pre><code># System messages handling\nresponse = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ],\n    provider=\"anthropic\"\n)\n\n# Anthropic's max_tokens requirement\nresponse = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": \"Write a story\"}],\n    max_tokens=1000,  # Required for Anthropic\n    provider=\"anthropic\"\n)\n</code></pre>"},{"location":"concepts/providers/#error-handling","title":"Error Handling","text":""},{"location":"concepts/providers/#provider-specific-errors","title":"Provider-Specific Errors","text":"<pre><code>from deepsentinel import ProviderError, AuthenticationError, RateLimitError\n\ntry:\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n    )\nexcept AuthenticationError as e:\n    print(f\"Authentication failed for provider {e.provider}: {e.message}\")\nexcept RateLimitError as e:\n    print(f\"Rate limit exceeded for provider {e.provider}\")\n    print(f\"Retry after: {e.retry_after} seconds\")\nexcept ProviderError as e:\n    print(f\"Provider {e.provider} error: {e.message}\")\n</code></pre>"},{"location":"concepts/providers/#automatic-error-recovery","title":"Automatic Error Recovery","text":"<pre><code>config = SentinelConfig(\n    error_recovery={\n        \"auto_retry\": True,\n        \"max_retries\": 3,\n        \"backoff_strategy\": \"exponential\",\n        \"retry_on\": [\"timeout\", \"server_error\", \"rate_limit\"],\n        \"fallback_provider\": True\n    }\n)\n</code></pre>"},{"location":"concepts/providers/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"concepts/providers/#provider-performance-metrics","title":"Provider Performance Metrics","text":"<pre><code># Get performance metrics for each provider\nmetrics = client.metrics_collector.get_provider_metrics()\n\nfor provider_name, metrics in metrics.items():\n    print(f\"Provider: {provider_name}\")\n    print(f\"  Average latency: {metrics.avg_latency}ms\")\n    print(f\"  Success rate: {metrics.success_rate}%\")\n    print(f\"  Total requests: {metrics.total_requests}\")\n    print(f\"  Error rate: {metrics.error_rate}%\")\n</code></pre>"},{"location":"concepts/providers/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Check provider health\nhealth = await client.health_check()\n\nfor provider, status in health[\"providers\"].items():\n    print(f\"{provider}: {status['status']}\")\n    if status['status'] == 'unhealthy':\n        print(f\"  Error: {status['error']}\")\n        print(f\"  Last check: {status['last_check']}\")\n</code></pre>"},{"location":"concepts/providers/#best-practices","title":"Best Practices","text":""},{"location":"concepts/providers/#1-provider-diversity","title":"1. Provider Diversity","text":"<p>Use multiple providers for resilience:</p> <pre><code># Configure multiple providers for redundancy\nconfig = SentinelConfig(\n    provider_configs=[\n        ProviderConfig(name=\"openai\", api_key=\"...\"),\n        ProviderConfig(name=\"anthropic\", api_key=\"...\"),\n        ProviderConfig(name=\"custom\", api_key=\"...\")\n    ],\n    fallback_strategy={\"primary\": \"openai\", \"fallbacks\": [\"anthropic\", \"custom\"]}\n)\n</code></pre>"},{"location":"concepts/providers/#2-cost-optimization","title":"2. Cost Optimization","text":"<p>Choose providers based on cost and performance requirements:</p> <pre><code># Use cheaper providers for simple tasks\nsimple_tasks_config = {\n    \"model_routing\": {\n        \"simple_qa\": {\"provider\": \"openai\", \"model\": \"gpt-3.5-turbo\"},\n        \"complex_reasoning\": {\"provider\": \"anthropic\", \"model\": \"claude-3-opus\"},\n        \"code_generation\": {\"provider\": \"openai\", \"model\": \"gpt-4o\"}\n    }\n}\n</code></pre>"},{"location":"concepts/providers/#3-rate-limit-management","title":"3. Rate Limit Management","text":"<p>Respect provider rate limits:</p> <pre><code>config = SentinelConfig(\n    rate_limiting={\n        \"enabled\": True,\n        \"per_provider\": True,\n        \"buffer_percentage\": 0.1,  # Use 90% of limit\n        \"queue_requests\": True\n    }\n)\n</code></pre>"},{"location":"concepts/providers/#4-model-selection","title":"4. Model Selection","text":"<p>Choose appropriate models for different use cases:</p> <pre><code>model_selection = {\n    \"chat\": \"gpt-4o\",              # Best for conversations\n    \"code\": \"gpt-4o\",              # Best for coding\n    \"analysis\": \"claude-3-opus\",    # Best for analysis\n    \"creative\": \"claude-3-opus\",    # Best for creative tasks\n    \"embeddings\": \"text-embedding-ada-002\"  # For embeddings\n}\n</code></pre> <p>Next: Configuration \u2192</p>"},{"location":"developer/documentation-pipeline/","title":"Documentation Build Pipeline","text":"<p>This guide explains how to use and maintain the documentation build pipeline for the DeepSentinel Python SDK.</p>"},{"location":"developer/documentation-pipeline/#overview","title":"Overview","text":"<p>The documentation pipeline consists of:</p> <ol> <li>GitHub Actions Workflow - Automates building and deploying documentation</li> <li>Local Build Scripts - For development and testing</li> <li>MkDocs Configuration - Controls documentation structure and appearance</li> <li>Versioning System - Manages multiple documentation versions</li> </ol>"},{"location":"developer/documentation-pipeline/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>The documentation is automatically built and deployed using GitHub Actions. The workflow is defined in <code>.github/workflows/docs.yml</code> in the public repository.</p>"},{"location":"developer/documentation-pipeline/#when-it-runs","title":"When it runs:","text":"<ul> <li>On every push to the <code>main</code> branch (that changes documentation files)</li> <li>On pull requests targeting the <code>main</code> branch (to verify documentation builds correctly)</li> </ul>"},{"location":"developer/documentation-pipeline/#what-it-does","title":"What it does:","text":"<ol> <li>Sets up Python environment</li> <li>Installs dependencies</li> <li>Checks for broken links in documentation</li> <li>Builds documentation using MkDocs</li> <li>For <code>main</code> branch pushes, deploys to GitHub Pages</li> <li>For tagged releases, creates versioned documentation</li> </ol>"},{"location":"developer/documentation-pipeline/#maintenance-tasks","title":"Maintenance tasks:","text":"<ul> <li>If you add new Python dependencies for documentation, add them to the workflow file</li> <li>If you change the documentation structure, make sure the workflow's validation steps still pass</li> <li>Remember that this workflow runs in the public repository context after the git subtree push</li> </ul>"},{"location":"developer/documentation-pipeline/#local-documentation-development","title":"Local Documentation Development","text":"<p>For local development, use the enhanced <code>build-docs.py</code> script in the <code>python/scripts</code> directory.</p>"},{"location":"developer/documentation-pipeline/#basic-usage","title":"Basic usage:","text":"<pre><code># Build documentation\npython scripts/build-docs.py\n\n# Start development server\npython scripts/build-docs.py --serve\n\n# Start development server and open browser\npython scripts/build-docs.py --serve --open\n\n# Clean previous build and rebuild\npython scripts/build-docs.py --clean\n\n# Check for broken links\npython scripts/build-docs.py --check-links\n\n# Validate documentation structure\npython scripts/build-docs.py --validate\n\n# Deploy documentation to GitHub Pages (maintainers only)\npython scripts/build-docs.py --deploy --version 1.2.3\n</code></pre>"},{"location":"developer/documentation-pipeline/#script-features","title":"Script features:","text":"<ul> <li>Development server: Live preview with auto-reload</li> <li>Link checking: Validates all links are working</li> <li>Validation: Ensures documentation structure is correct</li> <li>Deployment: Direct deployment to GitHub Pages with versioning</li> </ul>"},{"location":"developer/documentation-pipeline/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>The documentation is built using MkDocs with the Material theme. Configuration is in <code>mkdocs.yml</code> (in the root of the public repository).</p>"},{"location":"developer/documentation-pipeline/#key-settings","title":"Key settings:","text":"<ul> <li>Theme configuration: Controls appearance and features</li> <li>Plugins: Extends MkDocs functionality (API reference generation, navigation)</li> <li>Markdown extensions: Adds features like admonitions, tabs, code highlighting</li> <li>Navigation: Defines the documentation structure in the sidebar</li> </ul>"},{"location":"developer/documentation-pipeline/#versioning","title":"Versioning:","text":"<p>Documentation versioning uses the <code>mike</code> tool which is configured in the <code>extra.version</code> section. When deploying:</p> <ul> <li>The latest release is always available as \"latest\"</li> <li>Development documentation is deployed as \"dev\"</li> <li>Each release version gets its own version selector entry</li> </ul>"},{"location":"developer/documentation-pipeline/#adding-new-documentation","title":"Adding New Documentation","text":"<ol> <li>Create new Markdown files in the appropriate directory under <code>docs/</code></li> <li>If creating a new section, add it to the navigation in <code>mkdocs.yml</code></li> <li>Run <code>python scripts/build-docs.py --serve</code> to preview changes</li> <li>Run <code>python scripts/build-docs.py --check-links</code> to verify links work</li> </ol>"},{"location":"developer/documentation-pipeline/#deploying-new-versions","title":"Deploying New Versions","text":"<p>When releasing a new version:</p> <ol> <li>Update version numbers in code</li> <li>Push changes to GitHub</li> <li>Create a new release tag</li> <li>The GitHub Actions workflow will automatically deploy the new version</li> </ol>"},{"location":"developer/documentation-pipeline/#manual-deployment","title":"Manual deployment:","text":"<pre><code>python scripts/build-docs.py --deploy --version X.Y.Z\n</code></pre>"},{"location":"developer/documentation-pipeline/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer/documentation-pipeline/#build-fails-with-missing-dependencies","title":"Build fails with missing dependencies:","text":"<pre><code>pip install -e \".[dev]\"\npip install mkdocs-material mkdocstrings[python] mkdocs-gen-files mkdocs-literate-nav mkdocs-section-index\n</code></pre>"},{"location":"developer/documentation-pipeline/#link-checking-fails","title":"Link checking fails:","text":"<ul> <li>Check for typos in URLs</li> <li>Ensure referenced files exist</li> <li>Verify anchor links (#section-ids) point to actual sections</li> </ul>"},{"location":"developer/documentation-pipeline/#deployment-issues","title":"Deployment issues:","text":"<ul> <li>Ensure you have proper GitHub permissions</li> <li>Check GitHub Actions logs for errors</li> <li>Verify GitHub Pages is enabled for the repository</li> </ul>"},{"location":"developer/documentation-pipeline/#public-repository-workflow","title":"Public Repository Workflow","text":"<p>The documentation pipeline is configured to work within the public repository after the git subtree push from the main development repository:</p> <ol> <li>Changes are made in the main repository under the <code>python/docs/</code> directory</li> <li>Changes are pushed to the public repository using git subtree:    <pre><code>git subtree push --prefix=python python-public main\n</code></pre></li> <li>This triggers the GitHub Actions workflow in the public repository</li> <li>Documentation is built and deployed to GitHub Pages</li> </ol> <p>Remember that paths in the public repository are different from the main repository: - <code>python/docs/</code> in the main repo becomes <code>docs/</code> in the public repo - <code>python/mkdocs.yml</code> in the main repo becomes <code>mkdocs.yml</code> in the public repo - <code>python/scripts/</code> in the main repo becomes <code>scripts/</code> in the public repo</p> <p>When editing documentation, always test locally before pushing to ensure everything works correctly in the public repository context.</p>"},{"location":"developer/versioned-docs-release/","title":"Versioned Documentation Release Guide","text":"<p>This guide explains how to manage and release versioned documentation for the DeepSentinel Python SDK.</p>"},{"location":"developer/versioned-docs-release/#overview","title":"Overview","text":"<p>The documentation system uses Mike to manage versioned documentation deployments to GitHub Pages. The workflow supports:</p> <ul> <li>Latest docs: Main branch docs are automatically deployed to <code>/latest</code></li> <li>Versioned docs: Tagged releases create versioned documentation at <code>/v{version}</code></li> <li>Default redirect: The <code>/latest</code> path serves as the default landing page</li> </ul>"},{"location":"developer/versioned-docs-release/#automatic-deployment","title":"Automatic Deployment","text":""},{"location":"developer/versioned-docs-release/#main-branch-latest","title":"Main Branch (Latest)","text":"<ul> <li>Trigger: Push to <code>main</code> branch with changes to <code>docs/</code> or <code>mkdocs.yml</code></li> <li>Deployment: Automatically deployed to <code>/latest</code></li> <li>URL: <code>https://deepsentinel-ai.github.io/deepsentinel-python/latest/</code></li> </ul>"},{"location":"developer/versioned-docs-release/#version-tags","title":"Version Tags","text":"<ul> <li>Trigger: Push a version tag (e.g., <code>v1.0.0</code>, <code>v1.2.3</code>)</li> <li>Deployment: Automatically deployed to <code>/v{version}</code> </li> <li>URL: <code>https://deepsentinel-ai.github.io/deepsentinel-python/v1.0.0/</code></li> </ul>"},{"location":"developer/versioned-docs-release/#manual-release-process","title":"Manual Release Process","text":""},{"location":"developer/versioned-docs-release/#1-prepare-for-release","title":"1. Prepare for Release","text":"<p>Ensure your documentation is ready: <pre><code>cd python/\n# Build and test locally\nmkdocs serve\n# Visit http://localhost:8000 to verify\n</code></pre></p>"},{"location":"developer/versioned-docs-release/#2-create-version-tag","title":"2. Create Version Tag","text":"<pre><code># Tag the release (replace X.Y.Z with actual version)\ngit tag -a vX.Y.Z -m \"Release version X.Y.Z\"\ngit push origin vX.Y.Z\n</code></pre>"},{"location":"developer/versioned-docs-release/#3-automatic-deployment","title":"3. Automatic Deployment","text":"<p>The GitHub Actions workflow will automatically: 1. Detect the version tag 2. Extract version number (e.g., <code>v1.0.0</code> \u2192 <code>1.0.0</code>) 3. Deploy docs to versioned path 4. Update the version list</p>"},{"location":"developer/versioned-docs-release/#4-manual-deployment-if-needed","title":"4. Manual Deployment (if needed)","text":"<p>If automatic deployment fails, you can deploy manually:</p> <pre><code># Install mike\npip install mike\n\n# Deploy specific version\nmike deploy --push --update-aliases 1.0.0\n\n# Set as default (optional)\nmike set-default --push 1.0.0\n\n# List all versions\nmike list\n</code></pre>"},{"location":"developer/versioned-docs-release/#version-management-commands","title":"Version Management Commands","text":""},{"location":"developer/versioned-docs-release/#list-available-versions","title":"List Available Versions","text":"<pre><code>mike list\n</code></pre>"},{"location":"developer/versioned-docs-release/#delete-a-version","title":"Delete a Version","text":"<pre><code>mike delete --push old-version\n</code></pre>"},{"location":"developer/versioned-docs-release/#set-default-version","title":"Set Default Version","text":"<pre><code>mike set-default --push 1.0.0\n</code></pre>"},{"location":"developer/versioned-docs-release/#deploy-with-alias","title":"Deploy with Alias","text":"<pre><code># Deploy version with alias\nmike deploy --push --update-aliases 1.0.0 stable\n</code></pre>"},{"location":"developer/versioned-docs-release/#url-structure","title":"URL Structure","text":"Branch/Tag URL Path Example <code>main</code> <code>/latest</code> <code>https://deepsentinel-ai.github.io/deepsentinel-python/latest/</code> <code>v1.0.0</code> <code>/v1.0.0</code> <code>https://deepsentinel-ai.github.io/deepsentinel-python/v1.0.0/</code> <code>v1.1.0</code> <code>/v1.1.0</code> <code>https://deepsentinel-ai.github.io/deepsentinel-python/v1.1.0/</code>"},{"location":"developer/versioned-docs-release/#best-practices","title":"Best Practices","text":""},{"location":"developer/versioned-docs-release/#1-version-naming","title":"1. Version Naming","text":"<ul> <li>Use semantic versioning: <code>vMAJOR.MINOR.PATCH</code></li> <li>Examples: <code>v1.0.0</code>, <code>v1.2.3</code>, <code>v2.0.0-beta.1</code></li> </ul>"},{"location":"developer/versioned-docs-release/#2-documentation-updates","title":"2. Documentation Updates","text":"<ul> <li>Update version-specific content before tagging</li> <li>Include version in changelog and release notes</li> <li>Test documentation locally before releasing</li> </ul>"},{"location":"developer/versioned-docs-release/#3-release-workflow","title":"3. Release Workflow","text":"<ol> <li>Complete development and testing</li> <li>Update documentation for the release</li> <li>Create and push version tag</li> <li>Verify automatic deployment</li> <li>Announce the release</li> </ol>"},{"location":"developer/versioned-docs-release/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developer/versioned-docs-release/#deployment-fails","title":"Deployment Fails","text":"<ol> <li>Check GitHub Actions logs</li> <li>Verify <code>mike</code> installation in workflow</li> <li>Ensure proper permissions are set</li> <li>Try manual deployment as fallback</li> </ol>"},{"location":"developer/versioned-docs-release/#version-not-showing","title":"Version Not Showing","text":"<ol> <li>Verify tag format matches <code>v*.*.*</code></li> <li>Check if workflow was triggered</li> <li>Confirm <code>mike list</code> shows the version</li> </ol>"},{"location":"developer/versioned-docs-release/#manual-cleanup","title":"Manual Cleanup","text":"<p>If you need to clean up the gh-pages branch: <pre><code># Checkout gh-pages branch\ngit checkout gh-pages\n\n# List versions\nmike list\n\n# Remove unwanted version\nmike delete unwanted-version --push\n</code></pre></p>"},{"location":"developer/versioned-docs-release/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>The workflow integrates with: - GitHub Actions: Automatic deployment on tag push - GitHub Pages: Hosting platform - MkDocs: Documentation generator - Mike: Version management</p>"},{"location":"developer/versioned-docs-release/#support","title":"Support","text":"<p>For issues with documentation deployment: 1. Check the GitHub Actions workflow logs 2. Verify your local MkDocs setup works: <code>mkdocs serve</code> 3. Test mike commands locally before pushing tags 4. Contact the development team for persistent issues</p>"},{"location":"guides/","title":"Guides","text":"<p>Comprehensive guides for getting the most out of DeepSentinel in production environments. These guides cover best practices, optimization strategies, and advanced usage patterns.</p>"},{"location":"guides/#production-guides","title":"Production Guides","text":""},{"location":"guides/#best-practices","title":"Best Practices","text":"<p>Learn the recommended patterns and practices for using DeepSentinel in production applications. Covers security, performance, error handling, and monitoring best practices.</p> <p>Topics covered: - Security and API key management - Configuration management across environments - Error handling and resilience patterns - Logging and monitoring strategies - Testing and validation approaches</p> <p>Time: 20 minutes</p>"},{"location":"guides/#performance-optimization","title":"Performance Optimization","text":"<p>Optimize DeepSentinel for high-throughput applications and minimize latency impact while maintaining compliance coverage.</p> <p>Topics covered: - Local vs cloud detection strategies - Caching optimization techniques - Request batching and connection pooling - Performance monitoring and tuning - Scalability considerations</p> <p>Time: 25 minutes</p>"},{"location":"guides/#migration-guide","title":"Migration Guide","text":"<p>Step-by-step guide for migrating existing applications from direct LLM provider SDKs to DeepSentinel with minimal disruption.</p> <p>Topics covered: - Migration planning and strategy - Gradual rollout techniques - Compatibility considerations - Testing migration success - Rollback procedures</p> <p>Time: 30 minutes</p>"},{"location":"guides/#advanced-topics","title":"Advanced Topics","text":""},{"location":"guides/#configuration-management","title":"Configuration Management","text":"<ul> <li>Environment-specific configurations</li> <li>Dynamic configuration updates</li> <li>Configuration validation and testing</li> <li>Secret management integration</li> </ul>"},{"location":"guides/#compliance-strategy","title":"Compliance Strategy","text":"<ul> <li>Regulatory compliance mapping</li> <li>Policy development and testing</li> <li>Audit preparation and documentation</li> <li>Risk assessment frameworks</li> </ul>"},{"location":"guides/#enterprise-integration","title":"Enterprise Integration","text":"<ul> <li>SSO and authentication integration</li> <li>Enterprise logging and monitoring</li> <li>Custom provider development</li> <li>API gateway integration</li> </ul>"},{"location":"guides/#guide-prerequisites","title":"Guide Prerequisites","text":"<p>These guides assume you have:</p> <ul> <li>Basic DeepSentinel knowledge - Complete the Quick Start first</li> <li>Production environment - Access to staging/production systems</li> <li>Monitoring tools - Basic understanding of application monitoring</li> <li>DevOps knowledge - Familiarity with CI/CD and deployment practices</li> </ul>"},{"location":"guides/#getting-help","title":"Getting Help","text":"<p>If you need assistance with any guide:</p> <ul> <li>Check the FAQ for common questions</li> <li>Review the API Reference for technical details</li> <li>Join our Discord community for discussions</li> <li>Contact enterprise support for production assistance</li> </ul> <p>Ready to optimize your DeepSentinel deployment? Start with Best Practices \u2192</p>"},{"location":"guides/best-practices/","title":"Best Practices Guide","text":"<p>This guide covers recommended patterns and practices for using DeepSentinel in production applications. Following these best practices will help you build secure, performant, and maintainable applications.</p>"},{"location":"guides/best-practices/#overview","title":"Overview","text":"<p>This guide covers: - Security and API key management - Configuration management across environments - Error handling and resilience patterns - Logging and monitoring strategies - Testing and validation approaches - Performance optimization techniques</p> <p>Time to read: 20 minutes</p>"},{"location":"guides/best-practices/#security-best-practices","title":"Security Best Practices","text":""},{"location":"guides/best-practices/#api-key-management","title":"API Key Management","text":"<p>\u2705 DO: Use Environment Variables <pre><code>import os\nfrom deepsentinel import SentinelClient\n\n# Good: Load from environment variables\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    anthropic_api_key=os.getenv(\"ANTHROPIC_API_KEY\")\n)\n</code></pre></p> <p>\u274c DON'T: Hardcode API Keys <pre><code># Bad: Never hardcode API keys\nclient = SentinelClient(\n    sentinel_api_key=\"sk-deepsentinel-abc123...\",  # DON'T DO THIS\n    openai_api_key=\"sk-abc123...\"  # DON'T DO THIS\n)\n</code></pre></p> <p>\u2705 DO: Use Secret Management Services <pre><code>import boto3\nfrom deepsentinel import SentinelClient\n\ndef get_secret(secret_name, region_name=\"us-east-1\"):\n    \"\"\"Retrieve secret from AWS Secrets Manager.\"\"\"\n    session = boto3.session.Session()\n    client = session.client(\n        service_name='secretsmanager',\n        region_name=region_name\n    )\n\n    response = client.get_secret_value(SecretId=secret_name)\n    return json.loads(response['SecretString'])\n\n# Load secrets from AWS Secrets Manager\nsecrets = get_secret(\"deepsentinel/api-keys\")\n\nclient = SentinelClient(\n    sentinel_api_key=secrets[\"sentinel_api_key\"],\n    openai_api_key=secrets[\"openai_api_key\"]\n)\n</code></pre></p>"},{"location":"guides/best-practices/#input-sanitization","title":"Input Sanitization","text":"<p>\u2705 DO: Validate Input Before Processing <pre><code>import re\nfrom typing import List, Dict\n\ndef validate_user_input(message: str) -&gt; tuple[bool, str]:\n    \"\"\"\n    Validate user input before sending to LLM.\n\n    Returns:\n        (is_valid, error_message)\n    \"\"\"\n    # Check length\n    if len(message) &gt; 10000:\n        return False, \"Message too long (max 10,000 characters)\"\n\n    # Check for obvious injection attempts\n    suspicious_patterns = [\n        r'&lt;script.*?&gt;',\n        r'javascript:',\n        r'eval\\s*\\(',\n        r'exec\\s*\\('\n    ]\n\n    for pattern in suspicious_patterns:\n        if re.search(pattern, message, re.IGNORECASE):\n            return False, \"Message contains potentially harmful content\"\n\n    return True, \"\"\n\ndef safe_chat(client, user_message: str, **kwargs):\n    \"\"\"Make a chat request with input validation.\"\"\"\n    # Validate input\n    is_valid, error_msg = validate_user_input(user_message)\n    if not is_valid:\n        return {\"success\": False, \"error\": error_msg}\n\n    # Proceed with request\n    try:\n        response = client.chat.completions.create(\n            messages=[{\"role\": \"user\", \"content\": user_message}],\n            **kwargs\n        )\n        return {\"success\": True, \"content\": response.choices[0].message.content}\n    except Exception as e:\n        return {\"success\": False, \"error\": str(e)}\n</code></pre></p>"},{"location":"guides/best-practices/#compliance-policy-management","title":"Compliance Policy Management","text":"<p>\u2705 DO: Use Environment-Specific Policies <pre><code>from deepsentinel import CompliancePolicy, SentinelConfig\n\ndef create_compliance_policies(environment: str) -&gt; List[CompliancePolicy]:\n    \"\"\"Create policies based on deployment environment.\"\"\"\n\n    if environment == \"production\":\n        # Strict policies for production\n        return [\n            CompliancePolicy(\n                name=\"prod-policy\",\n                enable_pii_detection=True,\n                enable_phi_detection=True,\n                enable_pci_detection=True,\n                max_risk_score=0.6,  # Strict threshold\n                block_on_violation=True,\n                log_violations=True,\n                anonymize_audit_logs=True\n            )\n        ]\n\n    elif environment == \"staging\":\n        # Moderate policies for staging\n        return [\n            CompliancePolicy(\n                name=\"staging-policy\",\n                enable_pii_detection=True,\n                enable_phi_detection=True,\n                max_risk_score=0.8,\n                block_on_violation=False,  # Allow for testing\n                anonymize_sensitive_data=True,\n                log_violations=True\n            )\n        ]\n\n    else:  # development\n        # Lenient policies for development\n        return [\n            CompliancePolicy(\n                name=\"dev-policy\",\n                enable_pii_detection=True,\n                max_risk_score=0.9,\n                block_on_violation=False,\n                log_violations=False  # Reduce noise in dev\n            )\n        ]\n\n# Usage\nenvironment = os.getenv(\"ENVIRONMENT\", \"development\")\npolicies = create_compliance_policies(environment)\n\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=policies\n)\n</code></pre></p>"},{"location":"guides/best-practices/#configuration-management","title":"Configuration Management","text":""},{"location":"guides/best-practices/#environment-based-configuration","title":"Environment-Based Configuration","text":"<p>\u2705 DO: Use Configuration Classes <pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nimport os\n\n@dataclass\nclass DeepSentinelConfig:\n    \"\"\"Configuration for DeepSentinel client.\"\"\"\n\n    # API Keys\n    sentinel_api_key: str\n    openai_api_key: Optional[str] = None\n    anthropic_api_key: Optional[str] = None\n\n    # Environment settings\n    environment: str = \"development\"\n    debug_mode: bool = False\n\n    # Compliance settings\n    compliance_enabled: bool = True\n    max_risk_score: float = 0.8\n\n    # Performance settings\n    timeout: float = 30.0\n    max_retries: int = 3\n\n    # Logging settings\n    log_level: str = \"INFO\"\n    log_file: Optional[str] = None\n\n    @classmethod\n    def from_environment(cls) -&gt; 'DeepSentinelConfig':\n        \"\"\"Create configuration from environment variables.\"\"\"\n        return cls(\n            sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\", \"\"),\n            openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n            anthropic_api_key=os.getenv(\"ANTHROPIC_API_KEY\"),\n            environment=os.getenv(\"ENVIRONMENT\", \"development\"),\n            debug_mode=os.getenv(\"DEBUG\", \"false\").lower() == \"true\",\n            compliance_enabled=os.getenv(\"COMPLIANCE_ENABLED\", \"true\").lower() == \"true\",\n            max_risk_score=float(os.getenv(\"MAX_RISK_SCORE\", \"0.8\")),\n            timeout=float(os.getenv(\"REQUEST_TIMEOUT\", \"30.0\")),\n            max_retries=int(os.getenv(\"MAX_RETRIES\", \"3\")),\n            log_level=os.getenv(\"LOG_LEVEL\", \"INFO\"),\n            log_file=os.getenv(\"LOG_FILE\")\n        )\n\n# Usage\nconfig = DeepSentinelConfig.from_environment()\n\n# Validate required fields\nif not config.sentinel_api_key:\n    raise ValueError(\"DEEPSENTINEL_API_KEY environment variable is required\")\n\n# Create client with configuration\nclient = SentinelClient(\n    sentinel_api_key=config.sentinel_api_key,\n    openai_api_key=config.openai_api_key,\n    anthropic_api_key=config.anthropic_api_key,\n    debug_mode=config.debug_mode\n)\n</code></pre></p>"},{"location":"guides/best-practices/#configuration-validation","title":"Configuration Validation","text":"<p>\u2705 DO: Validate Configuration on Startup <pre><code>def validate_configuration(config: DeepSentinelConfig) -&gt; List[str]:\n    \"\"\"Validate configuration and return list of errors.\"\"\"\n    errors = []\n\n    # Required fields\n    if not config.sentinel_api_key:\n        errors.append(\"DeepSentinel API key is required\")\n\n    if not config.openai_api_key and not config.anthropic_api_key:\n        errors.append(\"At least one LLM provider API key is required\")\n\n    # Value ranges\n    if not 0.0 &lt;= config.max_risk_score &lt;= 1.0:\n        errors.append(\"max_risk_score must be between 0.0 and 1.0\")\n\n    if config.timeout &lt;= 0:\n        errors.append(\"timeout must be positive\")\n\n    if config.max_retries &lt; 0:\n        errors.append(\"max_retries must be non-negative\")\n\n    # Environment-specific validation\n    if config.environment == \"production\":\n        if config.debug_mode:\n            errors.append(\"debug_mode should be disabled in production\")\n\n        if config.max_risk_score &gt; 0.8:\n            errors.append(\"max_risk_score should be stricter in production\")\n\n    return errors\n\n# Validate configuration\nconfig = DeepSentinelConfig.from_environment()\nvalidation_errors = validate_configuration(config)\n\nif validation_errors:\n    print(\"Configuration errors:\")\n    for error in validation_errors:\n        print(f\"  - {error}\")\n    sys.exit(1)\n</code></pre></p>"},{"location":"guides/best-practices/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"guides/best-practices/#comprehensive-error-handling","title":"Comprehensive Error Handling","text":"<p>\u2705 DO: Handle All Error Types <pre><code>from deepsentinel import (\n    ComplianceViolationError,\n    ProviderError,\n    AuthenticationError,\n    RateLimitError,\n    NetworkError\n)\nimport logging\nimport time\n\nlogger = logging.getLogger(__name__)\n\ndef robust_completion(client, messages, max_retries=3, **kwargs):\n    \"\"\"Make completion with comprehensive error handling.\"\"\"\n\n    for attempt in range(max_retries + 1):\n        try:\n            response = client.chat.completions.create(\n                messages=messages,\n                **kwargs\n            )\n            return {\n                \"success\": True,\n                \"content\": response.choices[0].message.content,\n                \"model\": response.model,\n                \"tokens\": response.usage.total_tokens\n            }\n\n        except ComplianceViolationError as e:\n            # Don't retry compliance violations\n            logger.warning(f\"Compliance violation: {e.message}\")\n            return {\n                \"success\": False,\n                \"error_type\": \"compliance\",\n                \"message\": e.message,\n                \"violations\": [v.type for v in e.violations],\n                \"retryable\": False\n            }\n\n        except AuthenticationError as e:\n            # Don't retry authentication errors\n            logger.error(f\"Authentication error: {e.message}\")\n            return {\n                \"success\": False,\n                \"error_type\": \"authentication\",\n                \"message\": e.message,\n                \"retryable\": False\n            }\n\n        except RateLimitError as e:\n            # Retry rate limit errors with backoff\n            if attempt &lt; max_retries:\n                wait_time = e.retry_after or (2 ** attempt)\n                logger.info(f\"Rate limited, waiting {wait_time}s before retry {attempt + 1}\")\n                time.sleep(wait_time)\n                continue\n\n            return {\n                \"success\": False,\n                \"error_type\": \"rate_limit\",\n                \"message\": e.message,\n                \"retryable\": True\n            }\n\n        except (ProviderError, NetworkError) as e:\n            # Retry provider and network errors\n            if attempt &lt; max_retries:\n                wait_time = 2 ** attempt  # Exponential backoff\n                logger.info(f\"Provider/network error, retrying in {wait_time}s\")\n                time.sleep(wait_time)\n                continue\n\n            return {\n                \"success\": False,\n                \"error_type\": \"provider\" if isinstance(e, ProviderError) else \"network\",\n                \"message\": str(e),\n                \"retryable\": True\n            }\n\n        except Exception as e:\n            # Unexpected errors\n            logger.error(f\"Unexpected error: {str(e)}\")\n            return {\n                \"success\": False,\n                \"error_type\": \"unexpected\",\n                \"message\": str(e),\n                \"retryable\": False\n            }\n\n    return {\n        \"success\": False,\n        \"error_type\": \"max_retries_exceeded\",\n        \"message\": f\"Failed after {max_retries} retries\",\n        \"retryable\": False\n    }\n</code></pre></p>"},{"location":"guides/best-practices/#graceful-degradation","title":"Graceful Degradation","text":"<p>\u2705 DO: Provide Fallbacks <pre><code>def chat_with_fallback(client, user_message: str, **kwargs):\n    \"\"\"Chat with graceful fallback options.\"\"\"\n\n    # Primary attempt\n    result = robust_completion(\n        client, \n        [{\"role\": \"user\", \"content\": user_message}], \n        **kwargs\n    )\n\n    if result[\"success\"]:\n        return result\n\n    # Fallback 1: Try with different provider\n    if \"provider\" in kwargs:\n        fallback_providers = {\"openai\": \"anthropic\", \"anthropic\": \"openai\"}\n        fallback_provider = fallback_providers.get(kwargs[\"provider\"])\n\n        if fallback_provider:\n            logger.info(f\"Trying fallback provider: {fallback_provider}\")\n            kwargs[\"provider\"] = fallback_provider\n\n            fallback_result = robust_completion(\n                client,\n                [{\"role\": \"user\", \"content\": user_message}],\n                **kwargs\n            )\n\n            if fallback_result[\"success\"]:\n                fallback_result[\"used_fallback\"] = True\n                return fallback_result\n\n    # Fallback 2: Return helpful error message\n    if result[\"error_type\"] == \"compliance\":\n        return {\n            \"success\": False,\n            \"fallback_message\": \"I can't process that request because it contains sensitive information. Please try rephrasing without personal details.\",\n            \"original_error\": result\n        }\n\n    elif result[\"error_type\"] == \"rate_limit\":\n        return {\n            \"success\": False,\n            \"fallback_message\": \"I'm currently experiencing high demand. Please try again in a few moments.\",\n            \"original_error\": result\n        }\n\n    else:\n        return {\n            \"success\": False,\n            \"fallback_message\": \"I'm having trouble processing your request right now. Please try again later.\",\n            \"original_error\": result\n        }\n</code></pre></p>"},{"location":"guides/best-practices/#logging-and-monitoring","title":"Logging and Monitoring","text":""},{"location":"guides/best-practices/#structured-logging","title":"Structured Logging","text":"<p>\u2705 DO: Use Structured Logging <pre><code>import logging\nimport json\nfrom datetime import datetime\nfrom typing import Dict, Any\n\nclass StructuredLogger:\n    \"\"\"Structured logger for DeepSentinel applications.\"\"\"\n\n    def __init__(self, name: str, level: str = \"INFO\"):\n        self.logger = logging.getLogger(name)\n        self.logger.setLevel(getattr(logging, level.upper()))\n\n        # Create formatter for structured logs\n        formatter = logging.Formatter(\n            '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        )\n\n        # Console handler\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        self.logger.addHandler(console_handler)\n\n        # File handler (optional)\n        if os.getenv(\"LOG_FILE\"):\n            file_handler = logging.FileHandler(os.getenv(\"LOG_FILE\"))\n            file_handler.setFormatter(formatter)\n            self.logger.addHandler(file_handler)\n\n    def log_request(self, event_type: str, data: Dict[str, Any], level: str = \"info\"):\n        \"\"\"Log structured request data.\"\"\"\n        log_entry = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"event_type\": event_type,\n            \"data\": data\n        }\n\n        getattr(self.logger, level)(json.dumps(log_entry))\n\n    def log_completion(self, messages: list, response: dict, duration: float):\n        \"\"\"Log completion request and response.\"\"\"\n        self.log_request(\"completion\", {\n            \"message_count\": len(messages),\n            \"model\": response.get(\"model\"),\n            \"tokens\": response.get(\"tokens\", 0),\n            \"duration_ms\": int(duration * 1000),\n            \"success\": response.get(\"success\", False)\n        })\n\n    def log_error(self, error_type: str, error_message: str, context: Dict = None):\n        \"\"\"Log error with context.\"\"\"\n        self.log_request(\"error\", {\n            \"error_type\": error_type,\n            \"error_message\": error_message,\n            \"context\": context or {}\n        }, level=\"error\")\n\n# Usage\nlogger = StructuredLogger(\"deepsentinel_app\")\n\ndef logged_completion(client, messages, **kwargs):\n    \"\"\"Make completion with structured logging.\"\"\"\n    start_time = time.time()\n\n    try:\n        response = client.chat.completions.create(messages=messages, **kwargs)\n        duration = time.time() - start_time\n\n        result = {\n            \"success\": True,\n            \"content\": response.choices[0].message.content,\n            \"model\": response.model,\n            \"tokens\": response.usage.total_tokens\n        }\n\n        logger.log_completion(messages, result, duration)\n        return result\n\n    except Exception as e:\n        duration = time.time() - start_time\n\n        logger.log_error(\n            error_type=type(e).__name__,\n            error_message=str(e),\n            context={\n                \"message_count\": len(messages),\n                \"duration_ms\": int(duration * 1000),\n                \"kwargs\": kwargs\n            }\n        )\n        raise\n</code></pre></p>"},{"location":"guides/best-practices/#metrics-collection","title":"Metrics Collection","text":"<p>\u2705 DO: Collect Key Metrics <pre><code>from collections import defaultdict, Counter\nfrom datetime import datetime, timedelta\nimport threading\n\nclass MetricsCollector:\n    \"\"\"Collect and track application metrics.\"\"\"\n\n    def __init__(self):\n        self.metrics = defaultdict(int)\n        self.timings = defaultdict(list)\n        self.errors = Counter()\n        self.lock = threading.Lock()\n\n    def record_request(self, duration: float, success: bool, model: str = None):\n        \"\"\"Record request metrics.\"\"\"\n        with self.lock:\n            self.metrics[\"total_requests\"] += 1\n            if success:\n                self.metrics[\"successful_requests\"] += 1\n            else:\n                self.metrics[\"failed_requests\"] += 1\n\n            self.timings[\"request_duration\"].append(duration)\n\n            if model:\n                self.metrics[f\"requests_{model}\"] += 1\n\n    def record_error(self, error_type: str):\n        \"\"\"Record error metrics.\"\"\"\n        with self.lock:\n            self.errors[error_type] += 1\n\n    def record_tokens(self, token_count: int, model: str = None):\n        \"\"\"Record token usage.\"\"\"\n        with self.lock:\n            self.metrics[\"total_tokens\"] += token_count\n            if model:\n                self.metrics[f\"tokens_{model}\"] += token_count\n\n    def get_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Get metrics summary.\"\"\"\n        with self.lock:\n            total_requests = self.metrics[\"total_requests\"]\n            if total_requests == 0:\n                return {\"message\": \"No requests recorded\"}\n\n            durations = self.timings[\"request_duration\"]\n            avg_duration = sum(durations) / len(durations) if durations else 0\n\n            return {\n                \"total_requests\": total_requests,\n                \"successful_requests\": self.metrics[\"successful_requests\"],\n                \"failed_requests\": self.metrics[\"failed_requests\"],\n                \"success_rate\": (self.metrics[\"successful_requests\"] / total_requests) * 100,\n                \"average_duration_ms\": int(avg_duration * 1000),\n                \"total_tokens\": self.metrics[\"total_tokens\"],\n                \"error_breakdown\": dict(self.errors),\n                \"requests_per_model\": {\n                    k.replace(\"requests_\", \"\"): v \n                    for k, v in self.metrics.items() \n                    if k.startswith(\"requests_\") and k != \"requests\"\n                }\n            }\n\n# Global metrics collector\nmetrics = MetricsCollector()\n\ndef instrumented_completion(client, messages, **kwargs):\n    \"\"\"Make completion with metrics collection.\"\"\"\n    start_time = time.time()\n\n    try:\n        response = client.chat.completions.create(messages=messages, **kwargs)\n        duration = time.time() - start_time\n\n        metrics.record_request(duration, True, response.model)\n        metrics.record_tokens(response.usage.total_tokens, response.model)\n\n        return {\n            \"success\": True,\n            \"content\": response.choices[0].message.content,\n            \"model\": response.model,\n            \"tokens\": response.usage.total_tokens\n        }\n\n    except Exception as e:\n        duration = time.time() - start_time\n        metrics.record_request(duration, False)\n        metrics.record_error(type(e).__name__)\n        raise\n</code></pre></p>"},{"location":"guides/best-practices/#testing-strategies","title":"Testing Strategies","text":""},{"location":"guides/best-practices/#unit-testing","title":"Unit Testing","text":"<p>\u2705 DO: Test Your Integration Code <pre><code>import unittest\nfrom unittest.mock import Mock, patch\nfrom deepsentinel import ComplianceViolationError\n\nclass TestDeepSentinelIntegration(unittest.TestCase):\n    \"\"\"Test DeepSentinel integration.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.mock_client = Mock()\n        self.test_messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n\n    def test_successful_completion(self):\n        \"\"\"Test successful completion.\"\"\"\n        # Mock successful response\n        mock_response = Mock()\n        mock_response.choices = [Mock()]\n        mock_response.choices[0].message.content = \"Hello there!\"\n        mock_response.model = \"gpt-4o\"\n        mock_response.usage.total_tokens = 10\n\n        self.mock_client.chat.completions.create.return_value = mock_response\n\n        # Test\n        result = safe_completion(self.mock_client, self.test_messages)\n\n        # Assertions\n        self.assertTrue(result[\"success\"])\n        self.assertEqual(result[\"content\"], \"Hello there!\")\n        self.assertEqual(result[\"model\"], \"gpt-4o\")\n        self.assertEqual(result[\"tokens\"], 10)\n\n    def test_compliance_violation(self):\n        \"\"\"Test compliance violation handling.\"\"\"\n        # Mock compliance violation\n        violation = Mock()\n        violation.type = \"ssn\"\n\n        error = ComplianceViolationError(\n            message=\"SSN detected\",\n            violations=[violation],\n            risk_score=0.9\n        )\n\n        self.mock_client.chat.completions.create.side_effect = error\n\n        # Test\n        result = safe_completion(self.mock_client, self.test_messages)\n\n        # Assertions\n        self.assertFalse(result[\"success\"])\n        self.assertEqual(result[\"error_type\"], \"compliance_violation\")\n        self.assertEqual(result[\"violations\"], [\"ssn\"])\n        self.assertEqual(result[\"risk_score\"], 0.9)\n\n    @patch('time.sleep')  # Mock sleep to speed up tests\n    def test_retry_logic(self, mock_sleep):\n        \"\"\"Test retry logic for recoverable errors.\"\"\"\n        # Mock rate limit error then success\n        rate_limit_error = RateLimitError(\n            message=\"Rate limited\",\n            retry_after=1\n        )\n\n        mock_response = Mock()\n        mock_response.choices = [Mock()]\n        mock_response.choices[0].message.content = \"Success!\"\n\n        self.mock_client.chat.completions.create.side_effect = [\n            rate_limit_error,  # First call fails\n            mock_response      # Second call succeeds\n        ]\n\n        # Test\n        result = robust_completion(self.mock_client, self.test_messages, max_retries=1)\n\n        # Assertions\n        self.assertTrue(result[\"success\"])\n        self.assertEqual(self.mock_client.chat.completions.create.call_count, 2)\n        mock_sleep.assert_called_once()\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre></p>"},{"location":"guides/best-practices/#integration-testing","title":"Integration Testing","text":"<p>\u2705 DO: Test with Real API (Sparingly) <pre><code>import pytest\nimport os\nfrom deepsentinel import SentinelClient\n\n@pytest.mark.integration\nclass TestDeepSentinelIntegration:\n    \"\"\"Integration tests for DeepSentinel.\"\"\"\n\n    @pytest.fixture\n    def client(self):\n        \"\"\"Create client for testing.\"\"\"\n        api_key = os.getenv(\"DEEPSENTINEL_API_KEY\")\n        openai_key = os.getenv(\"OPENAI_API_KEY\")\n\n        if not api_key or not openai_key:\n            pytest.skip(\"API keys not available\")\n\n        return SentinelClient(\n            sentinel_api_key=api_key,\n            openai_api_key=openai_key\n        )\n\n    def test_basic_completion(self, client):\n        \"\"\"Test basic completion works.\"\"\"\n        response = client.chat.completions.create(\n            model=\"gpt-3.5-turbo\",  # Use cheaper model for testing\n            messages=[{\"role\": \"user\", \"content\": \"Say 'test successful'\"}],\n            max_tokens=10\n        )\n\n        assert response.choices[0].message.content\n        assert \"test\" in response.choices[0].message.content.lower()\n\n    def test_compliance_detection(self, client):\n        \"\"\"Test that compliance detection works.\"\"\"\n        with pytest.raises(ComplianceViolationError):\n            client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789\"}]\n            )\n\n# Run with: pytest test_integration.py -m integration\n</code></pre></p>"},{"location":"guides/best-practices/#performance-optimization","title":"Performance Optimization","text":""},{"location":"guides/best-practices/#connection-pooling","title":"Connection Pooling","text":"<p>\u2705 DO: Configure Connection Pooling <pre><code>from deepsentinel import SentinelClient, SentinelConfig, PerformanceConfig\n\n# Configure performance settings\nperf_config = PerformanceConfig(\n    connection_pool_size=20,        # Total connections\n    connection_pool_per_host=5,     # Per provider\n    connect_timeout=5.0,            # Connection timeout\n    read_timeout=30.0,              # Read timeout\n    keep_alive=True,                # Keep connections alive\n    connection_pool_ttl=300         # Pool TTL in seconds\n)\n\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    performance_config=perf_config\n)\n\nclient = SentinelClient(config=config)\n</code></pre></p>"},{"location":"guides/best-practices/#caching-strategies","title":"Caching Strategies","text":"<p>\u2705 DO: Implement Response Caching <pre><code>import hashlib\nimport json\nfrom typing import Optional, Dict, Any\nfrom datetime import datetime, timedelta\n\nclass ResponseCache:\n    \"\"\"Simple in-memory response cache.\"\"\"\n\n    def __init__(self, ttl_minutes: int = 60, max_size: int = 1000):\n        self.cache = {}\n        self.ttl = timedelta(minutes=ttl_minutes)\n        self.max_size = max_size\n\n    def _generate_key(self, messages: list, model: str, **kwargs) -&gt; str:\n        \"\"\"Generate cache key from request parameters.\"\"\"\n        cache_data = {\n            \"messages\": messages,\n            \"model\": model,\n            **{k: v for k, v in kwargs.items() if k in [\"temperature\", \"max_tokens\"]}\n        }\n\n        cache_str = json.dumps(cache_data, sort_keys=True)\n        return hashlib.sha256(cache_str.encode()).hexdigest()[:16]\n\n    def get(self, messages: list, model: str, **kwargs) -&gt; Optional[Dict]:\n        \"\"\"Get cached response if available and not expired.\"\"\"\n        key = self._generate_key(messages, model, **kwargs)\n\n        if key in self.cache:\n            entry = self.cache[key]\n            if datetime.now() &lt; entry[\"expires\"]:\n                return entry[\"response\"]\n            else:\n                del self.cache[key]  # Remove expired entry\n\n        return None\n\n    def set(self, messages: list, model: str, response: Dict, **kwargs):\n        \"\"\"Cache response.\"\"\"\n        if len(self.cache) &gt;= self.max_size:\n            # Remove oldest entry\n            oldest_key = min(self.cache.keys(), key=lambda k: self.cache[k][\"created\"])\n            del self.cache[oldest_key]\n\n        key = self._generate_key(messages, model, **kwargs)\n        self.cache[key] = {\n            \"response\": response,\n            \"created\": datetime.now(),\n            \"expires\": datetime.now() + self.ttl\n        }\n\n# Global cache instance\nresponse_cache = ResponseCache(ttl_minutes=30, max_size=500)\n\ndef cached_completion(client, messages, **kwargs):\n    \"\"\"Make completion with response caching.\"\"\"\n    model = kwargs.get(\"model\", \"gpt-4o\")\n\n    # Check cache first\n    cached_response = response_cache.get(messages, model, **kwargs)\n    if cached_response:\n        cached_response[\"from_cache\"] = True\n        return cached_response\n\n    # Make request\n    result = robust_completion(client, messages, **kwargs)\n\n    # Cache successful responses\n    if result[\"success\"]:\n        response_cache.set(messages, model, result, **kwargs)\n\n    return result\n</code></pre></p>"},{"location":"guides/best-practices/#production-deployment","title":"Production Deployment","text":""},{"location":"guides/best-practices/#health-checks","title":"Health Checks","text":"<p>\u2705 DO: Implement Health Checks <pre><code>from datetime import datetime, timedelta\nimport asyncio\n\nclass HealthChecker:\n    \"\"\"Health check implementation for DeepSentinel apps.\"\"\"\n\n    def __init__(self, client: SentinelClient):\n        self.client = client\n        self.last_check = None\n        self.last_status = None\n        self.check_interval = timedelta(minutes=5)\n\n    async def check_health(self) -&gt; Dict[str, Any]:\n        \"\"\"Perform comprehensive health check.\"\"\"\n        health_status = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"status\": \"healthy\",\n            \"checks\": {}\n        }\n\n        # Check 1: API connectivity\n        try:\n            test_response = self.client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": \"health check\"}],\n                max_tokens=1\n            )\n            health_status[\"checks\"][\"api_connectivity\"] = {\n                \"status\": \"pass\",\n                \"response_time_ms\": 100  # You'd measure this\n            }\n        except Exception as e:\n            health_status[\"checks\"][\"api_connectivity\"] = {\n                \"status\": \"fail\",\n                \"error\": str(e)\n            }\n            health_status[\"status\"] = \"unhealthy\"\n\n        # Check 2: Compliance engine\n        try:\n            # Test compliance detection with known violation\n            self.client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": \"SSN: 123-45-6789\"}],\n                max_tokens=1\n            )\n            # If we get here, compliance didn't catch it - that's bad\n            health_status[\"checks\"][\"compliance\"] = {\n                \"status\": \"fail\",\n                \"error\": \"Compliance detection not working\"\n            }\n            health_status[\"status\"] = \"unhealthy\"\n        except ComplianceViolationError:\n            # Good - compliance caught the violation\n            health_status[\"checks\"][\"compliance\"] = {\n                \"status\": \"pass\"\n            }\n        except Exception as e:\n            health_status[\"checks\"][\"compliance\"] = {\n                \"status\": \"fail\",\n                \"error\": str(e)\n            }\n            health_status[\"status\"] = \"unhealthy\"\n\n        self.last_check = datetime.utcnow()\n        self.last_status = health_status\n        return health_status\n\n    def get_cached_status(self) -&gt; Dict[str, Any]:\n        \"\"\"Get cached health status if recent enough.\"\"\"\n        if (self.last_check and self.last_status and \n            datetime.utcnow() - self.last_check &lt; self.check_interval):\n            return self.last_status\n\n        # Return stale status with warning\n        if self.last_status:\n            stale_status = self.last_status.copy()\n            stale_status[\"warning\"] = \"Health check data is stale\"\n            return stale_status\n\n        return {\"status\": \"unknown\", \"error\": \"No health check data available\"}\n\n# Usage in web framework (e.g., FastAPI)\nfrom fastapi import FastAPI\n\napp = FastAPI()\nhealth_checker = HealthChecker(client)\n\n@app.get(\"/health\")\nasync def health_endpoint():\n    \"\"\"Health check endpoint.\"\"\"\n    return await health_checker.check_health()\n\n@app.get(\"/health/quick\")\nasync def quick_health_endpoint():\n    \"\"\"Quick health check using cached data.\"\"\"\n    return health_checker.get_cached_status()\n</code></pre></p>"},{"location":"guides/best-practices/#monitoring-integration","title":"Monitoring Integration","text":"<p>\u2705 DO: Integrate with Monitoring Systems <pre><code>import requests\nimport json\nfrom datetime import datetime\n\nclass MonitoringIntegration:\n    \"\"\"Integration with external monitoring systems.\"\"\"\n\n    def __init__(self, webhook_url: str = None, service_name: str = \"deepsentinel-app\"):\n        self.webhook_url = webhook_url\n        self.service_name = service_name\n\n    def send_metrics(self, metrics: Dict[str, Any]):\n        \"\"\"Send metrics to monitoring system.\"\"\"\n        if not self.webhook_url:\n            return\n\n        payload = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"service\": self.service_name,\n            \"metrics\": metrics\n        }\n\n        try:\n            response = requests.post(\n                self.webhook_url,\n                json=payload,\n                timeout=5\n            )\n            response.raise_for_status()\n        except Exception as e:\n            logger.error(f\"Failed to send metrics: {e}\")\n\n    def send_alert(self, alert_type: str, message: str, severity: str = \"warning\"):\n        \"\"\"Send alert to monitoring system.\"\"\"\n        if not self.webhook_url:\n            return\n\n        payload = {\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"service\": self.service_name,\n            \"alert_type\": alert_type,\n            \"message\": message,\n            \"severity\": severity\n        }\n\n        try:\n            response = requests.post(\n                f\"{self.webhook_url}/alerts\",\n                json=payload,\n                timeout=5\n            )\n            response.raise_for_status()\n        except Exception as e:\n            logger.error(f\"Failed to send alert: {e}\")\n\n# Usage\nmonitoring = MonitoringIntegration(\n    webhook_url=os.getenv(\"MONITORING_WEBHOOK_URL\"),\n    service_name=\"my-deepsentinel-app\"\n)\n\n# Send periodic metrics\ndef send_periodic_metrics():\n    \"\"\"Send metrics to monitoring system.\"\"\"\n    summary = metrics.get_summary()\n    monitoring.send_metrics(summary)\n\n    # Send alerts for concerning metrics\n    if summary.get(\"success_rate\", 100) &lt; 95:\n        monitoring.send_alert(\n            \"low_success_rate\",\n            f\"Success rate dropped to {summary['success_rate']:.1f}%\",\n            \"warning\"\n        )\n\n# Schedule periodic metrics sending\nimport threading\nimport time\n\ndef metrics_sender():\n    \"\"\"Background thread to send metrics.\"\"\"\n    while True:\n        try:\n            send_periodic_metrics()\n        except Exception as e:\n            logger.error(f\"Error sending metrics: {e}\")\n        time.sleep(300)  # Send every 5 minutes\n\n# Start metrics sender in background\nmetrics_thread = threading.Thread(target=metrics_sender, daemon=True)\nmetrics_thread.start()\n</code></pre></p>"},{"location":"guides/best-practices/#summary-checklist","title":"Summary Checklist","text":""},{"location":"guides/best-practices/#security","title":"Security \u2705","text":"<ul> <li> API keys stored in environment variables or secret management</li> <li> Input validation implemented</li> <li> Environment-specific compliance policies</li> <li> Audit logging enabled for production</li> </ul>"},{"location":"guides/best-practices/#configuration","title":"Configuration \u2705","text":"<ul> <li> Configuration classes for different environments</li> <li> Configuration validation on startup</li> <li> Secrets properly managed</li> <li> Debug mode disabled in production</li> </ul>"},{"location":"guides/best-practices/#error-handling","title":"Error Handling \u2705","text":"<ul> <li> All error types handled appropriately</li> <li> Retry logic with exponential backoff</li> <li> Graceful degradation and fallbacks</li> <li> Circuit breaker for external dependencies</li> </ul>"},{"location":"guides/best-practices/#monitoring","title":"Monitoring \u2705","text":"<ul> <li> Structured logging implemented</li> <li> Key metrics collected and tracked</li> <li> Health checks configured</li> <li> Alerting set up for critical issues</li> </ul>"},{"location":"guides/best-practices/#testing","title":"Testing \u2705","text":"<ul> <li> Unit tests for integration code</li> <li> Integration tests (run sparingly)</li> <li> Mock external dependencies</li> <li> Test error scenarios</li> </ul>"},{"location":"guides/best-practices/#performance","title":"Performance \u2705","text":"<ul> <li> Connection pooling configured</li> <li> Response caching where appropriate</li> <li> Timeout values optimized</li> <li> Resource cleanup implemented</li> </ul>"},{"location":"guides/best-practices/#production","title":"Production \u2705","text":"<ul> <li> Health check endpoints</li> <li> Monitoring integration</li> <li> Deployment automation</li> <li> Documentation updated</li> </ul> <p>Following these best practices will help ensure your DeepSentinel integration is secure, reliable, and maintainable in production environments.</p> <p>Next Guide: Performance Optimization \u2192</p>"},{"location":"guides/migration/","title":"Migration Guide","text":"<p>This guide provides step-by-step instructions for migrating existing applications from direct LLM provider SDKs to DeepSentinel, and upgrading between DeepSentinel versions with minimal disruption.</p>"},{"location":"guides/migration/#overview","title":"Overview","text":"<p>This guide covers: - Migration planning and strategy - Gradual rollout techniques - Compatibility considerations - Testing migration success - Rollback procedures - Version-specific upgrade paths</p> <p>Time to read: 30 minutes</p>"},{"location":"guides/migration/#migration-planning","title":"Migration Planning","text":""},{"location":"guides/migration/#pre-migration-assessment","title":"Pre-Migration Assessment","text":"<p>Before starting your migration, assess your current setup:</p> <p>Current LLM Usage Audit <pre><code># Create an audit script to understand your current usage\nimport re\nimport ast\nimport os\nfrom typing import Dict, List, Set\n\nclass LLMUsageAuditor:\n    \"\"\"Audit existing codebase for LLM provider usage.\"\"\"\n\n    def __init__(self, project_root: str):\n        self.project_root = project_root\n        self.findings = {\n            'openai_calls': [],\n            'anthropic_calls': [],\n            'api_key_locations': [],\n            'model_references': set(),\n            'streaming_usage': [],\n            'function_calling': []\n        }\n\n    def audit_codebase(self) -&gt; Dict:\n        \"\"\"Perform comprehensive audit of LLM usage.\"\"\"\n        print(\"\ud83d\udd0d Auditing codebase for LLM usage...\")\n\n        for root, dirs, files in os.walk(self.project_root):\n            # Skip common non-code directories\n            dirs[:] = [d for d in dirs if d not in ['.git', '__pycache__', 'node_modules', '.venv']]\n\n            for file in files:\n                if file.endswith(('.py', '.js', '.ts')):\n                    file_path = os.path.join(root, file)\n                    self._audit_file(file_path)\n\n        return self._generate_report()\n\n    def _audit_file(self, file_path: str):\n        \"\"\"Audit individual file for LLM usage.\"\"\"\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n\n            # Check for OpenAI usage\n            if 'import openai' in content or 'from openai' in content:\n                self.findings['openai_calls'].append({\n                    'file': file_path,\n                    'import_type': 'openai'\n                })\n\n            # Check for Anthropic usage\n            if 'import anthropic' in content or 'from anthropic' in content:\n                self.findings['anthropic_calls'].append({\n                    'file': file_path,\n                    'import_type': 'anthropic'\n                })\n\n            # Find API key references\n            api_key_patterns = [\n                r'sk-[a-zA-Z0-9]{48}',  # OpenAI keys\n                r'sk-ant-[a-zA-Z0-9-]{95}',  # Anthropic keys\n                r'OPENAI_API_KEY',\n                r'ANTHROPIC_API_KEY'\n            ]\n\n            for pattern in api_key_patterns:\n                matches = re.findall(pattern, content)\n                if matches:\n                    self.findings['api_key_locations'].append({\n                        'file': file_path,\n                        'pattern': pattern,\n                        'matches': len(matches)\n                    })\n\n            # Find model references\n            model_patterns = [\n                r'gpt-[0-9]\\.[0-9]',\n                r'gpt-[0-9]o?',\n                r'claude-[0-9]',\n                r'text-davinci',\n                r'text-embedding'\n            ]\n\n            for pattern in model_patterns:\n                matches = re.findall(pattern, content, re.IGNORECASE)\n                self.findings['model_references'].update(matches)\n\n            # Check for streaming usage\n            if 'stream=True' in content or 'stream: true' in content:\n                self.findings['streaming_usage'].append(file_path)\n\n            # Check for function calling\n            if 'functions=' in content or 'tools=' in content:\n                self.findings['function_calling'].append(file_path)\n\n        except Exception as e:\n            print(f\"Error auditing {file_path}: {e}\")\n\n    def _generate_report(self) -&gt; Dict:\n        \"\"\"Generate migration planning report.\"\"\"\n        total_files_with_llm = (\n            len(self.findings['openai_calls']) + \n            len(self.findings['anthropic_calls'])\n        )\n\n        return {\n            'summary': {\n                'total_files_with_llm_usage': total_files_with_llm,\n                'openai_files': len(self.findings['openai_calls']),\n                'anthropic_files': len(self.findings['anthropic_calls']),\n                'unique_models_used': len(self.findings['model_references']),\n                'files_with_streaming': len(self.findings['streaming_usage']),\n                'files_with_function_calling': len(self.findings['function_calling']),\n                'api_key_references': len(self.findings['api_key_locations'])\n            },\n            'models_used': list(self.findings['model_references']),\n            'migration_complexity': self._assess_complexity(),\n            'recommendations': self._generate_recommendations(),\n            'detailed_findings': self.findings\n        }\n\n    def _assess_complexity(self) -&gt; str:\n        \"\"\"Assess migration complexity.\"\"\"\n        complexity_score = 0\n\n        # Base complexity\n        complexity_score += len(self.findings['openai_calls']) + len(self.findings['anthropic_calls'])\n\n        # Add complexity for advanced features\n        complexity_score += len(self.findings['streaming_usage']) * 2\n        complexity_score += len(self.findings['function_calling']) * 3\n        complexity_score += len(self.findings['model_references']) * 0.5\n\n        if complexity_score &lt; 5:\n            return \"LOW - Simple migration, few integration points\"\n        elif complexity_score &lt; 15:\n            return \"MEDIUM - Moderate migration, some advanced features\"\n        else:\n            return \"HIGH - Complex migration, extensive LLM usage\"\n\n    def _generate_recommendations(self) -&gt; List[str]:\n        \"\"\"Generate migration recommendations.\"\"\"\n        recommendations = []\n\n        if len(self.findings['openai_calls']) &gt; 0:\n            recommendations.append(\"Plan OpenAI to DeepSentinel migration for chat completions\")\n\n        if len(self.findings['anthropic_calls']) &gt; 0:\n            recommendations.append(\"Plan Anthropic to DeepSentinel migration\")\n\n        if len(self.findings['streaming_usage']) &gt; 0:\n            recommendations.append(\"Test streaming functionality thoroughly during migration\")\n\n        if len(self.findings['function_calling']) &gt; 0:\n            recommendations.append(\"Verify function calling compatibility with DeepSentinel\")\n\n        if len(self.findings['api_key_locations']) &gt; 3:\n            recommendations.append(\"Consolidate API key management using environment variables\")\n\n        return recommendations\n\n# Usage\nauditor = LLMUsageAuditor(\"/path/to/your/project\")\nreport = auditor.audit_codebase()\n\nprint(\"\\n\ud83d\udcca Migration Assessment Report\")\nprint(\"=\" * 50)\nprint(f\"Files with LLM usage: {report['summary']['total_files_with_llm_usage']}\")\nprint(f\"Migration complexity: {report['migration_complexity']}\")\nprint(f\"Models in use: {', '.join(report['models_used'])}\")\nprint(\"\\n\ud83d\udca1 Recommendations:\")\nfor rec in report['recommendations']:\n    print(f\"  \u2022 {rec}\")\n</code></pre></p>"},{"location":"guides/migration/#migration-strategy-options","title":"Migration Strategy Options","text":"<p>Option 1: Big Bang Migration (Fastest) - Replace all LLM calls at once - Best for small applications - Higher risk but faster deployment</p> <p>Option 2: Gradual Migration (Recommended) - Migrate components incrementally - Test each component before proceeding - Lower risk, easier rollback</p> <p>Option 3: Parallel Running (Safest) - Run both systems simultaneously - Gradually shift traffic to DeepSentinel - Compare results before full cutover</p>"},{"location":"guides/migration/#gradual-migration-approach","title":"Gradual Migration Approach","text":""},{"location":"guides/migration/#phase-1-foundation-setup","title":"Phase 1: Foundation Setup","text":"<p>Step 1: Install DeepSentinel <pre><code># Install alongside existing dependencies\npip install deepsentinel-sdk\n\n# Or add to requirements.txt\necho \"deepsentinel-sdk&gt;=1.0.0\" &gt;&gt; requirements.txt\npip install -r requirements.txt\n</code></pre></p> <p>Step 2: Configuration Management <pre><code># Create a migration-friendly configuration system\nimport os\nfrom typing import Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass MigrationConfig:\n    \"\"\"Configuration for gradual migration.\"\"\"\n\n    # Feature flags for migration\n    use_deepsentinel: bool = False\n    deepsentinel_percentage: float = 0.0  # 0-100% of traffic\n    fallback_to_original: bool = True\n\n    # API keys\n    deepsentinel_api_key: Optional[str] = None\n    openai_api_key: Optional[str] = None\n    anthropic_api_key: Optional[str] = None\n\n    # Migration settings\n    enable_comparison_mode: bool = False  # Compare responses\n    log_migration_events: bool = True\n\n    @classmethod\n    def from_environment(cls) -&gt; 'MigrationConfig':\n        \"\"\"Load configuration from environment variables.\"\"\"\n        return cls(\n            use_deepsentinel=os.getenv(\"USE_DEEPSENTINEL\", \"false\").lower() == \"true\",\n            deepsentinel_percentage=float(os.getenv(\"DEEPSENTINEL_PERCENTAGE\", \"0\")),\n            fallback_to_original=os.getenv(\"FALLBACK_TO_ORIGINAL\", \"true\").lower() == \"true\",\n            deepsentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n            openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n            anthropic_api_key=os.getenv(\"ANTHROPIC_API_KEY\"),\n            enable_comparison_mode=os.getenv(\"ENABLE_COMPARISON_MODE\", \"false\").lower() == \"true\",\n            log_migration_events=os.getenv(\"LOG_MIGRATION_EVENTS\", \"true\").lower() == \"true\"\n        )\n\n# Global configuration\nmigration_config = MigrationConfig.from_environment()\n</code></pre></p> <p>Step 3: Create Migration Wrapper <pre><code>import random\nimport logging\nimport time\nfrom typing import Dict, Any, List, Optional\nfrom deepsentinel import SentinelClient\nimport openai  # Keep existing import\n\nlogger = logging.getLogger(__name__)\n\nclass MigrationClient:\n    \"\"\"Wrapper client for gradual migration to DeepSentinel.\"\"\"\n\n    def __init__(self, config: MigrationConfig):\n        self.config = config\n\n        # Initialize DeepSentinel client if enabled\n        if config.use_deepsentinel and config.deepsentinel_api_key:\n            self.deepsentinel_client = SentinelClient(\n                sentinel_api_key=config.deepsentinel_api_key,\n                openai_api_key=config.openai_api_key,\n                anthropic_api_key=config.anthropic_api_key\n            )\n        else:\n            self.deepsentinel_client = None\n\n        # Keep original client\n        if config.openai_api_key:\n            self.openai_client = openai.OpenAI(api_key=config.openai_api_key)\n        else:\n            self.openai_client = None\n\n    def chat_completions_create(self, **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Create chat completion with migration logic.\"\"\"\n        start_time = time.time()\n\n        # Determine which client to use\n        use_deepsentinel = self._should_use_deepsentinel()\n\n        try:\n            if use_deepsentinel and self.deepsentinel_client:\n                logger.info(\"Using DeepSentinel for request\")\n                response = self._deepsentinel_request(**kwargs)\n\n                # Optional: Compare with original in comparison mode\n                if self.config.enable_comparison_mode:\n                    self._compare_responses(kwargs, response)\n\n                return self._format_response(response, \"deepsentinel\")\n\n            else:\n                logger.info(\"Using original OpenAI client for request\")\n                return self._original_request(**kwargs)\n\n        except Exception as e:\n            logger.error(f\"Error with primary client: {e}\")\n\n            # Fallback logic\n            if use_deepsentinel and self.config.fallback_to_original:\n                logger.info(\"Falling back to original client\")\n                try:\n                    return self._original_request(**kwargs)\n                except Exception as fallback_error:\n                    logger.error(f\"Fallback also failed: {fallback_error}\")\n                    raise\n            else:\n                raise\n\n    def _should_use_deepsentinel(self) -&gt; bool:\n        \"\"\"Determine if DeepSentinel should be used for this request.\"\"\"\n        if not self.config.use_deepsentinel or not self.deepsentinel_client:\n            return False\n\n        # Use percentage-based rollout\n        return random.random() * 100 &lt; self.config.deepsentinel_percentage\n\n    def _deepsentinel_request(self, **kwargs) -&gt; Any:\n        \"\"\"Make request using DeepSentinel.\"\"\"\n        return self.deepsentinel_client.chat.completions.create(**kwargs)\n\n    def _original_request(self, **kwargs) -&gt; Dict[str, Any]:\n        \"\"\"Make request using original OpenAI client.\"\"\"\n        response = self.openai_client.chat.completions.create(**kwargs)\n        return self._format_response(response, \"openai\")\n\n    def _format_response(self, response: Any, client_type: str) -&gt; Dict[str, Any]:\n        \"\"\"Format response with metadata.\"\"\"\n        if client_type == \"deepsentinel\":\n            return {\n                \"response\": response,\n                \"client_used\": \"deepsentinel\",\n                \"compliance_checked\": True,\n                \"content\": response.choices[0].message.content,\n                \"model\": response.model,\n                \"usage\": response.usage\n            }\n        else:\n            return {\n                \"response\": response,\n                \"client_used\": \"openai\",\n                \"compliance_checked\": False,\n                \"content\": response.choices[0].message.content,\n                \"model\": response.model,\n                \"usage\": response.usage\n            }\n\n    def _compare_responses(self, request_kwargs: Dict, deepsentinel_response: Any):\n        \"\"\"Compare DeepSentinel response with original (for testing).\"\"\"\n        try:\n            original_response = self.openai_client.chat.completions.create(**request_kwargs)\n\n            # Log comparison for analysis\n            logger.info(\"Response comparison\", extra={\n                \"deepsentinel_content\": deepsentinel_response.choices[0].message.content[:100],\n                \"original_content\": original_response.choices[0].message.content[:100],\n                \"deepsentinel_tokens\": deepsentinel_response.usage.total_tokens,\n                \"original_tokens\": original_response.usage.total_tokens\n            })\n\n        except Exception as e:\n            logger.error(f\"Error in response comparison: {e}\")\n\n# Global migration client\nmigration_client = MigrationClient(migration_config)\n</code></pre></p>"},{"location":"guides/migration/#phase-2-incremental-migration","title":"Phase 2: Incremental Migration","text":"<p>Step 1: Start with Non-Critical Components <pre><code># Example: Migrate a simple chat function first\ndef chat_with_migration(user_message: str) -&gt; str:\n    \"\"\"Chat function with migration support.\"\"\"\n\n    try:\n        result = migration_client.chat_completions_create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": user_message}],\n            max_tokens=150\n        )\n\n        # Log migration metrics\n        if migration_config.log_migration_events:\n            logger.info(\"Migration event\", extra={\n                \"client_used\": result[\"client_used\"],\n                \"compliance_checked\": result[\"compliance_checked\"],\n                \"success\": True\n            })\n\n        return result[\"content\"]\n\n    except Exception as e:\n        logger.error(f\"Chat request failed: {e}\")\n        raise\n\n# Usage remains the same\nresponse = chat_with_migration(\"Hello, how are you?\")\n</code></pre></p> <p>Step 2: Gradual Traffic Increase <pre><code># Environment configuration for gradual rollout\n# Week 1: 5% traffic\n# export DEEPSENTINEL_PERCENTAGE=5\n\n# Week 2: 15% traffic  \n# export DEEPSENTINEL_PERCENTAGE=15\n\n# Week 3: 35% traffic\n# export DEEPSENTINEL_PERCENTAGE=35\n\n# Week 4: 60% traffic\n# export DEEPSENTINEL_PERCENTAGE=60\n\n# Week 5: 85% traffic\n# export DEEPSENTINEL_PERCENTAGE=85\n\n# Week 6: 100% traffic\n# export DEEPSENTINEL_PERCENTAGE=100\n</code></pre></p> <p>Step 3: Monitor and Validate <pre><code>import json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict\n\nclass MigrationMonitor:\n    \"\"\"Monitor migration progress and health.\"\"\"\n\n    def __init__(self):\n        self.metrics = defaultdict(int)\n        self.errors = []\n        self.response_times = []\n\n    def record_request(self, client_used: str, success: bool, \n                      response_time: float, error: str = None):\n        \"\"\"Record migration request metrics.\"\"\"\n\n        self.metrics[f\"{client_used}_requests\"] += 1\n\n        if success:\n            self.metrics[f\"{client_used}_success\"] += 1\n            self.response_times.append({\n                \"client\": client_used,\n                \"time\": response_time,\n                \"timestamp\": datetime.now()\n            })\n        else:\n            self.metrics[f\"{client_used}_errors\"] += 1\n            if error:\n                self.errors.append({\n                    \"client\": client_used,\n                    \"error\": error,\n                    \"timestamp\": datetime.now()\n                })\n\n    def get_migration_health(self) -&gt; Dict[str, Any]:\n        \"\"\"Get migration health report.\"\"\"\n\n        total_deepsentinel = self.metrics[\"deepsentinel_requests\"]\n        total_openai = self.metrics[\"openai_requests\"]\n        total_requests = total_deepsentinel + total_openai\n\n        if total_requests == 0:\n            return {\"status\": \"no_data\"}\n\n        # Calculate success rates\n        deepsentinel_success_rate = (\n            self.metrics[\"deepsentinel_success\"] / max(total_deepsentinel, 1) * 100\n        )\n        openai_success_rate = (\n            self.metrics[\"openai_success\"] / max(total_openai, 1) * 100\n        )\n\n        # Calculate average response times\n        recent_time = datetime.now() - timedelta(hours=1)\n        recent_times = [r for r in self.response_times if r[\"timestamp\"] &gt; recent_time]\n\n        deepsentinel_times = [r[\"time\"] for r in recent_times if r[\"client\"] == \"deepsentinel\"]\n        openai_times = [r[\"time\"] for r in recent_times if r[\"client\"] == \"openai\"]\n\n        return {\n            \"status\": \"healthy\" if deepsentinel_success_rate &gt; 95 else \"warning\",\n            \"traffic_split\": {\n                \"deepsentinel_percentage\": total_deepsentinel / total_requests * 100,\n                \"openai_percentage\": total_openai / total_requests * 100\n            },\n            \"success_rates\": {\n                \"deepsentinel\": deepsentinel_success_rate,\n                \"openai\": openai_success_rate\n            },\n            \"average_response_times\": {\n                \"deepsentinel_ms\": sum(deepsentinel_times) / len(deepsentinel_times) * 1000 if deepsentinel_times else 0,\n                \"openai_ms\": sum(openai_times) / len(openai_times) * 1000 if openai_times else 0\n            },\n            \"recent_errors\": len([e for e in self.errors if e[\"timestamp\"] &gt; recent_time]),\n            \"recommendations\": self._get_recommendations(deepsentinel_success_rate, openai_success_rate)\n        }\n\n    def _get_recommendations(self, ds_success: float, openai_success: float) -&gt; List[str]:\n        \"\"\"Get recommendations based on metrics.\"\"\"\n        recommendations = []\n\n        if ds_success &lt; 90:\n            recommendations.append(\"DeepSentinel success rate is low - investigate errors\")\n\n        if ds_success &lt; openai_success - 5:\n            recommendations.append(\"DeepSentinel performing worse than OpenAI - consider rollback\")\n\n        if ds_success &gt; 95 and len(self.response_times) &gt; 100:\n            recommendations.append(\"Migration looking healthy - consider increasing traffic\")\n\n        return recommendations\n\n# Global monitor\nmigration_monitor = MigrationMonitor()\n</code></pre></p>"},{"location":"guides/migration/#phase-3-advanced-feature-migration","title":"Phase 3: Advanced Feature Migration","text":"<p>Streaming Migration <pre><code>class StreamingMigrationClient:\n    \"\"\"Handle streaming migration specially.\"\"\"\n\n    def __init__(self, migration_client: MigrationClient):\n        self.migration_client = migration_client\n\n    def create_stream(self, **kwargs):\n        \"\"\"Create streaming completion with migration support.\"\"\"\n        kwargs['stream'] = True\n\n        # For streaming, be more conservative about DeepSentinel usage\n        if (self.migration_client.config.use_deepsentinel and \n            random.random() * 100 &lt; self.migration_client.config.deepsentinel_percentage * 0.7):  # 70% of regular percentage\n\n            try:\n                return self.migration_client.deepsentinel_client.chat.completions.create(**kwargs)\n            except Exception as e:\n                logger.warning(f\"DeepSentinel streaming failed, falling back: {e}\")\n                if self.migration_client.config.fallback_to_original:\n                    return self.migration_client.openai_client.chat.completions.create(**kwargs)\n                raise\n        else:\n            return self.migration_client.openai_client.chat.completions.create(**kwargs)\n\n# Usage\nstreaming_client = StreamingMigrationClient(migration_client)\n\ndef stream_chat_with_migration(messages: List[Dict]) -&gt; str:\n    \"\"\"Streaming chat with migration support.\"\"\"\n\n    stream = streaming_client.create_stream(\n        model=\"gpt-4o\",\n        messages=messages\n    )\n\n    response_content = \"\"\n    for chunk in stream:\n        if chunk.choices[0].delta.content is not None:\n            content = chunk.choices[0].delta.content\n            print(content, end=\"\", flush=True)\n            response_content += content\n\n    return response_content\n</code></pre></p> <p>Function Calling Migration <pre><code>def migrate_function_calling():\n    \"\"\"Example of migrating function calling.\"\"\"\n\n    # Define functions (same for both clients)\n    functions = [\n        {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": \"get_weather\",\n                \"description\": \"Get weather information\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": {\"type\": \"string\"}\n                    }\n                }\n            }\n        }\n    ]\n\n    # Migration-aware function calling\n    result = migration_client.chat_completions_create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"What's the weather in New York?\"}],\n        tools=functions,\n        tool_choice=\"auto\"\n    )\n\n    # Handle response (same regardless of client used)\n    if result[\"response\"].choices[0].message.tool_calls:\n        # Process function calls\n        for tool_call in result[\"response\"].choices[0].message.tool_calls:\n            if tool_call.function.name == \"get_weather\":\n                # Execute function\n                pass\n\n    return result[\"content\"]\n</code></pre></p>"},{"location":"guides/migration/#version-specific-migration","title":"Version-Specific Migration","text":""},{"location":"guides/migration/#upgrading-from-v0x-to-v1x","title":"Upgrading from v0.x to v1.x","text":"<p>Breaking Changes in v1.x <pre><code># OLD (v0.x) - Deprecated\nfrom deepsentinel import DeepSentinel  # Old class name\n\nclient = DeepSentinel(api_key=\"...\")  # Old constructor\nresponse = client.complete(prompt=\"...\")  # Old method name\n\n# NEW (v1.x) - Current\nfrom deepsentinel import SentinelClient  # New class name\n\nclient = SentinelClient(\n    sentinel_api_key=\"...\",  # Renamed parameter\n    openai_api_key=\"...\"     # Explicit provider keys\n)\nresponse = client.chat.completions.create(  # OpenAI-compatible interface\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"...\"}]\n)\n</code></pre></p> <p>Migration Script for v0.x to v1.x <pre><code>import re\nimport os\nfrom typing import List\n\nclass V0ToV1Migrator:\n    \"\"\"Automate migration from v0.x to v1.x.\"\"\"\n\n    def __init__(self, project_root: str):\n        self.project_root = project_root\n        self.changes_made = []\n\n    def migrate_project(self):\n        \"\"\"Migrate entire project from v0.x to v1.x.\"\"\"\n\n        print(\"\ud83d\udd04 Starting migration from v0.x to v1.x...\")\n\n        for root, dirs, files in os.walk(self.project_root):\n            for file in files:\n                if file.endswith('.py'):\n                    file_path = os.path.join(root, file)\n                    self._migrate_file(file_path)\n\n        print(f\"\u2705 Migration completed. {len(self.changes_made)} files modified.\")\n        return self.changes_made\n\n    def _migrate_file(self, file_path: str):\n        \"\"\"Migrate individual Python file.\"\"\"\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n\n            original_content = content\n\n            # Apply migration transformations\n            content = self._update_imports(content)\n            content = self._update_class_usage(content)\n            content = self._update_method_calls(content)\n            content = self._update_constructor_calls(content)\n\n            # Write back if changed\n            if content != original_content:\n                with open(file_path, 'w', encoding='utf-8') as f:\n                    f.write(content)\n\n                self.changes_made.append(file_path)\n                print(f\"\ud83d\udcdd Migrated: {file_path}\")\n\n        except Exception as e:\n            print(f\"\u274c Error migrating {file_path}: {e}\")\n\n    def _update_imports(self, content: str) -&gt; str:\n        \"\"\"Update import statements.\"\"\"\n        # Replace old import\n        content = re.sub(\n            r'from deepsentinel import DeepSentinel',\n            'from deepsentinel import SentinelClient',\n            content\n        )\n\n        return content\n\n    def _update_class_usage(self, content: str) -&gt; str:\n        \"\"\"Update class instantiation.\"\"\"\n        # Replace class name\n        content = re.sub(\n            r'\\bDeepSentinel\\(',\n            'SentinelClient(',\n            content\n        )\n\n        return content\n\n    def _update_constructor_calls(self, content: str) -&gt; str:\n        \"\"\"Update constructor parameter names.\"\"\"\n        # Update api_key parameter\n        content = re.sub(\n            r'SentinelClient\\(\\s*api_key\\s*=',\n            'SentinelClient(sentinel_api_key=',\n            content\n        )\n\n        return content\n\n    def _update_method_calls(self, content: str) -&gt; str:\n        \"\"\"Update method calls.\"\"\"\n        # Replace .complete() with .chat.completions.create()\n        content = re.sub(\n            r'\\.complete\\(\\s*prompt\\s*=\\s*([^,)]+)',\n            r'.chat.completions.create(model=\"gpt-4o\", messages=[{\"role\": \"user\", \"content\": \\1}]',\n            content\n        )\n\n        return content\n\n# Usage\nmigrator = V0ToV1Migrator(\"/path/to/your/project\")\nchanges = migrator.migrate_project()\n</code></pre></p>"},{"location":"guides/migration/#upgrading-between-v1x-versions","title":"Upgrading Between v1.x Versions","text":"<p>v1.0 to v1.1 Migration <pre><code># New features in v1.1 - backwards compatible\n\n# Enhanced compliance policies (new feature)\nfrom deepsentinel import CompliancePolicy\n\n# Old way (still works)\nclient = SentinelClient(\n    sentinel_api_key=\"...\",\n    openai_api_key=\"...\"\n)\n\n# New way (recommended)\npolicy = CompliancePolicy(\n    name=\"my-policy\",\n    enable_pii_detection=True,\n    max_risk_score=0.8\n)\n\nclient = SentinelClient(\n    sentinel_api_key=\"...\",\n    openai_api_key=\"...\",\n    compliance_policies=[policy]  # New parameter\n)\n</code></pre></p> <p>v1.1 to v1.2 Migration <pre><code># Performance improvements in v1.2\n\n# New caching options (v1.2+)\nfrom deepsentinel import SentinelClient, SentinelConfig, CacheConfig\n\ncache_config = CacheConfig(\n    enabled=True,\n    ttl_seconds=300,\n    max_size=1000\n)\n\nconfig = SentinelConfig(\n    sentinel_api_key=\"...\",\n    openai_api_key=\"...\",\n    cache_config=cache_config  # New in v1.2\n)\n\nclient = SentinelClient(config=config)\n</code></pre></p>"},{"location":"guides/migration/#testing-migration-success","title":"Testing Migration Success","text":""},{"location":"guides/migration/#automated-migration-tests","title":"Automated Migration Tests","text":"<pre><code>import pytest\nimport asyncio\nfrom typing import Dict, Any\n\nclass MigrationTestSuite:\n    \"\"\"Comprehensive test suite for migration validation.\"\"\"\n\n    def __init__(self, original_client, migrated_client):\n        self.original_client = original_client\n        self.migrated_client = migrated_client\n\n    async def run_compatibility_tests(self) -&gt; Dict[str, Any]:\n        \"\"\"Run comprehensive compatibility tests.\"\"\"\n\n        results = {\n            \"basic_completion\": await self._test_basic_completion(),\n            \"streaming\": await self._test_streaming(),\n            \"function_calling\": await self._test_function_calling(),\n            \"error_handling\": await self._test_error_handling(),\n            \"performance\": await self._test_performance(),\n            \"compliance\": await self._test_compliance()\n        }\n\n        overall_success = all(r[\"success\"] for r in results.values())\n\n        return {\n            \"overall_success\": overall_success,\n            \"individual_results\": results,\n            \"summary\": self._generate_test_summary(results)\n        }\n\n    async def _test_basic_completion(self) -&gt; Dict[str, Any]:\n        \"\"\"Test basic completion compatibility.\"\"\"\n        test_message = \"Hello, how are you?\"\n\n        try:\n            # Test original\n            original_response = self.original_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": test_message}],\n                max_tokens=50\n            )\n\n            # Test migrated\n            migrated_response = await self.migrated_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": test_message}],\n                max_tokens=50\n            )\n\n            return {\n                \"success\": True,\n                \"original_tokens\": original_response.usage.total_tokens,\n                \"migrated_tokens\": migrated_response.usage.total_tokens,\n                \"response_similarity\": self._calculate_similarity(\n                    original_response.choices[0].message.content,\n                    migrated_response.choices[0].message.content\n                )\n            }\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n\n    async def _test_streaming(self) -&gt; Dict[str, Any]:\n        \"\"\"Test streaming compatibility.\"\"\"\n        try:\n            # Test streaming with migrated client\n            stream = await self.migrated_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": \"Count to 5\"}],\n                stream=True,\n                max_tokens=30\n            )\n\n            chunks_received = 0\n            content_received = \"\"\n\n            async for chunk in stream:\n                if chunk.choices[0].delta.content:\n                    chunks_received += 1\n                    content_received += chunk.choices[0].delta.content\n\n            return {\n                \"success\": chunks_received &gt; 0,\n                \"chunks_received\": chunks_received,\n                \"content_length\": len(content_received)\n            }\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n\n    async def _test_function_calling(self) -&gt; Dict[str, Any]:\n        \"\"\"Test function calling compatibility.\"\"\"\n        functions = [\n            {\n                \"type\": \"function\",\n                \"function\": {\n                    \"name\": \"get_current_time\",\n                    \"description\": \"Get the current time\"\n                }\n            }\n        ]\n\n        try:\n            response = await self.migrated_client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[{\"role\": \"user\", \"content\": \"What time is it?\"}],\n                tools=functions,\n                tool_choice=\"auto\"\n            )\n\n            has_function_call = (\n                response.choices[0].message.tool_calls is not None and\n                len(response.choices[0].message.tool_calls) &gt; 0\n            )\n\n            return {\n                \"success\": True,\n                \"function_called\": has_function_call\n            }\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n\n    async def _test_error_handling(self) -&gt; Dict[str, Any]:\n        \"\"\"Test error handling compatibility.\"\"\"\n        try:\n            # Test with invalid model\n            await self.migrated_client.chat.completions.create(\n                model=\"non-existent-model\",\n                messages=[{\"role\": \"user\", \"content\": \"Hello\"}]\n            )\n\n            return {\n                \"success\": False,\n                \"error\": \"Expected error was not raised\"\n            }\n\n        except Exception as e:\n            # This is expected\n            return {\n                \"success\": True,\n                \"error_type\": type(e).__name__\n            }\n\n    async def _test_performance(self) -&gt; Dict[str, Any]:\n        \"\"\"Test performance comparison.\"\"\"\n        import time\n\n        test_messages = [{\"role\": \"user\", \"content\": \"Hello\"}]\n\n        # Time original client\n        start_time = time.time()\n        try:\n            self.original_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=test_messages,\n                max_tokens=10\n            )\n            original_time = time.time() - start_time\n        except:\n            original_time = None\n\n        # Time migrated client\n        start_time = time.time()\n        try:\n            await self.migrated_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=test_messages,\n                max_tokens=10\n            )\n            migrated_time = time.time() - start_time\n\n            return {\n                \"success\": True,\n                \"original_time_ms\": int(original_time * 1000) if original_time else None,\n                \"migrated_time_ms\": int(migrated_time * 1000),\n                \"performance_ratio\": migrated_time / original_time if original_time else None\n            }\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": str(e)\n            }\n\n    async def _test_compliance(self) -&gt; Dict[str, Any]:\n        \"\"\"Test compliance functionality (new feature).\"\"\"\n        try:\n            # Test with sensitive data - should be blocked\n            response = await self.migrated_client.chat.completions.create(\n                model=\"gpt-3.5-turbo\",\n                messages=[{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789\"}]\n            )\n\n            return {\n                \"success\": False,\n                \"error\": \"Compliance violation was not detected\"\n            }\n\n        except Exception as e:\n            # This is expected for compliance violation\n            return {\n                \"success\": True,\n                \"compliance_working\": \"ComplianceViolation\" in str(type(e))\n            }\n\n    def _calculate_similarity(self, text1: str, text2: str) -&gt; float:\n        \"\"\"Calculate similarity between two texts (simplified).\"\"\"\n        # Simple word-based similarity\n        words1 = set(text1.lower().split())\n        words2 = set(text2.lower().split())\n\n        if not words1 and not words2:\n            return 1.0\n\n        intersection = words1.intersection(words2)\n        union = words1.union(words2)\n\n        return len(intersection) / len(union) if union else 0.0\n\n    def _generate_test_summary(self, results: Dict[str, Dict]) -&gt; str:\n        \"\"\"Generate human-readable test summary.\"\"\"\n        passed = sum(1 for r in results.values() if r[\"success\"])\n        total = len(results)\n\n        summary = f\"Migration tests: {passed}/{total} passed\\n\"\n\n        for test_name, result in results.items():\n            status = \"\u2705 PASS\" if result[\"success\"] else \"\u274c FAIL\"\n            summary += f\"  {test_name}: {status}\\n\"\n\n            if not result[\"success\"] and \"error\" in result:\n                summary += f\"    Error: {result['error']}\\n\"\n\n        return summary\n\n# Usage\nasync def validate_migration():\n    \"\"\"Validate migration with comprehensive tests.\"\"\"\n\n    # Set up clients\n    original_client = openai.OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n    migrated_client = SentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    # Run tests\n    test_suite = MigrationTestSuite(original_client, migrated_client)\n    results = await test_suite.run_compatibility_tests()\n\n    print(\"\ud83e\uddea Migration Test Results\")\n    print(\"=\" * 50)\n    print(results[\"summary\"])\n\n    if results[\"overall_success\"]:\n        print(\"\ud83c\udf89 Migration validation successful!\")\n        return True\n    else:\n        print(\"\u26a0\ufe0f Migration validation found issues. Review before proceeding.\")\n        return False\n\n# Run validation\nsuccess = asyncio.run(validate_migration())\n</code></pre>"},{"location":"guides/migration/#rollback-procedures","title":"Rollback Procedures","text":""},{"location":"guides/migration/#automated-rollback-system","title":"Automated Rollback System","text":"<pre><code>class MigrationRollback:\n    \"\"\"Handle rollback procedures for failed migrations.\"\"\"\n\n    def __init__(self, config: MigrationConfig):\n        self.config = config\n        self.rollback_triggers = {\n            'error_rate_threshold': 10.0,  # % error rate\n            'response_time_threshold': 5000,  # ms\n            'success_rate_threshold': 90.0   # % success rate\n        }\n\n    def should_rollback(self, metrics: Dict[str, Any]) -&gt; tuple[bool, str]:\n        \"\"\"Determine if rollback should be triggered.\"\"\"\n\n        # Check error rate\n        error_rate = metrics.get('error_rate', 0)\n        if error_rate &gt; self.rollback_triggers['error_rate_threshold']:\n            return True, f\"Error rate too high: {error_rate}%\"\n\n        # Check response time\n        avg_response_time = metrics.get('avg_response_time_ms', 0)\n        if avg_response_time &gt; self.rollback_triggers['response_time_threshold']:\n            return True, f\"Response time too high: {avg_response_time}ms\"\n\n        # Check success rate\n        success_rate = metrics.get('success_rate', 100)\n        if success_rate &lt; self.rollback_triggers['success_rate_threshold']:\n            return True, f\"Success rate too low: {success_rate}%\"\n\n        return False, \"All metrics within acceptable ranges\"\n\n    def execute_rollback(self, reason: str):\n        \"\"\"Execute rollback to previous configuration.\"\"\"\n\n        print(f\"\ud83d\udea8 EXECUTING ROLLBACK: {reason}\")\n\n        # Step 1: Stop new DeepSentinel traffic\n        self._set_environment_variable('DEEPSENTINEL_PERCENTAGE', '0')\n        self._set_environment_variable('USE_DEEPSENTINEL', 'false')\n\n        # Step 2: Enable fallback mode\n        self._set_environment_variable('FALLBACK_TO_ORIGINAL', 'true')\n\n        # Step 3: Log rollback event\n        logger.critical(\"Migration rollback executed\", extra={\n            \"reason\": reason,\n            \"timestamp\": datetime.now().isoformat(),\n            \"rollback_config\": {\n                \"deepsentinel_percentage\": 0,\n                \"use_deepsentinel\": False,\n                \"fallback_to_original\": True\n            }\n        })\n\n        print(\"\u2705 Rollback completed. All traffic routed to original client.\")\n\n    def _set_environment_variable(self, key: str, value: str):\n        \"\"\"Set environment variable (implementation depends on deployment).\"\"\"\n        # This would typically update your deployment configuration\n        # For example, updating Kubernetes ConfigMap, AWS Parameter Store, etc.\n\n        print(f\"Setting {key}={value}\")\n        os.environ[key] = value\n\n        # In production, you might also need to:\n        # - Update configuration service\n        # - Restart application instances\n        # - Update load balancer configuration\n\n# Automated monitoring with rollback\nclass AutomatedMigrationMonitor:\n    \"\"\"Monitor migration and trigger rollback if needed.\"\"\"\n\n    def __init__(self, rollback_system: MigrationRollback):\n        self.rollback_system = rollback_system\n        self.monitoring_active = False\n\n    def start_monitoring(self, check_interval: int = 60):\n        \"\"\"Start automated monitoring with rollback capability.\"\"\"\n\n        self.monitoring_active = True\n\n        async def monitor_loop():\n            while self.monitoring_active:\n                try:\n                    # Collect current metrics\n                    metrics = self._collect_current_metrics()\n\n                    # Check if rollback is needed\n                    should_rollback, reason = self.rollback_system.should_rollback(metrics)\n\n                    if should_rollback:\n                        self.rollback_system.execute_rollback(reason)\n                        self.monitoring_active = False\n                        break\n\n                    # Log current status\n                    logger.info(\"Migration monitoring check\", extra=metrics)\n\n                except Exception as e:\n                    logger.error(f\"Error in migration monitoring: {e}\")\n\n                await asyncio.sleep(check_interval)\n\n        # Start monitoring in background\n        asyncio.create_task(monitor_loop())\n        print(f\"\ud83d\udd0d Migration monitoring started (check interval: {check_interval}s)\")\n\n    def stop_monitoring(self):\n        \"\"\"Stop automated monitoring.\"\"\"\n        self.monitoring_active = False\n        print(\"\u23f9\ufe0f Migration monitoring stopped\")\n\n    def _collect_current_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Collect current system metrics.\"\"\"\n        # This would integrate with your actual monitoring system\n        # Example implementation:\n\n        return {\n            \"error_rate\": migration_monitor.metrics.get(\"error_rate\", 0),\n            \"avg_response_time_ms\": migration_monitor.metrics.get(\"avg_response_time\", 0) * 1000,\n            \"success_rate\": migration_monitor.metrics.get(\"success_rate\", 100),\n            \"timestamp\": datetime.now().isoformat()\n        }\n\n# Usage\nrollback_system = MigrationRollback(migration_config)\nautomated_monitor = AutomatedMigrationMonitor(rollback_system)\n\n# Start monitoring\nautomated_monitor.start_monitoring(check_interval=30)  # Check every 30 seconds\n</code></pre>"},{"location":"guides/migration/#migration-checklist","title":"Migration Checklist","text":""},{"location":"guides/migration/#pre-migration","title":"Pre-Migration \u2705","text":"<ul> <li> Audit current LLM usage</li> <li> Assess migration complexity</li> <li> Set up DeepSentinel account and API keys</li> <li> Plan migration strategy (gradual vs big bang)</li> <li> Set up monitoring and logging</li> <li> Create rollback procedures</li> </ul>"},{"location":"guides/migration/#during-migration","title":"During Migration \u2705","text":"<ul> <li> Start with non-critical components</li> <li> Implement feature flags for traffic control</li> <li> Monitor error rates and performance</li> <li> Test each component thoroughly</li> <li> Document any issues encountered</li> <li> Gradually increase traffic percentage</li> </ul>"},{"location":"guides/migration/#post-migration","title":"Post-Migration \u2705","text":"<ul> <li> Verify all functionality works correctly</li> <li> Check compliance features are active</li> <li> Monitor performance metrics</li> <li> Update documentation</li> <li> Train team on new features</li> <li> Remove old code after stable period</li> </ul>"},{"location":"guides/migration/#emergency-procedures","title":"Emergency Procedures \u2705","text":"<ul> <li> Rollback procedures tested and ready</li> <li> Monitoring alerts configured</li> <li> Contact information for DeepSentinel support</li> <li> Incident response plan documented</li> </ul>"},{"location":"guides/migration/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during migration:</p> <ul> <li>FAQ - Common migration questions</li> <li>GitHub Issues - Report migration problems</li> <li>Discord Community - Get help from other users</li> <li>Migration Support - Direct migration assistance</li> </ul> <p>Congratulations! You've completed your migration to DeepSentinel. Your application now has enterprise-grade compliance protection while maintaining the same familiar interface.</p>"},{"location":"guides/performance/","title":"Performance Optimization Guide","text":"<p>This guide covers techniques for optimizing DeepSentinel performance in high-throughput applications while maintaining compliance coverage and minimizing latency impact.</p>"},{"location":"guides/performance/#overview","title":"Overview","text":"<p>This guide covers: - Local vs cloud detection strategies - Caching optimization techniques - Request batching and connection pooling - Performance monitoring and tuning - Scalability considerations</p> <p>Time to read: 25 minutes</p>"},{"location":"guides/performance/#understanding-performance-impact","title":"Understanding Performance Impact","text":"<p>DeepSentinel adds several layers of processing to your LLM requests:</p> <ol> <li>Compliance Detection - Scanning for sensitive data patterns</li> <li>Policy Evaluation - Applying compliance rules</li> <li>Network Overhead - Additional API calls to DeepSentinel service</li> <li>Audit Logging - Recording compliance events</li> </ol> <p>Let's optimize each layer systematically.</p>"},{"location":"guides/performance/#compliance-detection-optimization","title":"Compliance Detection Optimization","text":""},{"location":"guides/performance/#local-vs-cloud-detection","title":"Local vs Cloud Detection","text":"<p>Local Detection (Fastest) <pre><code>from deepsentinel import SentinelClient, SentinelConfig, DetectionConfig\n\n# Configure local-first detection\ndetection_config = DetectionConfig(\n    mode=\"local_first\",              # Try local detection first\n    local_patterns_only=True,        # Use only local regex patterns\n    cloud_fallback=False,            # Disable cloud fallback for speed\n    pattern_cache_size=1000,         # Cache compiled patterns\n    enable_pattern_optimization=True  # Optimize pattern compilation\n)\n\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    detection_config=detection_config\n)\n\nclient = SentinelClient(config=config)\n</code></pre></p> <p>Hybrid Detection (Balanced) <pre><code># Configure hybrid detection for balance of speed and accuracy\ndetection_config = DetectionConfig(\n    mode=\"hybrid\",                   # Local first, cloud for complex cases\n    local_confidence_threshold=0.8,  # Use cloud if local confidence &lt; 0.8\n    cloud_timeout=500,               # 500ms timeout for cloud detection\n    cache_cloud_results=True,        # Cache cloud detection results\n    cloud_cache_ttl=3600            # Cache cloud results for 1 hour\n)\n</code></pre></p> <p>Cloud Detection (Most Accurate) <pre><code># Configure cloud detection for maximum accuracy\ndetection_config = DetectionConfig(\n    mode=\"cloud_first\",              # Always use cloud detection\n    cloud_timeout=2000,              # 2 second timeout\n    local_fallback=True,             # Fall back to local if cloud fails\n    enable_ml_detection=True         # Enable ML-based detection\n)\n</code></pre></p>"},{"location":"guides/performance/#pattern-optimization","title":"Pattern Optimization","text":"<p>Optimize Regular Expressions <pre><code>import re\nfrom deepsentinel import PatternOptimizer\n\nclass OptimizedPatternMatcher:\n    \"\"\"Optimized pattern matcher for high-performance detection.\"\"\"\n\n    def __init__(self):\n        self.compiled_patterns = {}\n        self.pattern_cache = {}\n        self.optimizer = PatternOptimizer()\n\n    def add_patterns(self, patterns: dict):\n        \"\"\"Add and optimize patterns.\"\"\"\n        for name, pattern in patterns.items():\n            # Optimize pattern for performance\n            optimized_pattern = self.optimizer.optimize(pattern)\n\n            # Compile and cache\n            try:\n                compiled = re.compile(optimized_pattern, re.IGNORECASE | re.MULTILINE)\n                self.compiled_patterns[name] = compiled\n            except re.error as e:\n                print(f\"Failed to compile pattern {name}: {e}\")\n\n    def scan_text(self, text: str, max_patterns: int = 10) -&gt; list:\n        \"\"\"Scan text with optimized patterns.\"\"\"\n        if text in self.pattern_cache:\n            return self.pattern_cache[text]\n\n        results = []\n\n        # Pre-filter patterns based on text characteristics\n        relevant_patterns = self._filter_relevant_patterns(text)\n\n        for name, pattern in list(relevant_patterns.items())[:max_patterns]:\n            matches = pattern.findall(text)\n            if matches:\n                results.extend([{\n                    \"type\": name,\n                    \"matches\": matches,\n                    \"count\": len(matches)\n                }])\n\n        # Cache results\n        if len(self.pattern_cache) &lt; 1000:  # Limit cache size\n            self.pattern_cache[text] = results\n\n        return results\n\n    def _filter_relevant_patterns(self, text: str) -&gt; dict:\n        \"\"\"Pre-filter patterns based on text content.\"\"\"\n        # Quick heuristics to avoid running unnecessary patterns\n        relevant = {}\n\n        # Check for digits (needed for SSN, credit cards, etc.)\n        has_digits = any(c.isdigit() for c in text)\n\n        # Check for @ symbol (needed for emails)\n        has_at = '@' in text\n\n        for name, pattern in self.compiled_patterns.items():\n            if name in ['ssn', 'credit_card', 'phone'] and not has_digits:\n                continue\n            if name == 'email' and not has_at:\n                continue\n\n            relevant[name] = pattern\n\n        return relevant\n\n# Usage\nmatcher = OptimizedPatternMatcher()\nmatcher.add_patterns({\n    'ssn': r'\\b\\d{3}-\\d{2}-\\d{4}\\b',\n    'credit_card': r'\\b(?:\\d{4}[-\\s]?){3}\\d{4}\\b',\n    'email': r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n})\n\n# Fast pattern matching\nresults = matcher.scan_text(\"Contact john@example.com for details\")\n</code></pre></p>"},{"location":"guides/performance/#caching-strategies","title":"Caching Strategies","text":""},{"location":"guides/performance/#multi-level-caching","title":"Multi-Level Caching","text":"<p>Level 1: Request Response Cache <pre><code>import hashlib\nimport json\nimport time\nfrom typing import Dict, Any, Optional\nfrom threading import RLock\n\nclass RequestCache:\n    \"\"\"High-performance request cache with LRU eviction.\"\"\"\n\n    def __init__(self, max_size: int = 10000, ttl_seconds: int = 3600):\n        self.max_size = max_size\n        self.ttl_seconds = ttl_seconds\n        self.cache = {}\n        self.access_times = {}\n        self.lock = RLock()\n\n    def _generate_key(self, messages: list, model: str, **kwargs) -&gt; str:\n        \"\"\"Generate cache key from request parameters.\"\"\"\n        # Include only cacheable parameters\n        cache_params = {\n            'messages': messages,\n            'model': model,\n            'temperature': kwargs.get('temperature', 0.7),\n            'max_tokens': kwargs.get('max_tokens')\n        }\n\n        key_str = json.dumps(cache_params, sort_keys=True)\n        return hashlib.sha256(key_str.encode()).hexdigest()[:16]\n\n    def get(self, messages: list, model: str, **kwargs) -&gt; Optional[Dict]:\n        \"\"\"Get cached response if available and not expired.\"\"\"\n        key = self._generate_key(messages, model, **kwargs)\n\n        with self.lock:\n            if key in self.cache:\n                entry = self.cache[key]\n\n                # Check if expired\n                if time.time() - entry['timestamp'] &gt; self.ttl_seconds:\n                    del self.cache[key]\n                    del self.access_times[key]\n                    return None\n\n                # Update access time for LRU\n                self.access_times[key] = time.time()\n                return entry['response']\n\n        return None\n\n    def set(self, messages: list, model: str, response: Dict, **kwargs):\n        \"\"\"Cache response with LRU eviction.\"\"\"\n        key = self._generate_key(messages, model, **kwargs)\n\n        with self.lock:\n            # Evict oldest entries if cache is full\n            if len(self.cache) &gt;= self.max_size:\n                # Find least recently used key\n                lru_key = min(self.access_times.keys(), \n                             key=lambda k: self.access_times[k])\n                del self.cache[lru_key]\n                del self.access_times[lru_key]\n\n            # Add new entry\n            self.cache[key] = {\n                'response': response,\n                'timestamp': time.time()\n            }\n            self.access_times[key] = time.time()\n\n    def get_stats(self) -&gt; Dict[str, Any]:\n        \"\"\"Get cache statistics.\"\"\"\n        with self.lock:\n            return {\n                'size': len(self.cache),\n                'max_size': self.max_size,\n                'utilization': len(self.cache) / self.max_size * 100\n            }\n\n# Global cache instances\nrequest_cache = RequestCache(max_size=5000, ttl_seconds=1800)  # 30 minutes\n</code></pre></p> <p>Level 2: Compliance Detection Cache <pre><code>class ComplianceCache:\n    \"\"\"Cache for compliance detection results.\"\"\"\n\n    def __init__(self, max_size: int = 50000, ttl_seconds: int = 7200):\n        self.max_size = max_size\n        self.ttl_seconds = ttl_seconds\n        self.cache = {}\n        self.lock = RLock()\n\n    def _text_hash(self, text: str) -&gt; str:\n        \"\"\"Generate hash for text content.\"\"\"\n        return hashlib.sha256(text.encode()).hexdigest()[:12]\n\n    def get_detection_result(self, text: str) -&gt; Optional[Dict]:\n        \"\"\"Get cached detection result.\"\"\"\n        key = self._text_hash(text)\n\n        with self.lock:\n            if key in self.cache:\n                entry = self.cache[key]\n\n                if time.time() - entry['timestamp'] &lt;= self.ttl_seconds:\n                    return entry['result']\n                else:\n                    del self.cache[key]\n\n        return None\n\n    def cache_detection_result(self, text: str, result: Dict):\n        \"\"\"Cache detection result.\"\"\"\n        key = self._text_hash(text)\n\n        with self.lock:\n            # Simple eviction: remove oldest 10% when full\n            if len(self.cache) &gt;= self.max_size:\n                sorted_keys = sorted(self.cache.keys(), \n                                   key=lambda k: self.cache[k]['timestamp'])\n                for old_key in sorted_keys[:self.max_size // 10]:\n                    del self.cache[old_key]\n\n            self.cache[key] = {\n                'result': result,\n                'timestamp': time.time()\n            }\n\ncompliance_cache = ComplianceCache(max_size=20000, ttl_seconds=3600)  # 1 hour\n</code></pre></p>"},{"location":"guides/performance/#cache-aware-client","title":"Cache-Aware Client","text":"<pre><code>from deepsentinel import SentinelClient\nimport time\n\nclass CachedSentinelClient:\n    \"\"\"DeepSentinel client with integrated caching.\"\"\"\n\n    def __init__(self, **kwargs):\n        self.client = SentinelClient(**kwargs)\n        self.request_cache = RequestCache()\n        self.compliance_cache = ComplianceCache()\n        self.cache_hits = 0\n        self.cache_misses = 0\n\n    def chat_completion_create(self, messages, **kwargs):\n        \"\"\"Create chat completion with caching.\"\"\"\n        model = kwargs.get('model', 'gpt-4o')\n\n        # Check request cache first\n        cached_response = self.request_cache.get(messages, model, **kwargs)\n        if cached_response:\n            self.cache_hits += 1\n            cached_response['from_cache'] = True\n            return cached_response\n\n        self.cache_misses += 1\n\n        # Make request\n        start_time = time.time()\n        response = self.client.chat.completions.create(messages=messages, **kwargs)\n        duration = time.time() - start_time\n\n        # Cache successful response\n        result = {\n            'response': response,\n            'duration': duration,\n            'from_cache': False\n        }\n\n        self.request_cache.set(messages, model, result, **kwargs)\n\n        return result\n\n    def get_cache_stats(self) -&gt; Dict:\n        \"\"\"Get comprehensive cache statistics.\"\"\"\n        total_requests = self.cache_hits + self.cache_misses\n        hit_rate = self.cache_hits / total_requests * 100 if total_requests &gt; 0 else 0\n\n        return {\n            'request_cache': self.request_cache.get_stats(),\n            'compliance_cache': {\n                'size': len(self.compliance_cache.cache),\n                'max_size': self.compliance_cache.max_size\n            },\n            'hit_rate': hit_rate,\n            'cache_hits': self.cache_hits,\n            'cache_misses': self.cache_misses\n        }\n</code></pre>"},{"location":"guides/performance/#connection-optimization","title":"Connection Optimization","text":""},{"location":"guides/performance/#http-connection-pooling","title":"HTTP Connection Pooling","text":"<pre><code>import httpx\nfrom deepsentinel import SentinelClient, SentinelConfig, NetworkConfig\n\n# Configure optimized HTTP settings\nnetwork_config = NetworkConfig(\n    connection_pool_size=100,        # Total connection pool size\n    connection_pool_per_host=20,     # Connections per host\n    connection_timeout=5.0,          # Connection establishment timeout\n    read_timeout=30.0,               # Read timeout for requests\n    write_timeout=5.0,               # Write timeout for uploads\n    pool_timeout=1.0,                # Timeout to get connection from pool\n    keep_alive_timeout=120,          # Keep alive timeout\n    max_keepalive_connections=50,    # Max keep-alive connections\n    enable_http2=True,               # Enable HTTP/2 for better multiplexing\n    retries=3,                       # Automatic retries\n    retry_backoff_factor=0.5         # Backoff factor for retries\n)\n\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    network_config=network_config\n)\n\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"guides/performance/#async-client-for-high-concurrency","title":"Async Client for High Concurrency","text":"<pre><code>import asyncio\nfrom deepsentinel import AsyncSentinelClient\nfrom typing import List, Dict\n\nclass HighThroughputClient:\n    \"\"\"High-throughput async client for DeepSentinel.\"\"\"\n\n    def __init__(self, **kwargs):\n        self.client = AsyncSentinelClient(**kwargs)\n        self.semaphore = asyncio.Semaphore(50)  # Limit concurrent requests\n\n    async def process_batch(self, requests: List[Dict]) -&gt; List[Dict]:\n        \"\"\"Process multiple requests concurrently.\"\"\"\n        async def process_single(request):\n            async with self.semaphore:  # Limit concurrency\n                try:\n                    response = await self.client.chat.completions.create(**request)\n                    return {\n                        'success': True,\n                        'response': response,\n                        'request_id': request.get('id')\n                    }\n                except Exception as e:\n                    return {\n                        'success': False,\n                        'error': str(e),\n                        'request_id': request.get('id')\n                    }\n\n        # Process all requests concurrently\n        tasks = [process_single(req) for req in requests]\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        return results\n\n    async def stream_process(self, requests: List[Dict], batch_size: int = 10):\n        \"\"\"Process requests in batches to avoid overwhelming the system.\"\"\"\n        for i in range(0, len(requests), batch_size):\n            batch = requests[i:i + batch_size]\n            results = await self.process_batch(batch)\n\n            for result in results:\n                yield result\n\n            # Brief pause between batches to be respectful\n            await asyncio.sleep(0.1)\n\n# Usage example\nasync def high_throughput_example():\n    \"\"\"Example of high-throughput processing.\"\"\"\n    client = HighThroughputClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    # Create batch of requests\n    requests = [\n        {\n            'id': f'req_{i}',\n            'model': 'gpt-3.5-turbo',\n            'messages': [{'role': 'user', 'content': f'Process item {i}'}],\n            'max_tokens': 50\n        }\n        for i in range(100)\n    ]\n\n    # Process in batches\n    results = []\n    async for result in client.stream_process(requests, batch_size=20):\n        results.append(result)\n\n        if len(results) % 20 == 0:\n            print(f\"Processed {len(results)} requests...\")\n\n    # Analyze results\n    successful = sum(1 for r in results if r['success'])\n    print(f\"Successfully processed {successful}/{len(results)} requests\")\n\n# Run with: asyncio.run(high_throughput_example())\n</code></pre>"},{"location":"guides/performance/#request-batching-and-optimization","title":"Request Batching and Optimization","text":""},{"location":"guides/performance/#intelligent-request-batching","title":"Intelligent Request Batching","text":"<pre><code>import time\nfrom collections import defaultdict\nfrom dataclasses import dataclass\nfrom typing import List, Dict, Callable\n\n@dataclass\nclass BatchRequest:\n    \"\"\"Individual request in a batch.\"\"\"\n    id: str\n    messages: List[Dict]\n    model: str\n    callback: Callable\n    kwargs: Dict\n    timestamp: float\n\nclass RequestBatcher:\n    \"\"\"Intelligent request batcher for optimized throughput.\"\"\"\n\n    def __init__(self, \n                 batch_size: int = 10,\n                 batch_timeout: float = 0.1,\n                 max_wait_time: float = 1.0):\n        self.batch_size = batch_size\n        self.batch_timeout = batch_timeout\n        self.max_wait_time = max_wait_time\n\n        self.pending_requests = []\n        self.batches_by_model = defaultdict(list)\n        self.last_batch_time = time.time()\n\n    def add_request(self, request: BatchRequest):\n        \"\"\"Add request to batch queue.\"\"\"\n        self.pending_requests.append(request)\n        self.batches_by_model[request.model].append(request)\n\n        # Check if we should process a batch\n        if self._should_process_batch():\n            self._process_batches()\n\n    def _should_process_batch(self) -&gt; bool:\n        \"\"\"Determine if we should process pending batches.\"\"\"\n        current_time = time.time()\n\n        # Process if any model has enough requests\n        for model, requests in self.batches_by_model.items():\n            if len(requests) &gt;= self.batch_size:\n                return True\n\n        # Process if timeout exceeded\n        if current_time - self.last_batch_time &gt;= self.batch_timeout:\n            return True\n\n        # Process if max wait time exceeded for oldest request\n        if self.pending_requests:\n            oldest_request = min(self.pending_requests, key=lambda r: r.timestamp)\n            if current_time - oldest_request.timestamp &gt;= self.max_wait_time:\n                return True\n\n        return False\n\n    def _process_batches(self):\n        \"\"\"Process pending batches.\"\"\"\n        for model, requests in self.batches_by_model.items():\n            if requests:\n                # Take up to batch_size requests\n                batch = requests[:self.batch_size]\n\n                # Remove from pending\n                for req in batch:\n                    self.pending_requests.remove(req)\n\n                # Process batch asynchronously\n                asyncio.create_task(self._process_batch(batch))\n\n                # Update remaining requests\n                self.batches_by_model[model] = requests[self.batch_size:]\n\n        self.last_batch_time = time.time()\n\n    async def _process_batch(self, batch: List[BatchRequest]):\n        \"\"\"Process a batch of requests.\"\"\"\n        tasks = []\n\n        for request in batch:\n            task = asyncio.create_task(\n                self._process_single_request(request)\n            )\n            tasks.append(task)\n\n        # Wait for all requests in batch to complete\n        await asyncio.gather(*tasks, return_exceptions=True)\n\n    async def _process_single_request(self, request: BatchRequest):\n        \"\"\"Process a single request and call its callback.\"\"\"\n        try:\n            # Make the actual API call here\n            # This is a placeholder - you'd integrate with your actual client\n            result = await self._make_api_call(request)\n            request.callback(result)\n        except Exception as e:\n            request.callback({'error': str(e)})\n\n    async def _make_api_call(self, request: BatchRequest):\n        \"\"\"Make the actual API call.\"\"\"\n        # Placeholder for actual API call\n        await asyncio.sleep(0.1)  # Simulate API call\n        return {'success': True, 'content': 'Response content'}\n</code></pre>"},{"location":"guides/performance/#smart-request-prioritization","title":"Smart Request Prioritization","text":"<pre><code>from enum import Enum\nfrom queue import PriorityQueue\nimport threading\n\nclass RequestPriority(Enum):\n    LOW = 3\n    NORMAL = 2\n    HIGH = 1\n    CRITICAL = 0\n\n@dataclass\nclass PrioritizedRequest:\n    \"\"\"Request with priority information.\"\"\"\n    priority: RequestPriority\n    request: BatchRequest\n\n    def __lt__(self, other):\n        return self.priority.value &lt; other.priority.value\n\nclass PriorityRequestProcessor:\n    \"\"\"Process requests based on priority.\"\"\"\n\n    def __init__(self, workers: int = 5):\n        self.request_queue = PriorityQueue()\n        self.workers = workers\n        self.running = False\n        self.worker_threads = []\n\n    def start(self):\n        \"\"\"Start worker threads.\"\"\"\n        self.running = True\n        for i in range(self.workers):\n            thread = threading.Thread(target=self._worker, daemon=True)\n            thread.start()\n            self.worker_threads.append(thread)\n\n    def stop(self):\n        \"\"\"Stop worker threads.\"\"\"\n        self.running = False\n        # Add sentinel values to wake up workers\n        for _ in range(self.workers):\n            self.request_queue.put(None)\n\n    def add_request(self, request: BatchRequest, priority: RequestPriority = RequestPriority.NORMAL):\n        \"\"\"Add request with priority.\"\"\"\n        prioritized_request = PrioritizedRequest(priority, request)\n        self.request_queue.put(prioritized_request)\n\n    def _worker(self):\n        \"\"\"Worker thread to process requests.\"\"\"\n        while self.running:\n            try:\n                item = self.request_queue.get(timeout=1)\n                if item is None:  # Sentinel value\n                    break\n\n                # Process the request\n                asyncio.run(self._process_request(item.request))\n\n            except Exception as e:\n                print(f\"Error processing request: {e}\")\n\n    async def _process_request(self, request: BatchRequest):\n        \"\"\"Process individual request.\"\"\"\n        # Implementation would go here\n        pass\n</code></pre>"},{"location":"guides/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"guides/performance/#comprehensive-performance-metrics","title":"Comprehensive Performance Metrics","text":"<pre><code>import time\nimport statistics\nfrom collections import deque, defaultdict\nfrom threading import Lock\nfrom typing import Dict, List, Any\n\nclass PerformanceMonitor:\n    \"\"\"Comprehensive performance monitoring for DeepSentinel.\"\"\"\n\n    def __init__(self, window_size: int = 1000):\n        self.window_size = window_size\n        self.lock = Lock()\n\n        # Metrics storage\n        self.request_times = deque(maxlen=window_size)\n        self.detection_times = deque(maxlen=window_size)\n        self.cache_hits = 0\n        self.cache_misses = 0\n        self.error_counts = defaultdict(int)\n        self.model_stats = defaultdict(lambda: {\n            'requests': 0,\n            'total_time': 0,\n            'tokens': 0\n        })\n\n        # Real-time metrics\n        self.current_rps = 0  # Requests per second\n        self.last_rps_calculation = time.time()\n        self.recent_requests = deque(maxlen=100)\n\n    def record_request(self, \n                      duration: float,\n                      model: str,\n                      tokens: int = 0,\n                      cache_hit: bool = False,\n                      detection_time: float = 0,\n                      error: str = None):\n        \"\"\"Record request metrics.\"\"\"\n        with self.lock:\n            current_time = time.time()\n\n            # Record timing\n            self.request_times.append(duration)\n            if detection_time &gt; 0:\n                self.detection_times.append(detection_time)\n\n            # Record cache metrics\n            if cache_hit:\n                self.cache_hits += 1\n            else:\n                self.cache_misses += 1\n\n            # Record model-specific metrics\n            self.model_stats[model]['requests'] += 1\n            self.model_stats[model]['total_time'] += duration\n            self.model_stats[model]['tokens'] += tokens\n\n            # Record errors\n            if error:\n                self.error_counts[error] += 1\n\n            # Update RPS calculation\n            self.recent_requests.append(current_time)\n            self._update_rps()\n\n    def _update_rps(self):\n        \"\"\"Update requests per second calculation.\"\"\"\n        current_time = time.time()\n\n        # Remove requests older than 1 second\n        while (self.recent_requests and \n               current_time - self.recent_requests[0] &gt; 1.0):\n            self.recent_requests.popleft()\n\n        self.current_rps = len(self.recent_requests)\n\n    def get_performance_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Get comprehensive performance summary.\"\"\"\n        with self.lock:\n            if not self.request_times:\n                return {\"message\": \"No data available\"}\n\n            # Calculate statistics\n            request_stats = self._calculate_stats(list(self.request_times))\n            detection_stats = self._calculate_stats(list(self.detection_times)) if self.detection_times else {}\n\n            # Cache statistics\n            total_cache_requests = self.cache_hits + self.cache_misses\n            cache_hit_rate = (self.cache_hits / total_cache_requests * 100) if total_cache_requests &gt; 0 else 0\n\n            # Model statistics\n            model_summary = {}\n            for model, stats in self.model_stats.items():\n                avg_time = stats['total_time'] / stats['requests'] if stats['requests'] &gt; 0 else 0\n                model_summary[model] = {\n                    'requests': stats['requests'],\n                    'avg_response_time_ms': int(avg_time * 1000),\n                    'total_tokens': stats['tokens'],\n                    'avg_tokens_per_request': stats['tokens'] // stats['requests'] if stats['requests'] &gt; 0 else 0\n                }\n\n            return {\n                'request_performance': {\n                    'total_requests': len(self.request_times),\n                    'avg_response_time_ms': int(request_stats.get('mean', 0) * 1000),\n                    'median_response_time_ms': int(request_stats.get('median', 0) * 1000),\n                    'p95_response_time_ms': int(request_stats.get('p95', 0) * 1000),\n                    'p99_response_time_ms': int(request_stats.get('p99', 0) * 1000),\n                    'current_rps': self.current_rps\n                },\n                'detection_performance': {\n                    'avg_detection_time_ms': int(detection_stats.get('mean', 0) * 1000),\n                    'median_detection_time_ms': int(detection_stats.get('median', 0) * 1000)\n                } if detection_stats else {'message': 'No detection data'},\n                'cache_performance': {\n                    'hit_rate_percent': round(cache_hit_rate, 2),\n                    'hits': self.cache_hits,\n                    'misses': self.cache_misses\n                },\n                'model_performance': model_summary,\n                'error_summary': dict(self.error_counts)\n            }\n\n    def _calculate_stats(self, values: List[float]) -&gt; Dict[str, float]:\n        \"\"\"Calculate statistical metrics for a list of values.\"\"\"\n        if not values:\n            return {}\n\n        sorted_values = sorted(values)\n        n = len(sorted_values)\n\n        return {\n            'mean': statistics.mean(values),\n            'median': statistics.median(values),\n            'p95': sorted_values[int(n * 0.95)] if n &gt; 0 else 0,\n            'p99': sorted_values[int(n * 0.99)] if n &gt; 0 else 0,\n            'min': min(values),\n            'max': max(values)\n        }\n\n    def get_real_time_metrics(self) -&gt; Dict[str, Any]:\n        \"\"\"Get real-time performance metrics.\"\"\"\n        with self.lock:\n            recent_times = list(self.request_times)[-100:]  # Last 100 requests\n            recent_stats = self._calculate_stats(recent_times) if recent_times else {}\n\n            return {\n                'current_rps': self.current_rps,\n                'recent_avg_response_time_ms': int(recent_stats.get('mean', 0) * 1000),\n                'active_requests': len(self.recent_requests),\n                'cache_hit_rate_recent': self._calculate_recent_cache_hit_rate()\n            }\n\n    def _calculate_recent_cache_hit_rate(self) -&gt; float:\n        \"\"\"Calculate cache hit rate for recent requests.\"\"\"\n        # This is a simplified calculation\n        # In practice, you'd track cache metrics with timestamps\n        total = self.cache_hits + self.cache_misses\n        return (self.cache_hits / total * 100) if total &gt; 0 else 0\n\n# Global performance monitor\nperf_monitor = PerformanceMonitor(window_size=5000)\n</code></pre>"},{"location":"guides/performance/#performance-instrumentation","title":"Performance Instrumentation","text":"<pre><code>import functools\nimport time\nfrom typing import Callable, Any\n\ndef instrument_performance(monitor: PerformanceMonitor):\n    \"\"\"Decorator to instrument function performance.\"\"\"\n\n    def decorator(func: Callable) -&gt; Callable:\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n            error = None\n\n            try:\n                result = func(*args, **kwargs)\n                return result\n            except Exception as e:\n                error = type(e).__name__\n                raise\n            finally:\n                duration = time.time() - start_time\n\n                # Extract relevant metrics from args/kwargs if available\n                model = kwargs.get('model', 'unknown')\n                tokens = getattr(result, 'usage.total_tokens', 0) if 'result' in locals() else 0\n\n                monitor.record_request(\n                    duration=duration,\n                    model=model,\n                    tokens=tokens,\n                    error=error\n                )\n\n        return wrapper\n    return decorator\n\n# Usage\n@instrument_performance(perf_monitor)\ndef monitored_completion(client, messages, **kwargs):\n    \"\"\"Completion function with performance monitoring.\"\"\"\n    return client.chat.completions.create(messages=messages, **kwargs)\n</code></pre>"},{"location":"guides/performance/#memory-optimization","title":"Memory Optimization","text":""},{"location":"guides/performance/#efficient-data-structures","title":"Efficient Data Structures","text":"<pre><code>import sys\nfrom typing import Dict, List, Any\nimport gc\n\nclass MemoryOptimizedCache:\n    \"\"\"Memory-efficient cache implementation.\"\"\"\n\n    def __init__(self, max_memory_mb: int = 100):\n        self.max_memory_bytes = max_memory_mb * 1024 * 1024\n        self.cache = {}\n        self.key_sizes = {}\n\n    def set(self, key: str, value: Any):\n        \"\"\"Set value with memory management.\"\"\"\n        # Calculate memory usage\n        value_size = sys.getsizeof(value)\n        key_size = sys.getsizeof(key)\n        total_size = value_size + key_size\n\n        # Check if we need to free memory\n        if self._get_current_memory() + total_size &gt; self.max_memory_bytes:\n            self._evict_memory()\n\n        self.cache[key] = value\n        self.key_sizes[key] = total_size\n\n    def get(self, key: str) -&gt; Any:\n        \"\"\"Get value from cache.\"\"\"\n        return self.cache.get(key)\n\n    def _get_current_memory(self) -&gt; int:\n        \"\"\"Get current memory usage.\"\"\"\n        return sum(self.key_sizes.values())\n\n    def _evict_memory(self):\n        \"\"\"Evict items to free memory.\"\"\"\n        # Simple LRU eviction - remove 25% of items\n        items_to_remove = len(self.cache) // 4\n\n        # In a real implementation, you'd track access times\n        keys_to_remove = list(self.cache.keys())[:items_to_remove]\n\n        for key in keys_to_remove:\n            if key in self.cache:\n                del self.cache[key]\n                del self.key_sizes[key]\n\n        # Force garbage collection\n        gc.collect()\n\nclass StreamingResponseHandler:\n    \"\"\"Memory-efficient streaming response handler.\"\"\"\n\n    def __init__(self, chunk_size: int = 1024):\n        self.chunk_size = chunk_size\n        self.buffer = []\n        self.buffer_size = 0\n\n    def add_chunk(self, chunk: str) -&gt; List[str]:\n        \"\"\"Add chunk and return completed segments.\"\"\"\n        self.buffer.append(chunk)\n        self.buffer_size += len(chunk)\n\n        completed_segments = []\n\n        # If buffer exceeds chunk size, flush it\n        if self.buffer_size &gt;= self.chunk_size:\n            segment = ''.join(self.buffer)\n            completed_segments.append(segment)\n\n            # Clear buffer\n            self.buffer = []\n            self.buffer_size = 0\n\n        return completed_segments\n\n    def flush(self) -&gt; str:\n        \"\"\"Flush remaining buffer.\"\"\"\n        if self.buffer:\n            segment = ''.join(self.buffer)\n            self.buffer = []\n            self.buffer_size = 0\n            return segment\n        return \"\"\n</code></pre>"},{"location":"guides/performance/#scalability-patterns","title":"Scalability Patterns","text":""},{"location":"guides/performance/#horizontal-scaling-with-load-balancing","title":"Horizontal Scaling with Load Balancing","text":"<pre><code>import random\nfrom typing import List\nimport asyncio\n\nclass LoadBalancedClient:\n    \"\"\"Load-balanced DeepSentinel client for horizontal scaling.\"\"\"\n\n    def __init__(self, client_configs: List[Dict]):\n        \"\"\"Initialize with multiple client configurations.\"\"\"\n        self.clients = []\n        for config in client_configs:\n            client = SentinelClient(**config)\n            self.clients.append({\n                'client': client,\n                'weight': config.get('weight', 1),\n                'active_requests': 0,\n                'total_requests': 0,\n                'error_count': 0\n            })\n\n        self.current_index = 0\n\n    def get_client(self, strategy: str = \"round_robin\"):\n        \"\"\"Get client based on load balancing strategy.\"\"\"\n        if strategy == \"round_robin\":\n            return self._round_robin()\n        elif strategy == \"least_connections\":\n            return self._least_connections()\n        elif strategy == \"weighted_random\":\n            return self._weighted_random()\n        else:\n            return self._round_robin()\n\n    def _round_robin(self):\n        \"\"\"Round-robin load balancing.\"\"\"\n        client_info = self.clients[self.current_index]\n        self.current_index = (self.current_index + 1) % len(self.clients)\n        return client_info\n\n    def _least_connections(self):\n        \"\"\"Least connections load balancing.\"\"\"\n        return min(self.clients, key=lambda c: c['active_requests'])\n\n    def _weighted_random(self):\n        \"\"\"Weighted random load balancing.\"\"\"\n        total_weight = sum(c['weight'] for c in self.clients)\n        r = random.uniform(0, total_weight)\n\n        current_weight = 0\n        for client_info in self.clients:\n            current_weight += client_info['weight']\n            if r &lt;= current_weight:\n                return client_info\n\n        return self.clients[0]  # Fallback\n\n    async def completion(self, messages: List[Dict], strategy: str = \"round_robin\", **kwargs):\n        \"\"\"Make completion request with load balancing.\"\"\"\n        client_info = self.get_client(strategy)\n        client = client_info['client']\n\n        # Track active requests\n        client_info['active_requests'] += 1\n        client_info['total_requests'] += 1\n\n        try:\n            response = await client.chat.completions.create(\n                messages=messages, **kwargs\n            )\n            return response\n        except Exception as e:\n            client_info['error_count'] += 1\n            raise\n        finally:\n            client_info['active_requests'] -= 1\n\n    def get_client_stats(self) -&gt; List[Dict]:\n        \"\"\"Get statistics for all clients.\"\"\"\n        stats = []\n        for i, client_info in enumerate(self.clients):\n            error_rate = (client_info['error_count'] / \n                         max(client_info['total_requests'], 1) * 100)\n\n            stats.append({\n                'client_id': i,\n                'weight': client_info['weight'],\n                'active_requests': client_info['active_requests'],\n                'total_requests': client_info['total_requests'],\n                'error_count': client_info['error_count'],\n                'error_rate_percent': round(error_rate, 2)\n            })\n\n        return stats\n</code></pre>"},{"location":"guides/performance/#performance-testing-and-benchmarking","title":"Performance Testing and Benchmarking","text":""},{"location":"guides/performance/#automated-performance-testing","title":"Automated Performance Testing","text":"<pre><code>import asyncio\nimport time\nimport statistics\nfrom typing import List, Dict\n\nclass PerformanceTester:\n    \"\"\"Automated performance testing for DeepSentinel.\"\"\"\n\n    def __init__(self, client):\n        self.client = client\n\n    async def run_load_test(self, \n                           concurrent_requests: int = 10,\n                           total_requests: int = 100,\n                           test_duration: int = 60) -&gt; Dict:\n        \"\"\"Run comprehensive load test.\"\"\"\n\n        print(f\"Starting load test: {concurrent_requests} concurrent, {total_requests} total\")\n\n        # Test scenarios\n        scenarios = [\n            {\n                'name': 'simple_query',\n                'messages': [{'role': 'user', 'content': 'Hello, how are you?'}],\n                'weight': 0.5\n            },\n            {\n                'name': 'complex_query',\n                'messages': [{'role': 'user', 'content': 'Explain quantum computing in detail with examples and applications.'}],\n                'weight': 0.3\n            },\n            {\n                'name': 'compliance_test',\n                'messages': [{'role': 'user', 'content': 'My email is test@example.com'}],\n                'weight': 0.2\n            }\n        ]\n\n        # Run test\n        results = await self._execute_load_test(\n            scenarios, concurrent_requests, total_requests, test_duration\n        )\n\n        return self._analyze_results(results)\n\n    async def _execute_load_test(self, scenarios, concurrent_requests, total_requests, duration):\n        \"\"\"Execute the load test.\"\"\"\n        results = []\n        semaphore = asyncio.Semaphore(concurrent_requests)\n        start_time = time.time()\n\n        async def make_request(scenario):\n            async with semaphore:\n                request_start = time.time()\n\n                try:\n                    response = await self.client.chat.completions.create(\n                        model=\"gpt-3.5-turbo\",\n                        messages=scenario['messages'],\n                        max_tokens=100\n                    )\n\n                    request_end = time.time()\n\n                    return {\n                        'scenario': scenario['name'],\n                        'success': True,\n                        'duration': request_end - request_start,\n                        'tokens': response.usage.total_tokens,\n                        'timestamp': request_start\n                    }\n\n                except Exception as e:\n                    request_end = time.time()\n\n                    return {\n                        'scenario': scenario['name'],\n                        'success': False,\n                        'duration': request_end - request_start,\n                        'error': str(e),\n                        'timestamp': request_start\n                    }\n\n        # Generate requests based on weights\n        tasks = []\n        for _ in range(total_requests):\n            scenario = self._select_weighted_scenario(scenarios)\n            task = asyncio.create_task(make_request(scenario))\n            tasks.append(task)\n\n            # Stop if duration exceeded\n            if time.time() - start_time &gt; duration:\n                break\n\n        # Wait for all tasks\n        results = await asyncio.gather(*tasks, return_exceptions=True)\n\n        # Filter out exceptions\n        return [r for r in results if isinstance(r, dict)]\n\n    def _select_weighted_scenario(self, scenarios):\n        \"\"\"Select scenario based on weights.\"\"\"\n        total_weight = sum(s['weight'] for s in scenarios)\n        r = random.uniform(0, total_weight)\n\n        current_weight = 0\n        for scenario in scenarios:\n            current_weight += scenario['weight']\n            if r &lt;= current_weight:\n                return scenario\n\n        return scenarios[0]\n\n    def _analyze_results(self, results: List[Dict]) -&gt; Dict:\n        \"\"\"Analyze test results.\"\"\"\n        if not results:\n            return {'error': 'No results to analyze'}\n\n        # Overall statistics\n        successful_requests = [r for r in results if r['success']]\n        failed_requests = [r for r in results if not r['success']]\n\n        durations = [r['duration'] for r in successful_requests]\n        tokens = [r['tokens'] for r in successful_requests if 'tokens' in r]\n\n        # Calculate statistics\n        duration_stats = self._calculate_stats(durations) if durations else {}\n\n        # Per-scenario analysis\n        scenario_stats = {}\n        for scenario_name in set(r['scenario'] for r in results):\n            scenario_results = [r for r in results if r['scenario'] == scenario_name]\n            scenario_successful = [r for r in scenario_results if r['success']]\n            scenario_durations = [r['duration'] for r in scenario_successful]\n\n            scenario_stats[scenario_name] = {\n                'total_requests': len(scenario_results),\n                'successful_requests': len(scenario_successful),\n                'success_rate': len(scenario_successful) / len(scenario_results) * 100,\n                'avg_duration_ms': int(statistics.mean(scenario_durations) * 1000) if scenario_durations else 0,\n                'median_duration_ms': int(statistics.median(scenario_durations) * 1000) if scenario_durations else 0\n            }\n\n        return {\n            'summary': {\n                'total_requests': len(results),\n                'successful_requests': len(successful_requests),\n                'failed_requests': len(failed_requests),\n                'success_rate_percent': len(successful_requests) / len(results) * 100,\n                'avg_response_time_ms': int(duration_stats.get('mean', 0) * 1000),\n                'median_response_time_ms': int(duration_stats.get('median', 0) * 1000),\n                'p95_response_time_ms': int(duration_stats.get('p95', 0) * 1000),\n                'p99_response_time_ms': int(duration_stats.get('p99', 0) * 1000),\n                'total_tokens': sum(tokens),\n                'avg_tokens_per_request': sum(tokens) // len(tokens) if tokens else 0\n            },\n            'scenario_breakdown': scenario_stats,\n            'error_analysis': self._analyze_errors(failed_requests)\n        }\n\n    def _calculate_stats(self, values: List[float]) -&gt; Dict:\n        \"\"\"Calculate statistical metrics.\"\"\"\n        if not values:\n            return {}\n\n        sorted_values = sorted(values)\n        n = len(sorted_values)\n\n        return {\n            'mean': statistics.mean(values),\n            'median': statistics.median(values),\n            'p95': sorted_values[int(n * 0.95)] if n &gt; 0 else 0,\n            'p99': sorted_values[int(n * 0.99)] if n &gt; 0 else 0,\n            'min': min(values),\n            'max': max(values)\n        }\n\n    def _analyze_errors(self, failed_requests: List[Dict]) -&gt; Dict:\n        \"\"\"Analyze error patterns.\"\"\"\n        error_counts = {}\n        for request in failed_requests:\n            error = request.get('error', 'Unknown error')\n            error_counts[error] = error_counts.get(error, 0) + 1\n\n        return {\n            'total_errors': len(failed_requests),\n            'error_breakdown': error_counts,\n            'most_common_error': max(error_counts.items(), key=lambda x: x[1])[0] if error_counts else None\n        }\n\n# Usage\nasync def run_performance_test():\n    \"\"\"Run performance test suite.\"\"\"\n    client = SentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    tester = PerformanceTester(client)\n\n    # Run load test\n    results = await tester.run_load_test(\n        concurrent_requests=20,\n        total_requests=200,\n        test_duration=120\n    )\n\n    print(\"Performance Test Results:\")\n    print(f\"Success Rate: {results['summary']['success_rate_percent']:.1f}%\")\n    print(f\"Average Response Time: {results['summary']['avg_response_time_ms']}ms\")\n    print(f\"P95 Response Time: {results['summary']['p95_response_time_ms']}ms\")\n    print(f\"Requests per Second: {results['summary']['total_requests'] / 120:.1f}\")\n\n# Run with: asyncio.run(run_performance_test())\n</code></pre>"},{"location":"guides/performance/#performance-optimization-checklist","title":"Performance Optimization Checklist","text":""},{"location":"guides/performance/#configuration-optimization","title":"Configuration Optimization \u2705","text":"<ul> <li> Connection pooling configured for high throughput</li> <li> Appropriate timeout values set</li> <li> Caching enabled and properly sized</li> <li> Compression enabled for large payloads</li> </ul>"},{"location":"guides/performance/#detection-optimization","title":"Detection Optimization \u2705","text":"<ul> <li> Local-first detection for speed</li> <li> Pattern caching enabled</li> <li> Unnecessary patterns disabled</li> <li> Detection sensitivity tuned for use case</li> </ul>"},{"location":"guides/performance/#application-architecture","title":"Application Architecture \u2705","text":"<ul> <li> Async clients used for high concurrency</li> <li> Request batching implemented where applicable</li> <li> Load balancing across multiple instances</li> <li> Circuit breakers for resilience</li> </ul>"},{"location":"guides/performance/#monitoring-and-alerting","title":"Monitoring and Alerting \u2705","text":"<ul> <li> Performance metrics collected</li> <li> Real-time monitoring dashboard</li> <li> Alerting for performance degradation</li> <li> Regular performance testing</li> </ul>"},{"location":"guides/performance/#resource-management","title":"Resource Management \u2705","text":"<ul> <li> Memory usage optimized</li> <li> Connection pooling sized appropriately</li> <li> Garbage collection tuned</li> <li> Resource cleanup implemented</li> </ul> <p>Following these optimization techniques should significantly improve your DeepSentinel application's performance while maintaining compliance coverage and reliability.</p> <p>Next Guide: Migration Guide \u2192</p>"},{"location":"reference/","title":"API Reference","text":"<p>Complete API documentation for the DeepSentinel Python SDK, automatically generated from source code docstrings.</p>"},{"location":"reference/#core-components","title":"Core Components","text":""},{"location":"reference/#sentinelclient","title":"SentinelClient","text":"<p>The main client class for interacting with LLM providers through compliance middleware.</p>"},{"location":"reference/#configuration","title":"Configuration","text":"<p>Configuration classes for setting up compliance policies, provider settings, and SDK behavior.</p>"},{"location":"reference/#types-models","title":"Types &amp; Models","text":"<p>Data models and type definitions used throughout the SDK.</p>"},{"location":"reference/#exceptions","title":"Exceptions","text":"<p>Exception hierarchy for handling various error conditions.</p>"},{"location":"reference/#interfaces","title":"Interfaces","text":"<p>Interface definitions for different LLM operations (chat, completions, embeddings, etc.).</p>"},{"location":"reference/#provider-system","title":"Provider System","text":""},{"location":"reference/#provider-registry","title":"Provider Registry","text":"<p>Central registry for managing multiple LLM provider connections.</p>"},{"location":"reference/#openai-provider","title":"OpenAI Provider","text":"<p>OpenAI-specific provider adapter with full API compatibility.</p>"},{"location":"reference/#anthropic-provider","title":"Anthropic Provider","text":"<p>Anthropic Claude provider adapter for accessing Claude models.</p>"},{"location":"reference/#base-provider","title":"Base Provider","text":"<p>Base provider interface and common provider functionality.</p>"},{"location":"reference/#compliance-system","title":"Compliance System","text":""},{"location":"reference/#compliance-engine","title":"Compliance Engine","text":"<p>Core compliance checking and policy enforcement system.</p>"},{"location":"reference/#compliance-policies","title":"Compliance Policies","text":"<p>Policy management for defining compliance rules and actions.</p>"},{"location":"reference/#compliance-interceptor","title":"Compliance Interceptor","text":"<p>Request/response interceptor for applying compliance checks.</p>"},{"location":"reference/#detection-engines","title":"Detection Engines","text":"<p>Specialized detection engines for PII, PHI, PCI, and custom patterns.</p>"},{"location":"reference/#supporting-components","title":"Supporting Components","text":""},{"location":"reference/#audit-system","title":"Audit System","text":"<p>Comprehensive audit logging and compliance tracking.</p>"},{"location":"reference/#caching","title":"Caching","text":"<p>Performance optimization through intelligent caching of compliance decisions.</p>"},{"location":"reference/#metrics","title":"Metrics","text":"<p>Performance and compliance metrics collection and reporting.</p>"},{"location":"reference/#middleware","title":"Middleware","text":"<p>Core middleware infrastructure for request/response processing.</p>"},{"location":"reference/#api-client","title":"API Client","text":"<p>HTTP client for communicating with DeepSentinel cloud services.</p>"},{"location":"reference/#module-index","title":"Module Index","text":"<p>All SDK modules are documented with their public APIs, including classes, functions, and exceptions:</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>deepsentinel</li> <li>client</li> <li>config</li> <li>exceptions</li> <li>interfaces</li> <li>types</li> <li>providers<ul> <li>openai</li> <li>anthropic</li> <li>registry</li> </ul> </li> <li>compliance<ul> <li>engine</li> <li>policies</li> <li>interceptor</li> <li>detection</li> </ul> </li> <li>audit</li> <li>cache</li> <li>metrics</li> <li>middleware</li> <li>api</li> </ul>"},{"location":"reference/api/","title":"deepsentinel.api","text":""},{"location":"reference/api/#deepsentinel.api","title":"api","text":"<p>API client for DeepSentinel compliance services.</p> <p>This package provides client interfaces for interacting with DeepSentinel's compliance, audit, and API services.</p>"},{"location":"reference/api/#deepsentinel.api-classes","title":"Classes","text":""},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient","title":"DeepSentinelAPIClient","text":"<pre><code>DeepSentinelAPIClient(config)\n</code></pre> <p>Main API client for DeepSentinel compliance services.</p> <p>This class handles authentication, request/response management, rate limiting, and communication with DeepSentinel's API endpoints.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>logger</code> <p>Structured logger</p> <code>base_url</code> <p>Base URL for API requests</p> <code>session</code> <p>Aiohttp client session</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient-functions","title":"Functions","text":""},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize client session.</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close client session.</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.request","title":"request  <code>async</code>","text":"<pre><code>request(\n    method, path, data=None, params=None, headers=None, timeout=None, retry_count=0\n)\n</code></pre> <p>Make an API request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Additional headers</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>Request timeout</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>Current retry count</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limit is exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code>DeepSentinelError</code> <p>For other API errors</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.get","title":"get  <code>async</code>","text":"<pre><code>get(path, params=None, **kwargs)\n</code></pre> <p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.post","title":"post  <code>async</code>","text":"<pre><code>post(path, data=None, **kwargs)\n</code></pre> <p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.put","title":"put  <code>async</code>","text":"<pre><code>put(path, data=None, **kwargs)\n</code></pre> <p>Make a PUT request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(path, **kwargs)\n</code></pre> <p>Make a DELETE request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.verify_credentials","title":"verify_credentials  <code>async</code>","text":"<pre><code>verify_credentials()\n</code></pre> <p>Verify API credentials.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if credentials are valid, False otherwise</p>"},{"location":"reference/api/#deepsentinel.api.DeepSentinelAPIClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI","title":"ComplianceAPI","text":"<pre><code>ComplianceAPI(client)\n</code></pre> <p>Compliance API client for DeepSentinel services.</p> <p>This class provides specialized methods for compliance validation, policy management, and content scanning services.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI-functions","title":"Functions","text":""},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.validate_text","title":"validate_text  <code>async</code>","text":"<pre><code>validate_text(text, policy_ids=None, context=None)\n</code></pre> <p>Validate text content against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to validate</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.scan_for_sensitive_data","title":"scan_for_sensitive_data  <code>async</code>","text":"<pre><code>scan_for_sensitive_data(\n    content, content_type=\"text/plain\", sensitivity=\"medium\", types=None\n)\n</code></pre> <p>Scan content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to scan</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>sensitivity</code> <code>str</code> <p>Scanning sensitivity (low, medium, high)</p> <code>'medium'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to scan for</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Scanning results</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.redact_sensitive_data","title":"redact_sensitive_data  <code>async</code>","text":"<pre><code>redact_sensitive_data(\n    content, content_type=\"text/plain\", types=None, replacement=\"[REDACTED]\"\n)\n</code></pre> <p>Redact sensitive data from content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to redact</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to redact</p> <code>None</code> <code>replacement</code> <code>str</code> <p>Replacement string for redacted content</p> <code>'[REDACTED]'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redaction results with redacted content</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.validate_request","title":"validate_request  <code>async</code>","text":"<pre><code>validate_request(request_data, request_type, policy_ids=None)\n</code></pre> <p>Validate a request against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data to validate</p> required <code>request_type</code> <code>str</code> <p>Type of request (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.validate_response","title":"validate_response  <code>async</code>","text":"<pre><code>validate_response(response_data, request_data, response_type, policy_ids=None)\n</code></pre> <p>Validate a response against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data to validate</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Original request data</p> required <code>response_type</code> <code>str</code> <p>Type of response (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.get_policies","title":"get_policies  <code>async</code>","text":"<pre><code>get_policies(active_only=True)\n</code></pre> <p>Get available compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>active_only</code> <code>bool</code> <p>Only return active policies</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of available policies</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.get_policy","title":"get_policy  <code>async</code>","text":"<pre><code>get_policy(policy_id)\n</code></pre> <p>Get details for a specific compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Policy details</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.create_custom_policy","title":"create_custom_policy  <code>async</code>","text":"<pre><code>create_custom_policy(policy_data)\n</code></pre> <p>Create a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_data</code> <code>Dict[str, Any]</code> <p>Policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created policy details</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.update_custom_policy","title":"update_custom_policy  <code>async</code>","text":"<pre><code>update_custom_policy(policy_id, policy_data)\n</code></pre> <p>Update a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to update</p> required <code>policy_data</code> <code>Dict[str, Any]</code> <p>Updated policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated policy details</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.delete_custom_policy","title":"delete_custom_policy  <code>async</code>","text":"<pre><code>delete_custom_policy(policy_id)\n</code></pre> <p>Delete a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to delete</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion result</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.get_detection_patterns","title":"get_detection_patterns  <code>async</code>","text":"<pre><code>get_detection_patterns(pattern_type=None)\n</code></pre> <p>Get available detection patterns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_type</code> <code>Optional[str]</code> <p>Optional type of patterns to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of detection patterns</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.create_custom_pattern","title":"create_custom_pattern  <code>async</code>","text":"<pre><code>create_custom_pattern(pattern_data)\n</code></pre> <p>Create a custom detection pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_data</code> <code>Dict[str, Any]</code> <p>Pattern configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created pattern details</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.get_compliance_report","title":"get_compliance_report  <code>async</code>","text":"<pre><code>get_compliance_report(start_date, end_date, report_type='summary')\n</code></pre> <p>Get a compliance report for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Start date in ISO format</p> required <code>end_date</code> <code>str</code> <p>End date in ISO format</p> required <code>report_type</code> <code>str</code> <p>Type of report (summary, detailed)</p> <code>'summary'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance report data</p>"},{"location":"reference/api/#deepsentinel.api.ComplianceAPI.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check compliance API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI","title":"AuditAPI","text":"<pre><code>AuditAPI(client)\n</code></pre> <p>Audit API client for DeepSentinel services.</p> <p>This class provides specialized methods for managing audit logs, tracking events, and retrieving compliance audit trails.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required"},{"location":"reference/api/#deepsentinel.api.AuditAPI-functions","title":"Functions","text":""},{"location":"reference/api/#deepsentinel.api.AuditAPI.log_event","title":"log_event  <code>async</code>","text":"<pre><code>log_event(event_data, sync=False)\n</code></pre> <p>Log an audit event to the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>event_data</code> <code>Dict[str, Any]</code> <p>Audit event data</p> required <code>sync</code> <code>bool</code> <p>Whether to wait for log confirmation</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Log confirmation or acknowledgment</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.log_batch_events","title":"log_batch_events  <code>async</code>","text":"<pre><code>log_batch_events(events)\n</code></pre> <p>Log multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict[str, Any]]</code> <p>List of audit event data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Batch log confirmation</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(\n    start_time=None,\n    end_time=None,\n    user_id=None,\n    session_id=None,\n    event_types=None,\n    limit=100,\n    offset=0,\n    sort=\"timestamp:desc\",\n)\n</code></pre> <p>Get audit events filtered by criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Filter by user ID</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Filter by session ID</p> <code>None</code> <code>event_types</code> <code>Optional[List[str]]</code> <p>Filter by event types</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <code>sort</code> <code>str</code> <p>Sorting field and direction</p> <code>'timestamp:desc'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Filtered audit events</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_event","title":"get_event  <code>async</code>","text":"<pre><code>get_event(event_id)\n</code></pre> <p>Get details for a specific audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>str</code> <p>ID of the audit event</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit event details</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.search_events","title":"search_events  <code>async</code>","text":"<pre><code>search_events(query, limit=100, offset=0)\n</code></pre> <p>Search audit events with a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Search query string</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_user_activity","title":"get_user_activity  <code>async</code>","text":"<pre><code>get_user_activity(user_id, limit=100)\n</code></pre> <p>Get activity history for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>User activity history</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_session_activity","title":"get_session_activity  <code>async</code>","text":"<pre><code>get_session_activity(session_id)\n</code></pre> <p>Get activity history for a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Session activity history</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_audit_trail_summary","title":"get_audit_trail_summary  <code>async</code>","text":"<pre><code>get_audit_trail_summary(start_time=None, end_time=None)\n</code></pre> <p>Get summary statistics for the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit trail summary statistics</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.export_audit_logs","title":"export_audit_logs  <code>async</code>","text":"<pre><code>export_audit_logs(start_time, end_time, format='json', filters=None)\n</code></pre> <p>Export audit logs for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>ISO timestamp for earliest events</p> required <code>end_time</code> <code>str</code> <p>ISO timestamp for latest events</p> required <code>format</code> <code>str</code> <p>Export format (json, csv)</p> <code>'json'</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional filters to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Export details including download URL</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_compliance_violations","title":"get_compliance_violations  <code>async</code>","text":"<pre><code>get_compliance_violations(\n    start_time=None, end_time=None, severity=None, limit=100, offset=0\n)\n</code></pre> <p>Get compliance violations from audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest violations</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest violations</p> <code>None</code> <code>severity</code> <code>Optional[str]</code> <p>Filter by severity level</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of violations to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance violations</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.get_audit_settings","title":"get_audit_settings  <code>async</code>","text":"<pre><code>get_audit_settings()\n</code></pre> <p>Get current audit settings and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit settings</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.update_audit_settings","title":"update_audit_settings  <code>async</code>","text":"<pre><code>update_audit_settings(settings)\n</code></pre> <p>Update audit settings and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Dict[str, Any]</code> <p>Updated settings data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated audit settings</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.purge_audit_logs","title":"purge_audit_logs  <code>async</code>","text":"<pre><code>purge_audit_logs(older_than, event_types=None, dry_run=True)\n</code></pre> <p>Purge audit logs older than specified time.</p> <p>Parameters:</p> Name Type Description Default <code>older_than</code> <code>str</code> <p>ISO timestamp or duration (e.g. \"90d\")</p> required <code>event_types</code> <code>Optional[List[str]]</code> <p>Optional event types to purge</p> <code>None</code> <code>dry_run</code> <code>bool</code> <p>Only simulate purge and return stats</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Purge operation results</p>"},{"location":"reference/api/#deepsentinel.api.AuditAPI.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check audit API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/api/#deepsentinel.api-modules","title":"Modules","text":""},{"location":"reference/api/#deepsentinel.api.audit","title":"audit","text":"<p>Audit API endpoints for DeepSentinel services.</p> <p>This module provides specialized API client functionality for audit logging, event tracking, and compliance audit trail management.</p>"},{"location":"reference/api/#deepsentinel.api.audit-classes","title":"Classes","text":""},{"location":"reference/api/#deepsentinel.api.audit.AuditAPI","title":"AuditAPI","text":"<pre><code>AuditAPI(client)\n</code></pre> <p>Audit API client for DeepSentinel services.</p> <p>This class provides specialized methods for managing audit logs, tracking events, and retrieving compliance audit trails.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event_data, sync=False)\n</code></pre> <p>Log an audit event to the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>event_data</code> <code>Dict[str, Any]</code> <p>Audit event data</p> required <code>sync</code> <code>bool</code> <p>Whether to wait for log confirmation</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Log confirmation or acknowledgment</p> <code></code> log_batch_events <code>async</code> \u00b6 <pre><code>log_batch_events(events)\n</code></pre> <p>Log multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict[str, Any]]</code> <p>List of audit event data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Batch log confirmation</p> <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(\n    start_time=None,\n    end_time=None,\n    user_id=None,\n    session_id=None,\n    event_types=None,\n    limit=100,\n    offset=0,\n    sort=\"timestamp:desc\",\n)\n</code></pre> <p>Get audit events filtered by criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Filter by user ID</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Filter by session ID</p> <code>None</code> <code>event_types</code> <code>Optional[List[str]]</code> <p>Filter by event types</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <code>sort</code> <code>str</code> <p>Sorting field and direction</p> <code>'timestamp:desc'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Filtered audit events</p> <code></code> get_event <code>async</code> \u00b6 <pre><code>get_event(event_id)\n</code></pre> <p>Get details for a specific audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>str</code> <p>ID of the audit event</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit event details</p> <code></code> search_events <code>async</code> \u00b6 <pre><code>search_events(query, limit=100, offset=0)\n</code></pre> <p>Search audit events with a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Search query string</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results</p> <code></code> get_user_activity <code>async</code> \u00b6 <pre><code>get_user_activity(user_id, limit=100)\n</code></pre> <p>Get activity history for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>User activity history</p> <code></code> get_session_activity <code>async</code> \u00b6 <pre><code>get_session_activity(session_id)\n</code></pre> <p>Get activity history for a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Session activity history</p> <code></code> get_audit_trail_summary <code>async</code> \u00b6 <pre><code>get_audit_trail_summary(start_time=None, end_time=None)\n</code></pre> <p>Get summary statistics for the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit trail summary statistics</p> <code></code> export_audit_logs <code>async</code> \u00b6 <pre><code>export_audit_logs(start_time, end_time, format='json', filters=None)\n</code></pre> <p>Export audit logs for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>ISO timestamp for earliest events</p> required <code>end_time</code> <code>str</code> <p>ISO timestamp for latest events</p> required <code>format</code> <code>str</code> <p>Export format (json, csv)</p> <code>'json'</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional filters to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Export details including download URL</p> <code></code> get_compliance_violations <code>async</code> \u00b6 <pre><code>get_compliance_violations(\n    start_time=None, end_time=None, severity=None, limit=100, offset=0\n)\n</code></pre> <p>Get compliance violations from audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest violations</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest violations</p> <code>None</code> <code>severity</code> <code>Optional[str]</code> <p>Filter by severity level</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of violations to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance violations</p> <code></code> get_audit_settings <code>async</code> \u00b6 <pre><code>get_audit_settings()\n</code></pre> <p>Get current audit settings and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit settings</p> <code></code> update_audit_settings <code>async</code> \u00b6 <pre><code>update_audit_settings(settings)\n</code></pre> <p>Update audit settings and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Dict[str, Any]</code> <p>Updated settings data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated audit settings</p> <code></code> purge_audit_logs <code>async</code> \u00b6 <pre><code>purge_audit_logs(older_than, event_types=None, dry_run=True)\n</code></pre> <p>Purge audit logs older than specified time.</p> <p>Parameters:</p> Name Type Description Default <code>older_than</code> <code>str</code> <p>ISO timestamp or duration (e.g. \"90d\")</p> required <code>event_types</code> <code>Optional[List[str]]</code> <p>Optional event types to purge</p> <code>None</code> <code>dry_run</code> <code>bool</code> <p>Only simulate purge and return stats</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Purge operation results</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check audit API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/api/#deepsentinel.api.client","title":"client","text":"<p>Main API client for DeepSentinel compliance services.</p> <p>This module provides the core HTTP client functionality for communicating with DeepSentinel's compliance API services.</p>"},{"location":"reference/api/#deepsentinel.api.client-classes","title":"Classes","text":""},{"location":"reference/api/#deepsentinel.api.client.DeepSentinelAPIClient","title":"DeepSentinelAPIClient","text":"<pre><code>DeepSentinelAPIClient(config)\n</code></pre> <p>Main API client for DeepSentinel compliance services.</p> <p>This class handles authentication, request/response management, rate limiting, and communication with DeepSentinel's API endpoints.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>logger</code> <p>Structured logger</p> <code>base_url</code> <p>Base URL for API requests</p> <code>session</code> <p>Aiohttp client session</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize client session.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close client session.</p> <code></code> request <code>async</code> \u00b6 <pre><code>request(\n    method, path, data=None, params=None, headers=None, timeout=None, retry_count=0\n)\n</code></pre> <p>Make an API request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Additional headers</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>Request timeout</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>Current retry count</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limit is exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code>DeepSentinelError</code> <p>For other API errors</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(path, params=None, **kwargs)\n</code></pre> <p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> post <code>async</code> \u00b6 <pre><code>post(path, data=None, **kwargs)\n</code></pre> <p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> put <code>async</code> \u00b6 <pre><code>put(path, data=None, **kwargs)\n</code></pre> <p>Make a PUT request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(path, **kwargs)\n</code></pre> <p>Make a DELETE request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> verify_credentials <code>async</code> \u00b6 <pre><code>verify_credentials()\n</code></pre> <p>Verify API credentials.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if credentials are valid, False otherwise</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/api/#deepsentinel.api.compliance","title":"compliance","text":"<p>Compliance API endpoints for DeepSentinel services.</p> <p>This module provides specialized API client functionality for compliance validation, policy management, and content scanning services.</p>"},{"location":"reference/api/#deepsentinel.api.compliance-classes","title":"Classes","text":""},{"location":"reference/api/#deepsentinel.api.compliance.ComplianceAPI","title":"ComplianceAPI","text":"<pre><code>ComplianceAPI(client)\n</code></pre> <p>Compliance API client for DeepSentinel services.</p> <p>This class provides specialized methods for compliance validation, policy management, and content scanning services.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> validate_text <code>async</code> \u00b6 <pre><code>validate_text(text, policy_ids=None, context=None)\n</code></pre> <p>Validate text content against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to validate</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> scan_for_sensitive_data <code>async</code> \u00b6 <pre><code>scan_for_sensitive_data(\n    content, content_type=\"text/plain\", sensitivity=\"medium\", types=None\n)\n</code></pre> <p>Scan content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to scan</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>sensitivity</code> <code>str</code> <p>Scanning sensitivity (low, medium, high)</p> <code>'medium'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to scan for</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Scanning results</p> <code></code> redact_sensitive_data <code>async</code> \u00b6 <pre><code>redact_sensitive_data(\n    content, content_type=\"text/plain\", types=None, replacement=\"[REDACTED]\"\n)\n</code></pre> <p>Redact sensitive data from content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to redact</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to redact</p> <code>None</code> <code>replacement</code> <code>str</code> <p>Replacement string for redacted content</p> <code>'[REDACTED]'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redaction results with redacted content</p> <code></code> validate_request <code>async</code> \u00b6 <pre><code>validate_request(request_data, request_type, policy_ids=None)\n</code></pre> <p>Validate a request against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data to validate</p> required <code>request_type</code> <code>str</code> <p>Type of request (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> validate_response <code>async</code> \u00b6 <pre><code>validate_response(response_data, request_data, response_type, policy_ids=None)\n</code></pre> <p>Validate a response against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data to validate</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Original request data</p> required <code>response_type</code> <code>str</code> <p>Type of response (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> get_policies <code>async</code> \u00b6 <pre><code>get_policies(active_only=True)\n</code></pre> <p>Get available compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>active_only</code> <code>bool</code> <p>Only return active policies</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of available policies</p> <code></code> get_policy <code>async</code> \u00b6 <pre><code>get_policy(policy_id)\n</code></pre> <p>Get details for a specific compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Policy details</p> <code></code> create_custom_policy <code>async</code> \u00b6 <pre><code>create_custom_policy(policy_data)\n</code></pre> <p>Create a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_data</code> <code>Dict[str, Any]</code> <p>Policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created policy details</p> <code></code> update_custom_policy <code>async</code> \u00b6 <pre><code>update_custom_policy(policy_id, policy_data)\n</code></pre> <p>Update a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to update</p> required <code>policy_data</code> <code>Dict[str, Any]</code> <p>Updated policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated policy details</p> <code></code> delete_custom_policy <code>async</code> \u00b6 <pre><code>delete_custom_policy(policy_id)\n</code></pre> <p>Delete a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to delete</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion result</p> <code></code> get_detection_patterns <code>async</code> \u00b6 <pre><code>get_detection_patterns(pattern_type=None)\n</code></pre> <p>Get available detection patterns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_type</code> <code>Optional[str]</code> <p>Optional type of patterns to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of detection patterns</p> <code></code> create_custom_pattern <code>async</code> \u00b6 <pre><code>create_custom_pattern(pattern_data)\n</code></pre> <p>Create a custom detection pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_data</code> <code>Dict[str, Any]</code> <p>Pattern configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created pattern details</p> <code></code> get_compliance_report <code>async</code> \u00b6 <pre><code>get_compliance_report(start_date, end_date, report_type='summary')\n</code></pre> <p>Get a compliance report for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Start date in ISO format</p> required <code>end_date</code> <code>str</code> <p>End date in ISO format</p> required <code>report_type</code> <code>str</code> <p>Type of report (summary, detailed)</p> <code>'summary'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance report data</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check compliance API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/audit/","title":"deepsentinel.audit","text":""},{"location":"reference/audit/#deepsentinel.audit","title":"audit","text":"<p>Audit logging and event tracking components.</p> <p>This module provides a comprehensive audit system for tracking operations, compliance checks, and performance metrics throughout the SDK.</p>"},{"location":"reference/audit/#deepsentinel.audit-classes","title":"Classes","text":""},{"location":"reference/audit/#deepsentinel.audit.AuditClient","title":"AuditClient","text":"<pre><code>AuditClient(\n    config,\n    storage_backend=None,\n    batch_size=100,\n    batch_interval_sec=5.0,\n    metrics_collector=None,\n)\n</code></pre> <p>Audit client for the DeepSentinel SDK.</p> <p>This class handles audit event logging, storage, batch processing, and performance metrics collection.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>storage</code> <p>Audit storage backend</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>batch_interval_sec</code> <p>Interval for batch processing in seconds</p> <code>pending_events</code> <code>List[AuditEvent]</code> <p>List of pending audit events</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>storage_backend</code> <code>Optional[AuditStorage]</code> <p>Custom storage backend (if not specified, one will be created based on the configuration)</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>100</code> <code>batch_interval_sec</code> <code>float</code> <p>Interval for batch processing in seconds</p> <code>5.0</code> <code>metrics_collector</code> <code>Optional[MetricsCollector]</code> <p>Optional metrics collector for performance tracking</p> <code>None</code>"},{"location":"reference/audit/#deepsentinel.audit.AuditClient-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.AuditClient.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the audit client.</p> <p>This sets up the storage backend and starts the batch processing task.</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.log_event","title":"log_event  <code>async</code>","text":"<pre><code>log_event(event)\n</code></pre> <p>Log an audit event.</p> <p>If batch processing is enabled, the event will be added to the batch. Otherwise, it will be stored immediately.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to log</p> required"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.log_events","title":"log_events  <code>async</code>","text":"<pre><code>log_events(events)\n</code></pre> <p>Log multiple audit events.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to log</p> required"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.get_performance_metrics","title":"get_performance_metrics","text":"<pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for the audit client.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Performance metrics including comprehensive stats</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.get_metrics_report","title":"get_metrics_report  <code>async</code>","text":"<pre><code>get_metrics_report()\n</code></pre> <p>Get a comprehensive metrics report including trends.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Comprehensive metrics report</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.log_audit_entry","title":"log_audit_entry  <code>async</code>","text":"<pre><code>log_audit_entry(entry)\n</code></pre> <p>Log an audit entry.</p> <p>This converts the entry to an appropriate audit event and logs it.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>AuditEntry</code> <p>Audit entry to log</p> required"},{"location":"reference/audit/#deepsentinel.audit.AuditClient.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the audit client.</p> <p>This stops the batch processing task and cleans up the storage backend.</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage","title":"AuditStorage","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for audit storage backends.</p> <p>This class defines the interface that all storage backends must implement for storing and retrieving audit events.</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.AuditStorage.initialize","title":"initialize  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the storage backend.</p> <p>This method should be called before using the storage backend. It should set up any necessary resources (e.g., connections, files).</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage.store_event","title":"store_event  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>store_event(event)\n</code></pre> <p>Store a single audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>The audit event to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage.store_events","title":"store_events  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage.get_events","title":"get_events  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditStorage.cleanup","title":"cleanup  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the storage backend.</p> <p>This method should be called when the storage backend is no longer needed. It should release any resources (e.g., connections, files).</p>"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage","title":"FileAuditStorage","text":"<pre><code>FileAuditStorage(\n    config,\n    log_dir=None,\n    file_format=\"jsonl\",\n    max_file_size_mb=10,\n    file_rotation_count=5,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>File-based storage backend for audit events.</p> <p>This class implements storage of audit events in local files, supporting both JSON and JSONL formats with rotation capabilities.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>log_dir</code> <p>Directory for audit log files</p> <code>file_format</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>max_file_size_mb</code> <p>Maximum file size before rotation</p> <code>file_rotation_count</code> <p>Number of files to keep during rotation</p> <code>current_file</code> <code>Optional[Path]</code> <p>Path to the current audit log file</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>log_dir</code> <code>Optional[str]</code> <p>Directory for audit log files (default: ./audit_logs)</p> <code>None</code> <code>file_format</code> <code>str</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>'jsonl'</code> <code>max_file_size_mb</code> <code>int</code> <p>Maximum file size before rotation (in MB)</p> <code>10</code> <code>file_rotation_count</code> <code>int</code> <p>Number of files to keep during rotation</p> <code>5</code>"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the file storage backend.</p>"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage.store_event","title":"store_event  <code>async</code>","text":"<pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the file.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage.store_events","title":"store_events  <code>async</code>","text":"<pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p>"},{"location":"reference/audit/#deepsentinel.audit.FileAuditStorage.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage","title":"APIAuditStorage","text":"<pre><code>APIAuditStorage(\n    config,\n    base_url,\n    api_key=None,\n    batch_size=50,\n    connection_timeout=10.0,\n    max_connections=10,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>API-based storage backend for audit events.</p> <p>This class implements storage of audit events via HTTP API calls, supporting connection pooling and batch processing.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>base_url</code> <p>Base URL for the audit API</p> <code>api_key</code> <p>API key for authentication</p> <code>session</code> <code>Optional[ClientSession]</code> <p>HTTP session for connection pooling</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>base_url</code> <code>str</code> <p>Base URL for the audit API</p> required <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>50</code> <code>connection_timeout</code> <code>float</code> <p>Timeout for API connections in seconds</p> <code>10.0</code> <code>max_connections</code> <code>int</code> <p>Maximum number of connections in the pool</p> <code>10</code>"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the API storage backend.</p>"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage.store_event","title":"store_event  <code>async</code>","text":"<pre><code>store_event(event)\n</code></pre> <p>Store a single audit event via API.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage.store_events","title":"store_events  <code>async</code>","text":"<pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch via API.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria via API.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p>"},{"location":"reference/audit/#deepsentinel.audit.APIAuditStorage.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage","title":"DatabaseAuditStorage","text":"<pre><code>DatabaseAuditStorage(config, **db_config)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>Database-based storage backend for audit events.</p> <p>This is a placeholder implementation. In a real implementation, this would use an async database client to store events in a database.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>**db_config</code> <code>Any</code> <p>Database-specific configuration</p> <code>{}</code>"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the database storage backend.</p>"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage.store_event","title":"store_event  <code>async</code>","text":"<pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the database.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage.store_events","title":"store_events  <code>async</code>","text":"<pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch in the database.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria from the database.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p>"},{"location":"reference/audit/#deepsentinel.audit.DatabaseAuditStorage.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditEvent","title":"AuditEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all audit events.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the event</p> <code>event_type</code> <code>AuditEventType</code> <p>Type of the audit event</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the event</p> <code>source</code> <code>str</code> <p>Source of the event (component, module)</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional event details</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional contextual metadata</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.AuditEvent.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert event to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the event</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditEvent.to_audit_entry","title":"to_audit_entry","text":"<pre><code>to_audit_entry()\n</code></pre> <p>Convert event to audit entry.</p> <p>Returns:</p> Type Description <code>AuditEntry</code> <p>AuditEntry representation of the event</p>"},{"location":"reference/audit/#deepsentinel.audit.AuditEventType","title":"AuditEventType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of audit event types.</p>"},{"location":"reference/audit/#deepsentinel.audit.ChatOperationEvent","title":"ChatOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for chat operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for the chat</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p>"},{"location":"reference/audit/#deepsentinel.audit.ChatOperationEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.ChatOperationEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.CompletionOperationEvent","title":"CompletionOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for text completion operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for completion</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p>"},{"location":"reference/audit/#deepsentinel.audit.CompletionOperationEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.CompletionOperationEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.ComplianceViolationEvent","title":"ComplianceViolationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> <code>violation_type</code> <code>str</code> <p>Type of violation</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> <code>action_taken</code> <code>str</code> <p>Action taken in response to the violation</p> <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details about the violation</p> <code>resource_id</code> <code>Optional[str]</code> <p>Identifier of the resource with violation</p>"},{"location":"reference/audit/#deepsentinel.audit.ComplianceViolationEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.ComplianceViolationEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.ConfigurationChangeEvent","title":"ConfigurationChangeEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for configuration changes.</p> <p>Attributes:</p> Name Type Description <code>config_section</code> <code>str</code> <p>Section of configuration being changed</p> <code>old_value</code> <code>Any</code> <p>Previous configuration value</p> <code>new_value</code> <code>Any</code> <p>New configuration value</p> <code>changed_by</code> <code>Optional[str]</code> <p>Identifier of who made the change</p>"},{"location":"reference/audit/#deepsentinel.audit.ConfigurationChangeEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.ConfigurationChangeEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.EmbeddingOperationEvent","title":"EmbeddingOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for embedding operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for embeddings</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p>"},{"location":"reference/audit/#deepsentinel.audit.EmbeddingOperationEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.EmbeddingOperationEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.OperationMetrics","title":"OperationMetrics","text":"<p>               Bases: <code>BaseModel</code></p> <p>Performance metrics for an operation.</p> <p>Attributes:</p> Name Type Description <code>total_duration_ms</code> <code>Optional[float]</code> <p>Total duration of the operation in milliseconds</p> <code>request_duration_ms</code> <code>Optional[float]</code> <p>Duration of the request phase in milliseconds</p> <code>response_duration_ms</code> <code>Optional[float]</code> <p>Duration of the response phase in milliseconds</p> <code>token_count</code> <code>Optional[int]</code> <p>Number of tokens used</p> <code>prompt_tokens</code> <code>Optional[int]</code> <p>Number of prompt tokens</p> <code>completion_tokens</code> <code>Optional[int]</code> <p>Number of completion tokens</p> <code>tpm</code> <code>Optional[float]</code> <p>Tokens per minute rate</p> <code>rpm</code> <code>Optional[float]</code> <p>Requests per minute rate</p>"},{"location":"reference/audit/#deepsentinel.audit.PerformanceMetricsEvent","title":"PerformanceMetricsEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for performance metrics.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> <code>model</code> <code>Optional[str]</code> <p>Model used for the operation</p> <code>provider</code> <code>Optional[str]</code> <p>Provider of the model</p> <code>component</code> <code>Optional[str]</code> <p>Component being measured</p>"},{"location":"reference/audit/#deepsentinel.audit.PerformanceMetricsEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.PerformanceMetricsEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.SystemErrorEvent","title":"SystemErrorEvent","text":"<pre><code>SystemErrorEvent(**data)\n</code></pre> <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for system errors.</p> <p>Attributes:</p> Name Type Description <code>error_type</code> <code>str</code> <p>Type of error</p> <code>error_message</code> <code>str</code> <p>Error message</p> <code>stack_trace</code> <code>Optional[str]</code> <p>Stack trace of the error</p> <code>component</code> <code>str</code> <p>Component where the error occurred</p>"},{"location":"reference/audit/#deepsentinel.audit.SystemErrorEvent-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.SystemErrorEvent.update_details","title":"update_details","text":"<pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.create_chat_request_event","title":"create_chat_request_event","text":"<pre><code>create_chat_request_event(\n    model, provider, request_data, user_id=None, session_id=None, metrics=None\n)\n</code></pre> <p>Create a chat request audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat request audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.create_chat_response_event","title":"create_chat_response_event","text":"<pre><code>create_chat_response_event(\n    model,\n    provider,\n    request_data,\n    response_data,\n    user_id=None,\n    session_id=None,\n    metrics=None,\n    request_id=None,\n)\n</code></pre> <p>Create a chat response audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <code>request_id</code> <code>Optional[str]</code> <p>Optional request identifier to link with request event</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat response audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.create_compliance_violation_event","title":"create_compliance_violation_event","text":"<pre><code>create_compliance_violation_event(\n    policy_name,\n    violation_type,\n    severity,\n    action_taken,\n    violation_details,\n    user_id=None,\n    session_id=None,\n    resource_id=None,\n)\n</code></pre> <p>Create a compliance violation audit event.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation</p> required <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> required <code>action_taken</code> <code>str</code> <p>Action taken in response</p> required <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details of the violation</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>resource_id</code> <code>Optional[str]</code> <p>Optional resource identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>ComplianceViolationEvent</code> <p>Compliance violation audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.create_performance_metrics_event","title":"create_performance_metrics_event","text":"<pre><code>create_performance_metrics_event(\n    operation_type,\n    metrics,\n    model=None,\n    provider=None,\n    component=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a performance metrics audit event.</p> <p>Parameters:</p> Name Type Description Default <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> required <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> required <code>model</code> <code>Optional[str]</code> <p>Optional model identifier</p> <code>None</code> <code>provider</code> <code>Optional[str]</code> <p>Optional provider name</p> <code>None</code> <code>component</code> <code>Optional[str]</code> <p>Optional component name</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>PerformanceMetricsEvent</code> <p>Performance metrics audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.create_system_error_event","title":"create_system_error_event","text":"<pre><code>create_system_error_event(\n    error_type,\n    error_message,\n    component,\n    stack_trace=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a system error audit event.</p> <p>Parameters:</p> Name Type Description Default <code>error_type</code> <code>str</code> <p>Type of error</p> required <code>error_message</code> <code>str</code> <p>Error message</p> required <code>component</code> <code>str</code> <p>Component where the error occurred</p> required <code>stack_trace</code> <code>Optional[str]</code> <p>Optional stack trace</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>SystemErrorEvent</code> <p>System error audit event</p>"},{"location":"reference/audit/#deepsentinel.audit-modules","title":"Modules","text":""},{"location":"reference/audit/#deepsentinel.audit.client","title":"client","text":"<p>Audit client for DeepSentinel SDK.</p> <p>This module implements the audit client that handles audit event logging, storage backends, batch processing, and performance metrics collection.</p>"},{"location":"reference/audit/#deepsentinel.audit.client-classes","title":"Classes","text":""},{"location":"reference/audit/#deepsentinel.audit.client.AuditStorage","title":"AuditStorage","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for audit storage backends.</p> <p>This class defines the interface that all storage backends must implement for storing and retrieving audit events.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the storage backend.</p> <p>This method should be called before using the storage backend. It should set up any necessary resources (e.g., connections, files).</p> <code></code> store_event <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>The audit event to store</p> required <code></code> store_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the storage backend.</p> <p>This method should be called when the storage backend is no longer needed. It should release any resources (e.g., connections, files).</p>"},{"location":"reference/audit/#deepsentinel.audit.client.FileAuditStorage","title":"FileAuditStorage","text":"<pre><code>FileAuditStorage(\n    config,\n    log_dir=None,\n    file_format=\"jsonl\",\n    max_file_size_mb=10,\n    file_rotation_count=5,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>File-based storage backend for audit events.</p> <p>This class implements storage of audit events in local files, supporting both JSON and JSONL formats with rotation capabilities.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>log_dir</code> <p>Directory for audit log files</p> <code>file_format</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>max_file_size_mb</code> <p>Maximum file size before rotation</p> <code>file_rotation_count</code> <p>Number of files to keep during rotation</p> <code>current_file</code> <code>Optional[Path]</code> <p>Path to the current audit log file</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>log_dir</code> <code>Optional[str]</code> <p>Directory for audit log files (default: ./audit_logs)</p> <code>None</code> <code>file_format</code> <code>str</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>'jsonl'</code> <code>max_file_size_mb</code> <code>int</code> <p>Maximum file size before rotation (in MB)</p> <code>10</code> <code>file_rotation_count</code> <code>int</code> <p>Number of files to keep during rotation</p> <code>5</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the file storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the file.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.client.APIAuditStorage","title":"APIAuditStorage","text":"<pre><code>APIAuditStorage(\n    config,\n    base_url,\n    api_key=None,\n    batch_size=50,\n    connection_timeout=10.0,\n    max_connections=10,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>API-based storage backend for audit events.</p> <p>This class implements storage of audit events via HTTP API calls, supporting connection pooling and batch processing.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>base_url</code> <p>Base URL for the audit API</p> <code>api_key</code> <p>API key for authentication</p> <code>session</code> <code>Optional[ClientSession]</code> <p>HTTP session for connection pooling</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>base_url</code> <code>str</code> <p>Base URL for the audit API</p> required <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>50</code> <code>connection_timeout</code> <code>float</code> <p>Timeout for API connections in seconds</p> <code>10.0</code> <code>max_connections</code> <code>int</code> <p>Maximum number of connections in the pool</p> <code>10</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the API storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event via API.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch via API.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria via API.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.client.DatabaseAuditStorage","title":"DatabaseAuditStorage","text":"<pre><code>DatabaseAuditStorage(config, **db_config)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>Database-based storage backend for audit events.</p> <p>This is a placeholder implementation. In a real implementation, this would use an async database client to store events in a database.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>**db_config</code> <code>Any</code> <p>Database-specific configuration</p> <code>{}</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the database storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the database.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch in the database.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria from the database.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/audit/#deepsentinel.audit.client.AuditClient","title":"AuditClient","text":"<pre><code>AuditClient(\n    config,\n    storage_backend=None,\n    batch_size=100,\n    batch_interval_sec=5.0,\n    metrics_collector=None,\n)\n</code></pre> <p>Audit client for the DeepSentinel SDK.</p> <p>This class handles audit event logging, storage, batch processing, and performance metrics collection.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>storage</code> <p>Audit storage backend</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>batch_interval_sec</code> <p>Interval for batch processing in seconds</p> <code>pending_events</code> <code>List[AuditEvent]</code> <p>List of pending audit events</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>storage_backend</code> <code>Optional[AuditStorage]</code> <p>Custom storage backend (if not specified, one will be created based on the configuration)</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>100</code> <code>batch_interval_sec</code> <code>float</code> <p>Interval for batch processing in seconds</p> <code>5.0</code> <code>metrics_collector</code> <code>Optional[MetricsCollector]</code> <p>Optional metrics collector for performance tracking</p> <code>None</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the audit client.</p> <p>This sets up the storage backend and starts the batch processing task.</p> <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event)\n</code></pre> <p>Log an audit event.</p> <p>If batch processing is enabled, the event will be added to the batch. Otherwise, it will be stored immediately.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to log</p> required <code></code> log_events <code>async</code> \u00b6 <pre><code>log_events(events)\n</code></pre> <p>Log multiple audit events.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to log</p> required <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for the audit client.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Performance metrics including comprehensive stats</p> <code></code> get_metrics_report <code>async</code> \u00b6 <pre><code>get_metrics_report()\n</code></pre> <p>Get a comprehensive metrics report including trends.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Comprehensive metrics report</p> <code></code> log_audit_entry <code>async</code> \u00b6 <pre><code>log_audit_entry(entry)\n</code></pre> <p>Log an audit entry.</p> <p>This converts the entry to an appropriate audit event and logs it.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>AuditEntry</code> <p>Audit entry to log</p> required <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the audit client.</p> <p>This stops the batch processing task and cleans up the storage backend.</p>"},{"location":"reference/audit/#deepsentinel.audit.client-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.events","title":"events","text":"<p>Audit event types and schemas for DeepSentinel SDK.</p> <p>This module defines comprehensive audit event types and schemas for tracking operations, compliance violations, and performance metrics.</p>"},{"location":"reference/audit/#deepsentinel.audit.events-classes","title":"Classes","text":""},{"location":"reference/audit/#deepsentinel.audit.events.AuditEventType","title":"AuditEventType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of audit event types.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.OperationMetrics","title":"OperationMetrics","text":"<p>               Bases: <code>BaseModel</code></p> <p>Performance metrics for an operation.</p> <p>Attributes:</p> Name Type Description <code>total_duration_ms</code> <code>Optional[float]</code> <p>Total duration of the operation in milliseconds</p> <code>request_duration_ms</code> <code>Optional[float]</code> <p>Duration of the request phase in milliseconds</p> <code>response_duration_ms</code> <code>Optional[float]</code> <p>Duration of the response phase in milliseconds</p> <code>token_count</code> <code>Optional[int]</code> <p>Number of tokens used</p> <code>prompt_tokens</code> <code>Optional[int]</code> <p>Number of prompt tokens</p> <code>completion_tokens</code> <code>Optional[int]</code> <p>Number of completion tokens</p> <code>tpm</code> <code>Optional[float]</code> <p>Tokens per minute rate</p> <code>rpm</code> <code>Optional[float]</code> <p>Requests per minute rate</p>"},{"location":"reference/audit/#deepsentinel.audit.events.AuditEvent","title":"AuditEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all audit events.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the event</p> <code>event_type</code> <code>AuditEventType</code> <p>Type of the audit event</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the event</p> <code>source</code> <code>str</code> <p>Source of the event (component, module)</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional event details</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional contextual metadata</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert event to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the event</p> <code></code> to_audit_entry \u00b6 <pre><code>to_audit_entry()\n</code></pre> <p>Convert event to audit entry.</p> <p>Returns:</p> Type Description <code>AuditEntry</code> <p>AuditEntry representation of the event</p>"},{"location":"reference/audit/#deepsentinel.audit.events.ChatOperationEvent","title":"ChatOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for chat operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for the chat</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.CompletionOperationEvent","title":"CompletionOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for text completion operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for completion</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.EmbeddingOperationEvent","title":"EmbeddingOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for embedding operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for embeddings</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.ComplianceViolationEvent","title":"ComplianceViolationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> <code>violation_type</code> <code>str</code> <p>Type of violation</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> <code>action_taken</code> <code>str</code> <p>Action taken in response to the violation</p> <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details about the violation</p> <code>resource_id</code> <code>Optional[str]</code> <p>Identifier of the resource with violation</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.PerformanceMetricsEvent","title":"PerformanceMetricsEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for performance metrics.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> <code>model</code> <code>Optional[str]</code> <p>Model used for the operation</p> <code>provider</code> <code>Optional[str]</code> <p>Provider of the model</p> <code>component</code> <code>Optional[str]</code> <p>Component being measured</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.SystemErrorEvent","title":"SystemErrorEvent","text":"<pre><code>SystemErrorEvent(**data)\n</code></pre> <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for system errors.</p> <p>Attributes:</p> Name Type Description <code>error_type</code> <code>str</code> <p>Type of error</p> <code>error_message</code> <code>str</code> <p>Error message</p> <code>stack_trace</code> <code>Optional[str]</code> <p>Stack trace of the error</p> <code>component</code> <code>str</code> <p>Component where the error occurred</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events.ConfigurationChangeEvent","title":"ConfigurationChangeEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for configuration changes.</p> <p>Attributes:</p> Name Type Description <code>config_section</code> <code>str</code> <p>Section of configuration being changed</p> <code>old_value</code> <code>Any</code> <p>Previous configuration value</p> <code>new_value</code> <code>Any</code> <p>New configuration value</p> <code>changed_by</code> <code>Optional[str]</code> <p>Identifier of who made the change</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/audit/#deepsentinel.audit.events-functions","title":"Functions","text":""},{"location":"reference/audit/#deepsentinel.audit.events.create_chat_request_event","title":"create_chat_request_event","text":"<pre><code>create_chat_request_event(\n    model, provider, request_data, user_id=None, session_id=None, metrics=None\n)\n</code></pre> <p>Create a chat request audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat request audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.events.create_chat_response_event","title":"create_chat_response_event","text":"<pre><code>create_chat_response_event(\n    model,\n    provider,\n    request_data,\n    response_data,\n    user_id=None,\n    session_id=None,\n    metrics=None,\n    request_id=None,\n)\n</code></pre> <p>Create a chat response audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <code>request_id</code> <code>Optional[str]</code> <p>Optional request identifier to link with request event</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat response audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.events.create_compliance_violation_event","title":"create_compliance_violation_event","text":"<pre><code>create_compliance_violation_event(\n    policy_name,\n    violation_type,\n    severity,\n    action_taken,\n    violation_details,\n    user_id=None,\n    session_id=None,\n    resource_id=None,\n)\n</code></pre> <p>Create a compliance violation audit event.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation</p> required <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> required <code>action_taken</code> <code>str</code> <p>Action taken in response</p> required <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details of the violation</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>resource_id</code> <code>Optional[str]</code> <p>Optional resource identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>ComplianceViolationEvent</code> <p>Compliance violation audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.events.create_performance_metrics_event","title":"create_performance_metrics_event","text":"<pre><code>create_performance_metrics_event(\n    operation_type,\n    metrics,\n    model=None,\n    provider=None,\n    component=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a performance metrics audit event.</p> <p>Parameters:</p> Name Type Description Default <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> required <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> required <code>model</code> <code>Optional[str]</code> <p>Optional model identifier</p> <code>None</code> <code>provider</code> <code>Optional[str]</code> <p>Optional provider name</p> <code>None</code> <code>component</code> <code>Optional[str]</code> <p>Optional component name</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>PerformanceMetricsEvent</code> <p>Performance metrics audit event</p>"},{"location":"reference/audit/#deepsentinel.audit.events.create_system_error_event","title":"create_system_error_event","text":"<pre><code>create_system_error_event(\n    error_type,\n    error_message,\n    component,\n    stack_trace=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a system error audit event.</p> <p>Parameters:</p> Name Type Description Default <code>error_type</code> <code>str</code> <p>Type of error</p> required <code>error_message</code> <code>str</code> <p>Error message</p> required <code>component</code> <code>str</code> <p>Component where the error occurred</p> required <code>stack_trace</code> <code>Optional[str]</code> <p>Optional stack trace</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>SystemErrorEvent</code> <p>System error audit event</p>"},{"location":"reference/cache/","title":"deepsentinel.cache","text":""},{"location":"reference/cache/#deepsentinel.cache","title":"cache","text":"<p>DeepSentinel SDK caching system.</p> <p>This module provides response caching capabilities with LRU eviction and TTL-based expiration for improved performance.</p>"},{"location":"reference/cache/#deepsentinel.cache-classes","title":"Classes","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(max_size=1000, default_ttl=3600, cleanup_interval=300)\n</code></pre> <p>LRU cache client with TTL support and performance tracking.</p> <p>This cache implementation provides: - LRU (Least Recently Used) eviction policy - TTL (Time To Live) based expiration - Performance metrics tracking - Async/await support - Key generation based on request parameters</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <p>Maximum number of entries in the cache</p> <code>default_ttl</code> <p>Default TTL for cache entries</p> <code>stats</code> <p>Cache performance statistics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>Maximum number of entries to store</p> <code>1000</code> <code>default_ttl</code> <code>int</code> <p>Default TTL in seconds</p> <code>3600</code> <code>cleanup_interval</code> <code>int</code> <p>Interval for cleanup tasks in seconds</p> <code>300</code>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient-functions","title":"Functions","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheClient.generate_cache_key","title":"generate_cache_key","text":"<pre><code>generate_cache_key(request_data, provider_name='', operation='')\n</code></pre> <p>Generate a cache key from request parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request parameters</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider</p> <code>''</code> <code>operation</code> <code>str</code> <p>Operation being cached</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>Cache key string</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.get","title":"get  <code>async</code>","text":"<pre><code>get(key, default=None)\n</code></pre> <p>Get a value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>default</code> <code>Any</code> <p>Default value if key not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[Optional[Any], bool]</code> <p>Tuple of (value, cache_hit_boolean)</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.set","title":"set  <code>async</code>","text":"<pre><code>set(key, value, ttl=None, metadata=None)\n</code></pre> <p>Set a value in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>value</code> <code>Any</code> <p>Value to cache</p> required <code>ttl</code> <code>Optional[int]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(key)\n</code></pre> <p>Delete a key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key existed and was deleted, False otherwise</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.clear","title":"clear  <code>async</code>","text":"<pre><code>clear()\n</code></pre> <p>Clear all entries from the cache.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.size","title":"size  <code>async</code>","text":"<pre><code>size()\n</code></pre> <p>Get the current size of the cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of entries in the cache</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.get_stats","title":"get_stats  <code>async</code>","text":"<pre><code>get_stats()\n</code></pre> <p>Get cache performance statistics.</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats object with performance metrics</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.get_info","title":"get_info  <code>async</code>","text":"<pre><code>get_info()\n</code></pre> <p>Get detailed cache information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing cache information</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on the cache.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the cache client and cleanup resources.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheEntry","title":"CacheEntry","text":"<pre><code>CacheEntry(value, ttl=3600, metadata=None)\n</code></pre> <p>Represents a cached entry with TTL and metadata.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The cached value</p> <code>created_at</code> <p>Timestamp when the entry was created</p> <code>ttl</code> <p>Time-to-live in seconds</p> <code>access_count</code> <p>Number of times this entry has been accessed</p> <code>last_accessed</code> <p>Timestamp of last access</p> <code>metadata</code> <p>Additional metadata about the cached entry</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to cache</p> required <code>ttl</code> <code>int</code> <p>Time-to-live in seconds</p> <code>3600</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code>"},{"location":"reference/cache/#deepsentinel.cache.CacheEntry-attributes","title":"Attributes","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheEntry.is_expired","title":"is_expired  <code>property</code>","text":"<pre><code>is_expired\n</code></pre> <p>Check if the cache entry has expired.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheEntry.age","title":"age  <code>property</code>","text":"<pre><code>age\n</code></pre> <p>Get the age of the cache entry in seconds.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheEntry-functions","title":"Functions","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheEntry.access","title":"access","text":"<pre><code>access()\n</code></pre> <p>Access the cached value and update access statistics.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The cached value</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheEntry.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert cache entry to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the cache entry</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheStats","title":"CacheStats","text":"<pre><code>CacheStats()\n</code></pre> <p>Cache performance statistics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <p>Number of cache hits</p> <code>misses</code> <p>Number of cache misses</p> <code>evictions</code> <p>Number of cache evictions</p> <code>expired</code> <p>Number of expired entries removed</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheStats-attributes","title":"Attributes","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheStats.hit_rate","title":"hit_rate  <code>property</code>","text":"<pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheStats.miss_rate","title":"miss_rate  <code>property</code>","text":"<pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p>"},{"location":"reference/cache/#deepsentinel.cache.CacheStats-functions","title":"Functions","text":""},{"location":"reference/cache/#deepsentinel.cache.CacheStats.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert stats to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of cache statistics</p>"},{"location":"reference/cache/#deepsentinel.cache-modules","title":"Modules","text":""},{"location":"reference/cache/#deepsentinel.cache.client","title":"client","text":"<p>Response caching client with LRU eviction and TTL support.</p> <p>This module provides a comprehensive caching system with LRU eviction, TTL-based expiration, and performance metrics tracking.</p>"},{"location":"reference/cache/#deepsentinel.cache.client-classes","title":"Classes","text":""},{"location":"reference/cache/#deepsentinel.cache.client.CacheEntry","title":"CacheEntry","text":"<pre><code>CacheEntry(value, ttl=3600, metadata=None)\n</code></pre> <p>Represents a cached entry with TTL and metadata.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The cached value</p> <code>created_at</code> <p>Timestamp when the entry was created</p> <code>ttl</code> <p>Time-to-live in seconds</p> <code>access_count</code> <p>Number of times this entry has been accessed</p> <code>last_accessed</code> <p>Timestamp of last access</p> <code>metadata</code> <p>Additional metadata about the cached entry</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to cache</p> required <code>ttl</code> <code>int</code> <p>Time-to-live in seconds</p> <code>3600</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> Attributes\u00b6 <code></code> is_expired <code>property</code> \u00b6 <pre><code>is_expired\n</code></pre> <p>Check if the cache entry has expired.</p> <code></code> age <code>property</code> \u00b6 <pre><code>age\n</code></pre> <p>Get the age of the cache entry in seconds.</p> Functions\u00b6 <code></code> access \u00b6 <pre><code>access()\n</code></pre> <p>Access the cached value and update access statistics.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The cached value</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert cache entry to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the cache entry</p>"},{"location":"reference/cache/#deepsentinel.cache.client.CacheStats","title":"CacheStats","text":"<pre><code>CacheStats()\n</code></pre> <p>Cache performance statistics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <p>Number of cache hits</p> <code>misses</code> <p>Number of cache misses</p> <code>evictions</code> <p>Number of cache evictions</p> <code>expired</code> <p>Number of expired entries removed</p> Attributes\u00b6 <code></code> hit_rate <code>property</code> \u00b6 <pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p> <code></code> miss_rate <code>property</code> \u00b6 <pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert stats to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of cache statistics</p>"},{"location":"reference/cache/#deepsentinel.cache.client.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(max_size=1000, default_ttl=3600, cleanup_interval=300)\n</code></pre> <p>LRU cache client with TTL support and performance tracking.</p> <p>This cache implementation provides: - LRU (Least Recently Used) eviction policy - TTL (Time To Live) based expiration - Performance metrics tracking - Async/await support - Key generation based on request parameters</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <p>Maximum number of entries in the cache</p> <code>default_ttl</code> <p>Default TTL for cache entries</p> <code>stats</code> <p>Cache performance statistics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>Maximum number of entries to store</p> <code>1000</code> <code>default_ttl</code> <code>int</code> <p>Default TTL in seconds</p> <code>3600</code> <code>cleanup_interval</code> <code>int</code> <p>Interval for cleanup tasks in seconds</p> <code>300</code> Functions\u00b6 <code></code> generate_cache_key \u00b6 <pre><code>generate_cache_key(request_data, provider_name='', operation='')\n</code></pre> <p>Generate a cache key from request parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request parameters</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider</p> <code>''</code> <code>operation</code> <code>str</code> <p>Operation being cached</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>Cache key string</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(key, default=None)\n</code></pre> <p>Get a value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>default</code> <code>Any</code> <p>Default value if key not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[Optional[Any], bool]</code> <p>Tuple of (value, cache_hit_boolean)</p> <code></code> set <code>async</code> \u00b6 <pre><code>set(key, value, ttl=None, metadata=None)\n</code></pre> <p>Set a value in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>value</code> <code>Any</code> <p>Value to cache</p> required <code>ttl</code> <code>Optional[int]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(key)\n</code></pre> <p>Delete a key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key existed and was deleted, False otherwise</p> <code></code> clear <code>async</code> \u00b6 <pre><code>clear()\n</code></pre> <p>Clear all entries from the cache.</p> <code></code> size <code>async</code> \u00b6 <pre><code>size()\n</code></pre> <p>Get the current size of the cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of entries in the cache</p> <code></code> get_stats <code>async</code> \u00b6 <pre><code>get_stats()\n</code></pre> <p>Get cache performance statistics.</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats object with performance metrics</p> <code></code> get_info <code>async</code> \u00b6 <pre><code>get_info()\n</code></pre> <p>Get detailed cache information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing cache information</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the cache.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the cache client and cleanup resources.</p>"},{"location":"reference/client/","title":"deepsentinel.client","text":""},{"location":"reference/client/#deepsentinel.client","title":"client","text":"<p>DeepSentinel SDK main client implementation.</p> <p>This module contains the main SentinelClient class that provides the primary interface for interacting with LLM providers through the compliance middleware.</p>"},{"location":"reference/client/#deepsentinel.client-classes","title":"Classes","text":""},{"location":"reference/client/#deepsentinel.client.SentinelClient","title":"SentinelClient","text":"<pre><code>SentinelClient(config=None, **kwargs)\n</code></pre> <p>Main client for the DeepSentinel SDK.</p> <p>This class provides the primary interface for interacting with LLM providers through a compliance-aware middleware layer. It handles configuration, provider management, compliance checking, and audit logging.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Client configuration</p> <code>chat</code> <p>Chat completions interface</p> <code>completions</code> <p>Text completions interface</p> <code>embeddings</code> <p>Embeddings interface</p> <code>models</code> <p>Models interface</p> <code>audio</code> <p>Audio processing interface</p> <code>images</code> <p>Image generation interface</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[SentinelConfig]</code> <p>Configuration instance (creates default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional configuration parameters</p> <code>{}</code>"},{"location":"reference/client/#deepsentinel.client.SentinelClient-attributes","title":"Attributes","text":""},{"location":"reference/client/#deepsentinel.client.SentinelClient.provider_registry","title":"provider_registry  <code>property</code>","text":"<pre><code>provider_registry\n</code></pre> <p>Get the provider registry.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Provider registry instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p>"},{"location":"reference/client/#deepsentinel.client.SentinelClient.middleware","title":"middleware  <code>property</code>","text":"<pre><code>middleware\n</code></pre> <p>Get the compliance middleware.</p> <p>Returns:</p> Type Description <code>ComplianceMiddleware</code> <p>Compliance middleware instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p>"},{"location":"reference/client/#deepsentinel.client.SentinelClient.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the client is initialized.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelClient-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelClient.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the client and all components.</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>DeepSentinelError</code> <p>If initialization fails</p>"},{"location":"reference/client/#deepsentinel.client.SentinelClient.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up client resources.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on all components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p>"},{"location":"reference/client/#deepsentinel.client.SentinelChatInterface","title":"SentinelChatInterface","text":"<pre><code>SentinelChatInterface(client)\n</code></pre> <p>               Bases: <code>ChatInterface</code></p> <p>Chat completions interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelChatInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelChatInterface.create","title":"create  <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelChatInterface.create_stream","title":"create_stream  <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelCompletionsInterface","title":"SentinelCompletionsInterface","text":"<pre><code>SentinelCompletionsInterface(client)\n</code></pre> <p>               Bases: <code>CompletionsInterface</code></p> <p>Text completions interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelCompletionsInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelCompletionsInterface.create","title":"create  <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelCompletionsInterface.create_stream","title":"create_stream  <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelEmbeddingsInterface","title":"SentinelEmbeddingsInterface","text":"<pre><code>SentinelEmbeddingsInterface(client)\n</code></pre> <p>               Bases: <code>EmbeddingsInterface</code></p> <p>Embeddings interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelEmbeddingsInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelEmbeddingsInterface.create","title":"create  <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelModelsInterface","title":"SentinelModelsInterface","text":"<pre><code>SentinelModelsInterface(client)\n</code></pre> <p>               Bases: <code>ModelsInterface</code></p> <p>Models interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelModelsInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelModelsInterface.list","title":"list  <code>async</code>","text":"<pre><code>list(provider=None, **kwargs)\n</code></pre> <p>List available models.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelModelsInterface.retrieve","title":"retrieve  <code>async</code>","text":"<pre><code>retrieve(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve model information.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelAudioInterface","title":"SentinelAudioInterface","text":"<pre><code>SentinelAudioInterface(client)\n</code></pre> <p>               Bases: <code>AudioInterface</code></p> <p>Audio interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelAudioInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelAudioInterface.transcribe","title":"transcribe  <code>async</code>","text":"<pre><code>transcribe(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio to text.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelAudioInterface.translate","title":"translate  <code>async</code>","text":"<pre><code>translate(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio to English text.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelImageInterface","title":"SentinelImageInterface","text":"<pre><code>SentinelImageInterface(client)\n</code></pre> <p>               Bases: <code>ImageInterface</code></p> <p>Image interface implementation.</p>"},{"location":"reference/client/#deepsentinel.client.SentinelImageInterface-functions","title":"Functions","text":""},{"location":"reference/client/#deepsentinel.client.SentinelImageInterface.generate","title":"generate  <code>async</code>","text":"<pre><code>generate(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images from text prompts.</p>"},{"location":"reference/client/#deepsentinel.client-functions","title":"Functions","text":""},{"location":"reference/config/","title":"deepsentinel.config","text":""},{"location":"reference/config/#deepsentinel.config","title":"config","text":"<p>DeepSentinel SDK configuration management.</p> <p>This module provides configuration classes and utilities for managing DeepSentinel SDK settings, compliance policies, and provider configurations.</p>"},{"location":"reference/config/#deepsentinel.config-classes","title":"Classes","text":""},{"location":"reference/config/#deepsentinel.config.CompliancePolicy","title":"CompliancePolicy","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for compliance policies and rules.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the policy</p> <code>enabled</code> <code>bool</code> <p>Whether the policy is enabled</p> <code>action</code> <code>ComplianceAction</code> <p>Default action to take on violations</p> <code>severity</code> <code>SeverityLevel</code> <p>Default severity level for violations</p> <code>rules</code> <code>Dict[str, Any]</code> <p>Dictionary of rule configurations</p> <code>exceptions</code> <code>List[str]</code> <p>List of exceptions to the policy</p> <code>custom_handlers</code> <code>Dict[str, Any]</code> <p>Custom handler configurations</p>"},{"location":"reference/config/#deepsentinel.config.CompliancePolicy-functions","title":"Functions","text":""},{"location":"reference/config/#deepsentinel.config.CompliancePolicy.validate_name","title":"validate_name","text":"<pre><code>validate_name(v)\n</code></pre> <p>Validate policy name is not empty.</p>"},{"location":"reference/config/#deepsentinel.config.PIIPolicy","title":"PIIPolicy","text":"<pre><code>PIIPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>PII detection and handling policy.</p> <p>Attributes:</p> Name Type Description <code>detection_threshold</code> <code>float</code> <p>Confidence threshold for PII detection</p> <code>redaction_strategy</code> <code>str</code> <p>Strategy for redacting PII</p> <code>pii_types</code> <code>List[str]</code> <p>Specific PII types to detect</p> <code>allow_partial_redaction</code> <code>bool</code> <p>Whether to allow partial redaction</p>"},{"location":"reference/config/#deepsentinel.config.ContentFilterPolicy","title":"ContentFilterPolicy","text":"<pre><code>ContentFilterPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>Content filtering policy for harmful or inappropriate content.</p> <p>Attributes:</p> Name Type Description <code>filter_categories</code> <code>List[str]</code> <p>Categories of content to filter</p> <code>strictness_level</code> <code>str</code> <p>Strictness level for filtering</p> <code>custom_patterns</code> <code>List[str]</code> <p>Custom regex patterns to match</p> <code>whitelist_patterns</code> <code>List[str]</code> <p>Patterns to whitelist</p> <code>context_aware</code> <code>bool</code> <p>Whether to consider context in filtering</p>"},{"location":"reference/config/#deepsentinel.config.AuditConfig","title":"AuditConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for audit logging and compliance tracking.</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <code>bool</code> <p>Whether audit logging is enabled</p> <code>log_level</code> <code>str</code> <p>Minimum log level to record</p> <code>storage_backend</code> <code>str</code> <p>Storage backend for audit logs</p> <code>retention_days</code> <code>int</code> <p>Number of days to retain audit logs</p> <code>include_request_body</code> <code>bool</code> <p>Whether to log request bodies</p> <code>include_response_body</code> <code>bool</code> <p>Whether to log response bodies</p> <code>exclude_patterns</code> <code>List[str]</code> <p>Patterns to exclude from logging</p> <code>encryption_enabled</code> <code>bool</code> <p>Whether to encrypt audit logs</p> <code>storage_config</code> <code>Dict[str, Any]</code> <p>Storage backend configuration</p>"},{"location":"reference/config/#deepsentinel.config.AuditConfig-functions","title":"Functions","text":""},{"location":"reference/config/#deepsentinel.config.AuditConfig.validate_retention_days","title":"validate_retention_days","text":"<pre><code>validate_retention_days(v)\n</code></pre> <p>Validate retention days is positive.</p>"},{"location":"reference/config/#deepsentinel.config.LoggingConfig","title":"LoggingConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for structured logging.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>str</code> <p>Log level</p> <code>format</code> <code>str</code> <p>Log format</p> <code>handlers</code> <code>Dict[str, Any]</code> <p>Log handlers configuration</p> <code>disable_existing_loggers</code> <code>bool</code> <p>Whether to disable existing loggers</p> <code>structured</code> <code>bool</code> <p>Whether to use structured logging</p> <code>include_timestamp</code> <code>bool</code> <p>Whether to include timestamps</p> <code>include_trace_id</code> <code>bool</code> <p>Whether to include trace IDs</p>"},{"location":"reference/config/#deepsentinel.config.PerformanceConfig","title":"PerformanceConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for performance optimizations.</p> <p>Attributes:</p> Name Type Description <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>int</code> <p>Default cache TTL in seconds</p> <code>cache_max_size</code> <code>int</code> <p>Maximum cache size</p> <code>connection_pool_size</code> <code>int</code> <p>HTTP connection pool size</p> <code>connection_pool_per_host</code> <code>int</code> <p>Connections per host</p> <code>connect_timeout</code> <code>int</code> <p>Connection timeout in seconds</p> <code>read_timeout</code> <code>int</code> <p>Read timeout in seconds</p> <code>enable_metrics</code> <code>bool</code> <p>Whether to collect performance metrics</p> <code>metrics_window_size</code> <code>int</code> <p>Size of metrics rolling window</p> <code>pattern_cache_size</code> <code>int</code> <p>Size of pattern compilation cache</p>"},{"location":"reference/config/#deepsentinel.config.PerformanceConfig-functions","title":"Functions","text":""},{"location":"reference/config/#deepsentinel.config.PerformanceConfig.validate_cache_ttl","title":"validate_cache_ttl","text":"<pre><code>validate_cache_ttl(v)\n</code></pre> <p>Validate cache TTL is positive.</p>"},{"location":"reference/config/#deepsentinel.config.PerformanceConfig.validate_cache_max_size","title":"validate_cache_max_size","text":"<pre><code>validate_cache_max_size(v)\n</code></pre> <p>Validate cache max size is positive.</p>"},{"location":"reference/config/#deepsentinel.config.PerformanceConfig.validate_connection_pool_size","title":"validate_connection_pool_size","text":"<pre><code>validate_connection_pool_size(v)\n</code></pre> <p>Validate connection pool size is positive.</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig","title":"SentinelConfig","text":"<pre><code>SentinelConfig(**data)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Main configuration class for the DeepSentinel SDK.</p> <p>This class manages all configuration aspects of the SDK including provider settings, compliance policies, audit configuration, and operational parameters.</p> <p>Attributes:</p> Name Type Description <code>providers</code> <code>Dict[str, ProviderConfig]</code> <p>Dictionary of provider configurations</p> <code>default_provider</code> <code>Optional[str]</code> <p>Default provider to use</p> <code>compliance_policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies</p> <code>audit_config</code> <code>AuditConfig</code> <p>Audit logging configuration</p> <code>logging_config</code> <code>LoggingConfig</code> <p>Structured logging configuration</p> <code>enable_streaming</code> <code>bool</code> <p>Whether to enable response streaming</p> <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>bool</code> <p>Cache time-to-live in seconds</p> <code>timeout</code> <code>int</code> <p>Default request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>debug_mode</code> <code>bool</code> <p>Whether debug mode is enabled</p> <code>telemetry_enabled</code> <code>bool</code> <p>Whether to send telemetry data</p> <code>user_agent</code> <code>Optional[str]</code> <p>Custom user agent string</p> <code>environment</code> <code>str</code> <p>Environment name (dev, staging, prod)</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig-classes","title":"Classes","text":""},{"location":"reference/config/#deepsentinel.config.SentinelConfig.Config","title":"Config","text":"<p>Pydantic configuration.</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig-functions","title":"Functions","text":""},{"location":"reference/config/#deepsentinel.config.SentinelConfig.validate_default_provider","title":"validate_default_provider","text":"<pre><code>validate_default_provider(v, values)\n</code></pre> <p>Validate default provider exists in providers dict.</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(config_path)\n</code></pre> <p>Load configuration from a file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Union[str, Path]</code> <p>Path to the configuration file</p> required <p>Returns:</p> Type Description <code>SentinelConfig</code> <p>SentinelConfig instance loaded from the file</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>ValueError</code> <p>If the configuration file format is invalid</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.add_provider","title":"add_provider","text":"<pre><code>add_provider(name, provider_config, set_as_default=False)\n</code></pre> <p>Add a new provider configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider</p> required <code>provider_config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.add_compliance_policy","title":"add_compliance_policy","text":"<pre><code>add_compliance_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Compliance policy to add</p> required"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.get_provider_config","title":"get_provider_config","text":"<pre><code>get_provider_config(provider_name=None)\n</code></pre> <p>Get provider configuration by name.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>Optional[str]</code> <p>Name of the provider (uses default if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>ProviderConfig</code> <p>Provider configuration</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.get_compliance_policy","title":"get_compliance_policy","text":"<pre><code>get_compliance_policy(policy_name)\n</code></pre> <p>Get compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Compliance policy if found, None otherwise</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert configuration to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the configuration</p>"},{"location":"reference/config/#deepsentinel.config.SentinelConfig.update_from_dict","title":"update_from_dict","text":"<pre><code>update_from_dict(config_dict)\n</code></pre> <p>Update configuration from dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>Dict[str, Any]</code> <p>Dictionary containing configuration updates</p> required"},{"location":"reference/deepsentinel/","title":"deepsentinel","text":""},{"location":"reference/deepsentinel/#deepsentinel","title":"deepsentinel","text":"<p>DeepSentinel SDK - AI compliance middleware for safe LLM interactions.</p> <p>This package provides a middleware layer between applications and LLM providers, with comprehensive compliance checks, audit logging, and performance optimizations for AI safety and compliance.</p>"},{"location":"reference/deepsentinel/#deepsentinel-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI","title":"AuditAPI","text":"<pre><code>AuditAPI(client)\n</code></pre> <p>Audit API client for DeepSentinel services.</p> <p>This class provides specialized methods for managing audit logs, tracking events, and retrieving compliance audit trails.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.log_event","title":"log_event  <code>async</code>","text":"<pre><code>log_event(event_data, sync=False)\n</code></pre> <p>Log an audit event to the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>event_data</code> <code>Dict[str, Any]</code> <p>Audit event data</p> required <code>sync</code> <code>bool</code> <p>Whether to wait for log confirmation</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Log confirmation or acknowledgment</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.log_batch_events","title":"log_batch_events  <code>async</code>","text":"<pre><code>log_batch_events(events)\n</code></pre> <p>Log multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict[str, Any]]</code> <p>List of audit event data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Batch log confirmation</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_events","title":"get_events  <code>async</code>","text":"<pre><code>get_events(\n    start_time=None,\n    end_time=None,\n    user_id=None,\n    session_id=None,\n    event_types=None,\n    limit=100,\n    offset=0,\n    sort=\"timestamp:desc\",\n)\n</code></pre> <p>Get audit events filtered by criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Filter by user ID</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Filter by session ID</p> <code>None</code> <code>event_types</code> <code>Optional[List[str]]</code> <p>Filter by event types</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <code>sort</code> <code>str</code> <p>Sorting field and direction</p> <code>'timestamp:desc'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Filtered audit events</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_event","title":"get_event  <code>async</code>","text":"<pre><code>get_event(event_id)\n</code></pre> <p>Get details for a specific audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>str</code> <p>ID of the audit event</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit event details</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.search_events","title":"search_events  <code>async</code>","text":"<pre><code>search_events(query, limit=100, offset=0)\n</code></pre> <p>Search audit events with a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Search query string</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_user_activity","title":"get_user_activity  <code>async</code>","text":"<pre><code>get_user_activity(user_id, limit=100)\n</code></pre> <p>Get activity history for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>User activity history</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_session_activity","title":"get_session_activity  <code>async</code>","text":"<pre><code>get_session_activity(session_id)\n</code></pre> <p>Get activity history for a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Session activity history</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_audit_trail_summary","title":"get_audit_trail_summary  <code>async</code>","text":"<pre><code>get_audit_trail_summary(start_time=None, end_time=None)\n</code></pre> <p>Get summary statistics for the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit trail summary statistics</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.export_audit_logs","title":"export_audit_logs  <code>async</code>","text":"<pre><code>export_audit_logs(start_time, end_time, format='json', filters=None)\n</code></pre> <p>Export audit logs for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>ISO timestamp for earliest events</p> required <code>end_time</code> <code>str</code> <p>ISO timestamp for latest events</p> required <code>format</code> <code>str</code> <p>Export format (json, csv)</p> <code>'json'</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional filters to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Export details including download URL</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_compliance_violations","title":"get_compliance_violations  <code>async</code>","text":"<pre><code>get_compliance_violations(\n    start_time=None, end_time=None, severity=None, limit=100, offset=0\n)\n</code></pre> <p>Get compliance violations from audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest violations</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest violations</p> <code>None</code> <code>severity</code> <code>Optional[str]</code> <p>Filter by severity level</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of violations to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance violations</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.get_audit_settings","title":"get_audit_settings  <code>async</code>","text":"<pre><code>get_audit_settings()\n</code></pre> <p>Get current audit settings and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit settings</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.update_audit_settings","title":"update_audit_settings  <code>async</code>","text":"<pre><code>update_audit_settings(settings)\n</code></pre> <p>Update audit settings and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Dict[str, Any]</code> <p>Updated settings data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated audit settings</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.purge_audit_logs","title":"purge_audit_logs  <code>async</code>","text":"<pre><code>purge_audit_logs(older_than, event_types=None, dry_run=True)\n</code></pre> <p>Purge audit logs older than specified time.</p> <p>Parameters:</p> Name Type Description Default <code>older_than</code> <code>str</code> <p>ISO timestamp or duration (e.g. \"90d\")</p> required <code>event_types</code> <code>Optional[List[str]]</code> <p>Optional event types to purge</p> <code>None</code> <code>dry_run</code> <code>bool</code> <p>Only simulate purge and return stats</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Purge operation results</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditAPI.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check audit API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient","title":"DeepSentinelAPIClient","text":"<pre><code>DeepSentinelAPIClient(config)\n</code></pre> <p>Main API client for DeepSentinel compliance services.</p> <p>This class handles authentication, request/response management, rate limiting, and communication with DeepSentinel's API endpoints.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>logger</code> <p>Structured logger</p> <code>base_url</code> <p>Base URL for API requests</p> <code>session</code> <p>Aiohttp client session</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize client session.</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close client session.</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.request","title":"request  <code>async</code>","text":"<pre><code>request(\n    method, path, data=None, params=None, headers=None, timeout=None, retry_count=0\n)\n</code></pre> <p>Make an API request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Additional headers</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>Request timeout</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>Current retry count</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limit is exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code>DeepSentinelError</code> <p>For other API errors</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.get","title":"get  <code>async</code>","text":"<pre><code>get(path, params=None, **kwargs)\n</code></pre> <p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.post","title":"post  <code>async</code>","text":"<pre><code>post(path, data=None, **kwargs)\n</code></pre> <p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.put","title":"put  <code>async</code>","text":"<pre><code>put(path, data=None, **kwargs)\n</code></pre> <p>Make a PUT request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(path, **kwargs)\n</code></pre> <p>Make a DELETE request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.verify_credentials","title":"verify_credentials  <code>async</code>","text":"<pre><code>verify_credentials()\n</code></pre> <p>Verify API credentials.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if credentials are valid, False otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelAPIClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI","title":"ComplianceAPI","text":"<pre><code>ComplianceAPI(client)\n</code></pre> <p>Compliance API client for DeepSentinel services.</p> <p>This class provides specialized methods for compliance validation, policy management, and content scanning services.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.validate_text","title":"validate_text  <code>async</code>","text":"<pre><code>validate_text(text, policy_ids=None, context=None)\n</code></pre> <p>Validate text content against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to validate</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.scan_for_sensitive_data","title":"scan_for_sensitive_data  <code>async</code>","text":"<pre><code>scan_for_sensitive_data(\n    content, content_type=\"text/plain\", sensitivity=\"medium\", types=None\n)\n</code></pre> <p>Scan content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to scan</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>sensitivity</code> <code>str</code> <p>Scanning sensitivity (low, medium, high)</p> <code>'medium'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to scan for</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Scanning results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.redact_sensitive_data","title":"redact_sensitive_data  <code>async</code>","text":"<pre><code>redact_sensitive_data(\n    content, content_type=\"text/plain\", types=None, replacement=\"[REDACTED]\"\n)\n</code></pre> <p>Redact sensitive data from content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to redact</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to redact</p> <code>None</code> <code>replacement</code> <code>str</code> <p>Replacement string for redacted content</p> <code>'[REDACTED]'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redaction results with redacted content</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.validate_request","title":"validate_request  <code>async</code>","text":"<pre><code>validate_request(request_data, request_type, policy_ids=None)\n</code></pre> <p>Validate a request against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data to validate</p> required <code>request_type</code> <code>str</code> <p>Type of request (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.validate_response","title":"validate_response  <code>async</code>","text":"<pre><code>validate_response(response_data, request_data, response_type, policy_ids=None)\n</code></pre> <p>Validate a response against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data to validate</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Original request data</p> required <code>response_type</code> <code>str</code> <p>Type of response (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.get_policies","title":"get_policies  <code>async</code>","text":"<pre><code>get_policies(active_only=True)\n</code></pre> <p>Get available compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>active_only</code> <code>bool</code> <p>Only return active policies</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of available policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.get_policy","title":"get_policy  <code>async</code>","text":"<pre><code>get_policy(policy_id)\n</code></pre> <p>Get details for a specific compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Policy details</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.create_custom_policy","title":"create_custom_policy  <code>async</code>","text":"<pre><code>create_custom_policy(policy_data)\n</code></pre> <p>Create a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_data</code> <code>Dict[str, Any]</code> <p>Policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created policy details</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.update_custom_policy","title":"update_custom_policy  <code>async</code>","text":"<pre><code>update_custom_policy(policy_id, policy_data)\n</code></pre> <p>Update a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to update</p> required <code>policy_data</code> <code>Dict[str, Any]</code> <p>Updated policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated policy details</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.delete_custom_policy","title":"delete_custom_policy  <code>async</code>","text":"<pre><code>delete_custom_policy(policy_id)\n</code></pre> <p>Delete a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to delete</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion result</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.get_detection_patterns","title":"get_detection_patterns  <code>async</code>","text":"<pre><code>get_detection_patterns(pattern_type=None)\n</code></pre> <p>Get available detection patterns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_type</code> <code>Optional[str]</code> <p>Optional type of patterns to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of detection patterns</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.create_custom_pattern","title":"create_custom_pattern  <code>async</code>","text":"<pre><code>create_custom_pattern(pattern_data)\n</code></pre> <p>Create a custom detection pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_data</code> <code>Dict[str, Any]</code> <p>Pattern configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created pattern details</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.get_compliance_report","title":"get_compliance_report  <code>async</code>","text":"<pre><code>get_compliance_report(start_date, end_date, report_type='summary')\n</code></pre> <p>Get a compliance report for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Start date in ISO format</p> required <code>end_date</code> <code>str</code> <p>End date in ISO format</p> required <code>report_type</code> <code>str</code> <p>Type of report (summary, detailed)</p> <code>'summary'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance report data</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceAPI.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Check compliance API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient","title":"SentinelClient","text":"<pre><code>SentinelClient(config=None, **kwargs)\n</code></pre> <p>Main client for the DeepSentinel SDK.</p> <p>This class provides the primary interface for interacting with LLM providers through a compliance-aware middleware layer. It handles configuration, provider management, compliance checking, and audit logging.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Client configuration</p> <code>chat</code> <p>Chat completions interface</p> <code>completions</code> <p>Text completions interface</p> <code>embeddings</code> <p>Embeddings interface</p> <code>models</code> <p>Models interface</p> <code>audio</code> <p>Audio processing interface</p> <code>images</code> <p>Image generation interface</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[SentinelConfig]</code> <p>Configuration instance (creates default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional configuration parameters</p> <code>{}</code>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient-attributes","title":"Attributes","text":""},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.provider_registry","title":"provider_registry  <code>property</code>","text":"<pre><code>provider_registry\n</code></pre> <p>Get the provider registry.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Provider registry instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.middleware","title":"middleware  <code>property</code>","text":"<pre><code>middleware\n</code></pre> <p>Get the compliance middleware.</p> <p>Returns:</p> Type Description <code>ComplianceMiddleware</code> <p>Compliance middleware instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the client is initialized.</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the client and all components.</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>DeepSentinelError</code> <p>If initialization fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up client resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on all components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine","title":"ComplianceEngine","text":"<pre><code>ComplianceEngine(config)\n</code></pre> <p>Main compliance processing engine.</p> <p>This class orchestrates all compliance checking operations including policy evaluation, detection engines, and enforcement actions.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policy_manager</code> <p>Policy manager instance</p> <code>detection_engine</code> <p>Detection engine instance</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine.process_request","title":"process_request  <code>async</code>","text":"<pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine.process_response","title":"process_response  <code>async</code>","text":"<pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics()\n</code></pre> <p>Get compliance engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on compliance engine components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceEngine.reload_policies","title":"reload_policies  <code>async</code>","text":"<pre><code>reload_policies()\n</code></pre> <p>Reload compliance policies from configuration.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor","title":"ComplianceInterceptor","text":"<pre><code>ComplianceInterceptor(engine, enabled=True, bypass_rules=None)\n</code></pre> <p>Interceptor for automatic compliance checking.</p> <p>This class provides interceptor functionality that can be integrated into HTTP clients, middleware, or other components to automatically apply compliance checks to requests and responses.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>Compliance engine instance</p> <code>logger</code> <p>Structured logger</p> <code>enabled</code> <p>Whether the interceptor is enabled</p> <code>bypass_rules</code> <p>Rules for bypassing compliance checks</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>ComplianceEngine</code> <p>Compliance engine to use for checks</p> required <code>enabled</code> <code>bool</code> <p>Whether the interceptor is enabled</p> <code>True</code> <code>bypass_rules</code> <code>Optional[Dict[str, Any]]</code> <p>Optional rules for bypassing compliance checks</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.intercept_request","title":"intercept_request  <code>async</code>","text":"<pre><code>intercept_request(request, context=None)\n</code></pre> <p>Intercept and process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to intercept and check</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates compliance policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.intercept_response","title":"intercept_response  <code>async</code>","text":"<pre><code>intercept_response(response, request, context=None)\n</code></pre> <p>Intercept and process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to intercept and check</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates compliance policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.create_middleware","title":"create_middleware","text":"<pre><code>create_middleware()\n</code></pre> <p>Create middleware function that wraps API calls with compliance.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]], Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]]</code> <p>Middleware function that can wrap API calls</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the interceptor.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the interceptor.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.update_bypass_rules","title":"update_bypass_rules","text":"<pre><code>update_bypass_rules(bypass_rules)\n</code></pre> <p>Update bypass rules.</p> <p>Parameters:</p> Name Type Description Default <code>bypass_rules</code> <code>Dict[str, Any]</code> <p>New bypass rules configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics()\n</code></pre> <p>Get interceptor performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.reset_metrics","title":"reset_metrics","text":"<pre><code>reset_metrics()\n</code></pre> <p>Reset performance metrics counters.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceInterceptor.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on interceptor.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager","title":"PolicyManager","text":"<pre><code>PolicyManager(policies)\n</code></pre> <p>Manager for compliance policies and their evaluation.</p> <p>This class handles policy loading, caching, and evaluation against requests and responses to determine compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policies</code> <code>Dict[str, CompliancePolicy]</code> <p>Dictionary of loaded compliance policies</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies to manage</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.evaluate_request","title":"evaluate_request  <code>async</code>","text":"<pre><code>evaluate_request(request, detection_results, context=None)\n</code></pre> <p>Evaluate request against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to evaluate</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.evaluate_response","title":"evaluate_response  <code>async</code>","text":"<pre><code>evaluate_response(response, request, detection_results, context=None)\n</code></pre> <p>Evaluate response against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to evaluate</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.get_active_policies","title":"get_active_policies","text":"<pre><code>get_active_policies()\n</code></pre> <p>Get list of active policies.</p> <p>Returns:</p> Type Description <code>List[CompliancePolicy]</code> <p>List of enabled compliance policies</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.get_policy","title":"get_policy","text":"<pre><code>get_policy(name)\n</code></pre> <p>Get policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.add_policy","title":"add_policy","text":"<pre><code>add_policy(policy)\n</code></pre> <p>Add or update a policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add or update</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.remove_policy","title":"remove_policy","text":"<pre><code>remove_policy(name)\n</code></pre> <p>Remove a policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if policy was removed, False if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.reload_policies","title":"reload_policies  <code>async</code>","text":"<pre><code>reload_policies(policies)\n</code></pre> <p>Reload policies from new configuration.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>New list of policies to load</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PolicyManager.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on policy manager.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine","title":"DetectionEngine","text":"<pre><code>DetectionEngine(config)\n</code></pre> <p>Main detection engine for sensitive data identification.</p> <p>This class coordinates multiple detection modules to identify various types of sensitive data patterns in text content.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>engines</code> <code>Dict[str, Any]</code> <p>Dictionary of detection engines by name</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.analyze_text","title":"analyze_text  <code>async</code>","text":"<pre><code>analyze_text(text_content, context=None)\n</code></pre> <p>Analyze text content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text_content</code> <code>List[str]</code> <p>List of text strings to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results from all engines</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.analyze_single_text","title":"analyze_single_text  <code>async</code>","text":"<pre><code>analyze_single_text(text, engine_names=None, context=None)\n</code></pre> <p>Analyze a single text string with specified engines.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text string to analyze</p> required <code>engine_names</code> <code>Optional[List[str]]</code> <p>Optional list of engine names to use</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.get_engine","title":"get_engine","text":"<pre><code>get_engine(engine_name)\n</code></pre> <p>Get a specific detection engine by name.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Detection engine instance or None if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.list_engines","title":"list_engines","text":"<pre><code>list_engines()\n</code></pre> <p>Get list of available detection engine names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of detection engine names</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.get_engine_info","title":"get_engine_info","text":"<pre><code>get_engine_info(engine_name)\n</code></pre> <p>Get information about a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dictionary containing engine information</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics()\n</code></pre> <p>Get detection engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on all detection engines.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.reload_engines","title":"reload_engines  <code>async</code>","text":"<pre><code>reload_engines()\n</code></pre> <p>Reload all detection engines with updated configuration.</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.enable_engine","title":"enable_engine","text":"<pre><code>enable_engine(engine_name)\n</code></pre> <p>Enable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to enable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was enabled, False if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.DetectionEngine.disable_engine","title":"disable_engine","text":"<pre><code>disable_engine(engine_name)\n</code></pre> <p>Disable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to disable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was disabled, False if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher","title":"PatternMatcher","text":"<pre><code>PatternMatcher(config)\n</code></pre> <p>Base pattern matcher for sensitive data detection.</p> <p>This class provides pattern matching functionality using regex and other techniques to identify sensitive data patterns in text.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>patterns</code> <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary of compiled regex patterns</p> <code>enabled</code> <p>Whether the pattern matcher is enabled</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.analyze","title":"analyze","text":"<pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for pattern matches with performance tracking.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.analyze_batch","title":"analyze_batch  <code>async</code>","text":"<pre><code>analyze_batch(texts, context=None)\n</code></pre> <p>Analyze multiple texts in batch for better performance.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>List[str]</code> <p>List of texts to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of analysis results for each text</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.add_pattern","title":"add_pattern","text":"<pre><code>add_pattern(name, pattern, pattern_type, confidence=0.8, flags=0)\n</code></pre> <p>Add a new pattern to the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <code>pattern</code> <code>str</code> <p>Regular expression pattern</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>0.8</code> <code>flags</code> <code>int</code> <p>Regex flags</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was added successfully, False otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.remove_pattern","title":"remove_pattern","text":"<pre><code>remove_pattern(name)\n</code></pre> <p>Remove a pattern from the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was removed, False if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.get_pattern_info","title":"get_pattern_info","text":"<pre><code>get_pattern_info(name)\n</code></pre> <p>Get information about a specific pattern.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Pattern information dictionary or None if not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.list_patterns","title":"list_patterns","text":"<pre><code>list_patterns()\n</code></pre> <p>Get list of available pattern names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of pattern names</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.get_info","title":"get_info","text":"<pre><code>get_info()\n</code></pre> <p>Get information about the pattern matcher including performance.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing matcher information and performance stats</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.get_performance_stats","title":"get_performance_stats","text":"<pre><code>get_performance_stats()\n</code></pre> <p>Get detailed performance statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the pattern matcher.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the pattern matcher.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PatternMatcher.health_check","title":"health_check","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on the pattern matcher.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector","title":"PIIDetector","text":"<pre><code>PIIDetector(config)\n</code></pre> <p>Specialized detector for PII data patterns.</p> <p>This detector focuses on identifying personally identifiable information such as emails, phone numbers, SSNs, addresses, and other personal data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>sensitivity_level</code> <p>Detection sensitivity (low, medium, high)</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.analyze","title":"analyze","text":"<pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PII patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.set_sensitivity_level","title":"set_sensitivity_level","text":"<pre><code>set_sensitivity_level(level)\n</code></pre> <p>Set the detection sensitivity level.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Sensitivity level (\"low\", \"medium\", \"high\")</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.get_info","title":"get_info","text":"<pre><code>get_info()\n</code></pre> <p>Get information about the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the PII detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the PII detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIDetector.health_check","title":"health_check","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector","title":"PHIDetector","text":"<pre><code>PHIDetector(config)\n</code></pre> <p>Specialized detector for PHI data patterns.</p> <p>This detector focuses on identifying protected health information including medical records, diagnosis codes, medications, and other healthcare-related sensitive data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>medical_terms</code> <p>Set of medical terminology for context analysis</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.analyze","title":"analyze","text":"<pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PHI patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.get_info","title":"get_info","text":"<pre><code>get_info()\n</code></pre> <p>Get information about the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the PHI detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the PHI detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PHIDetector.health_check","title":"health_check","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector","title":"PCIDetector","text":"<pre><code>PCIDetector(config)\n</code></pre> <p>Specialized detector for PCI DSS sensitive data patterns.</p> <p>This detector focuses on identifying payment card industry data including credit card numbers, bank accounts, CVV codes, and other financial information requiring PCI DSS compliance.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>strict_validation</code> <p>Whether to use strict validation</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.analyze","title":"analyze","text":"<pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PCI-sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.analyze_async","title":"analyze_async  <code>async</code>","text":"<pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.set_strict_validation","title":"set_strict_validation","text":"<pre><code>set_strict_validation(strict)\n</code></pre> <p>Set strict validation mode.</p> <p>Parameters:</p> Name Type Description Default <code>strict</code> <code>bool</code> <p>Whether to use strict validation</p> required"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.get_info","title":"get_info","text":"<pre><code>get_info()\n</code></pre> <p>Get information about the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the PCI detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the PCI detector.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PCIDetector.health_check","title":"health_check","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(max_size=1000, default_ttl=3600, cleanup_interval=300)\n</code></pre> <p>LRU cache client with TTL support and performance tracking.</p> <p>This cache implementation provides: - LRU (Least Recently Used) eviction policy - TTL (Time To Live) based expiration - Performance metrics tracking - Async/await support - Key generation based on request parameters</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <p>Maximum number of entries in the cache</p> <code>default_ttl</code> <p>Default TTL for cache entries</p> <code>stats</code> <p>Cache performance statistics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>Maximum number of entries to store</p> <code>1000</code> <code>default_ttl</code> <code>int</code> <p>Default TTL in seconds</p> <code>3600</code> <code>cleanup_interval</code> <code>int</code> <p>Interval for cleanup tasks in seconds</p> <code>300</code>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.generate_cache_key","title":"generate_cache_key","text":"<pre><code>generate_cache_key(request_data, provider_name='', operation='')\n</code></pre> <p>Generate a cache key from request parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request parameters</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider</p> <code>''</code> <code>operation</code> <code>str</code> <p>Operation being cached</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>Cache key string</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.get","title":"get  <code>async</code>","text":"<pre><code>get(key, default=None)\n</code></pre> <p>Get a value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>default</code> <code>Any</code> <p>Default value if key not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[Optional[Any], bool]</code> <p>Tuple of (value, cache_hit_boolean)</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.set","title":"set  <code>async</code>","text":"<pre><code>set(key, value, ttl=None, metadata=None)\n</code></pre> <p>Set a value in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>value</code> <code>Any</code> <p>Value to cache</p> required <code>ttl</code> <code>Optional[int]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.delete","title":"delete  <code>async</code>","text":"<pre><code>delete(key)\n</code></pre> <p>Delete a key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key existed and was deleted, False otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.clear","title":"clear  <code>async</code>","text":"<pre><code>clear()\n</code></pre> <p>Clear all entries from the cache.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.size","title":"size  <code>async</code>","text":"<pre><code>size()\n</code></pre> <p>Get the current size of the cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of entries in the cache</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.get_stats","title":"get_stats  <code>async</code>","text":"<pre><code>get_stats()\n</code></pre> <p>Get cache performance statistics.</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats object with performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.get_info","title":"get_info  <code>async</code>","text":"<pre><code>get_info()\n</code></pre> <p>Get detailed cache information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing cache information</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on the cache.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheClient.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the cache client and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry","title":"CacheEntry","text":"<pre><code>CacheEntry(value, ttl=3600, metadata=None)\n</code></pre> <p>Represents a cached entry with TTL and metadata.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The cached value</p> <code>created_at</code> <p>Timestamp when the entry was created</p> <code>ttl</code> <p>Time-to-live in seconds</p> <code>access_count</code> <p>Number of times this entry has been accessed</p> <code>last_accessed</code> <p>Timestamp of last access</p> <code>metadata</code> <p>Additional metadata about the cached entry</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to cache</p> required <code>ttl</code> <code>int</code> <p>Time-to-live in seconds</p> <code>3600</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry-attributes","title":"Attributes","text":""},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry.is_expired","title":"is_expired  <code>property</code>","text":"<pre><code>is_expired\n</code></pre> <p>Check if the cache entry has expired.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry.age","title":"age  <code>property</code>","text":"<pre><code>age\n</code></pre> <p>Get the age of the cache entry in seconds.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry.access","title":"access","text":"<pre><code>access()\n</code></pre> <p>Access the cached value and update access statistics.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The cached value</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheEntry.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert cache entry to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the cache entry</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheStats","title":"CacheStats","text":"<pre><code>CacheStats()\n</code></pre> <p>Cache performance statistics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <p>Number of cache hits</p> <code>misses</code> <p>Number of cache misses</p> <code>evictions</code> <p>Number of cache evictions</p> <code>expired</code> <p>Number of expired entries removed</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheStats-attributes","title":"Attributes","text":""},{"location":"reference/deepsentinel/#deepsentinel.CacheStats.hit_rate","title":"hit_rate  <code>property</code>","text":"<pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheStats.miss_rate","title":"miss_rate  <code>property</code>","text":"<pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CacheStats-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.CacheStats.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert stats to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of cache statistics</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditConfig","title":"AuditConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for audit logging and compliance tracking.</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <code>bool</code> <p>Whether audit logging is enabled</p> <code>log_level</code> <code>str</code> <p>Minimum log level to record</p> <code>storage_backend</code> <code>str</code> <p>Storage backend for audit logs</p> <code>retention_days</code> <code>int</code> <p>Number of days to retain audit logs</p> <code>include_request_body</code> <code>bool</code> <p>Whether to log request bodies</p> <code>include_response_body</code> <code>bool</code> <p>Whether to log response bodies</p> <code>exclude_patterns</code> <code>List[str]</code> <p>Patterns to exclude from logging</p> <code>encryption_enabled</code> <code>bool</code> <p>Whether to encrypt audit logs</p> <code>storage_config</code> <code>Dict[str, Any]</code> <p>Storage backend configuration</p>"},{"location":"reference/deepsentinel/#deepsentinel.AuditConfig-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.AuditConfig.validate_retention_days","title":"validate_retention_days","text":"<pre><code>validate_retention_days(v)\n</code></pre> <p>Validate retention days is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompliancePolicy","title":"CompliancePolicy","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for compliance policies and rules.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the policy</p> <code>enabled</code> <code>bool</code> <p>Whether the policy is enabled</p> <code>action</code> <code>ComplianceAction</code> <p>Default action to take on violations</p> <code>severity</code> <code>SeverityLevel</code> <p>Default severity level for violations</p> <code>rules</code> <code>Dict[str, Any]</code> <p>Dictionary of rule configurations</p> <code>exceptions</code> <code>List[str]</code> <p>List of exceptions to the policy</p> <code>custom_handlers</code> <code>Dict[str, Any]</code> <p>Custom handler configurations</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompliancePolicy-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.CompliancePolicy.validate_name","title":"validate_name","text":"<pre><code>validate_name(v)\n</code></pre> <p>Validate policy name is not empty.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ContentFilterPolicy","title":"ContentFilterPolicy","text":"<pre><code>ContentFilterPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>Content filtering policy for harmful or inappropriate content.</p> <p>Attributes:</p> Name Type Description <code>filter_categories</code> <code>List[str]</code> <p>Categories of content to filter</p> <code>strictness_level</code> <code>str</code> <p>Strictness level for filtering</p> <code>custom_patterns</code> <code>List[str]</code> <p>Custom regex patterns to match</p> <code>whitelist_patterns</code> <code>List[str]</code> <p>Patterns to whitelist</p> <code>context_aware</code> <code>bool</code> <p>Whether to consider context in filtering</p>"},{"location":"reference/deepsentinel/#deepsentinel.LoggingConfig","title":"LoggingConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for structured logging.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>str</code> <p>Log level</p> <code>format</code> <code>str</code> <p>Log format</p> <code>handlers</code> <code>Dict[str, Any]</code> <p>Log handlers configuration</p> <code>disable_existing_loggers</code> <code>bool</code> <p>Whether to disable existing loggers</p> <code>structured</code> <code>bool</code> <p>Whether to use structured logging</p> <code>include_timestamp</code> <code>bool</code> <p>Whether to include timestamps</p> <code>include_trace_id</code> <code>bool</code> <p>Whether to include trace IDs</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceConfig","title":"PerformanceConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for performance optimizations.</p> <p>Attributes:</p> Name Type Description <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>int</code> <p>Default cache TTL in seconds</p> <code>cache_max_size</code> <code>int</code> <p>Maximum cache size</p> <code>connection_pool_size</code> <code>int</code> <p>HTTP connection pool size</p> <code>connection_pool_per_host</code> <code>int</code> <p>Connections per host</p> <code>connect_timeout</code> <code>int</code> <p>Connection timeout in seconds</p> <code>read_timeout</code> <code>int</code> <p>Read timeout in seconds</p> <code>enable_metrics</code> <code>bool</code> <p>Whether to collect performance metrics</p> <code>metrics_window_size</code> <code>int</code> <p>Size of metrics rolling window</p> <code>pattern_cache_size</code> <code>int</code> <p>Size of pattern compilation cache</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceConfig-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PerformanceConfig.validate_cache_ttl","title":"validate_cache_ttl","text":"<pre><code>validate_cache_ttl(v)\n</code></pre> <p>Validate cache TTL is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceConfig.validate_cache_max_size","title":"validate_cache_max_size","text":"<pre><code>validate_cache_max_size(v)\n</code></pre> <p>Validate cache max size is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceConfig.validate_connection_pool_size","title":"validate_connection_pool_size","text":"<pre><code>validate_connection_pool_size(v)\n</code></pre> <p>Validate connection pool size is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PIIPolicy","title":"PIIPolicy","text":"<pre><code>PIIPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>PII detection and handling policy.</p> <p>Attributes:</p> Name Type Description <code>detection_threshold</code> <code>float</code> <p>Confidence threshold for PII detection</p> <code>redaction_strategy</code> <code>str</code> <p>Strategy for redacting PII</p> <code>pii_types</code> <code>List[str]</code> <p>Specific PII types to detect</p> <code>allow_partial_redaction</code> <code>bool</code> <p>Whether to allow partial redaction</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderConfig","title":"ProviderConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a specific provider.</p> <p>Attributes:</p> Name Type Description <code>provider_type</code> <code>ProviderType</code> <p>Type of the provider</p> <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the provider's API</p> <code>timeout</code> <code>int</code> <p>Request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>rate_limit</code> <code>Optional[Dict[str, Any]]</code> <p>Rate limit configuration</p> <code>headers</code> <code>Dict[str, str]</code> <p>Additional headers to send</p> <code>extra_config</code> <code>Dict[str, Any]</code> <p>Provider-specific configuration</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig","title":"SentinelConfig","text":"<pre><code>SentinelConfig(**data)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Main configuration class for the DeepSentinel SDK.</p> <p>This class manages all configuration aspects of the SDK including provider settings, compliance policies, audit configuration, and operational parameters.</p> <p>Attributes:</p> Name Type Description <code>providers</code> <code>Dict[str, ProviderConfig]</code> <p>Dictionary of provider configurations</p> <code>default_provider</code> <code>Optional[str]</code> <p>Default provider to use</p> <code>compliance_policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies</p> <code>audit_config</code> <code>AuditConfig</code> <p>Audit logging configuration</p> <code>logging_config</code> <code>LoggingConfig</code> <p>Structured logging configuration</p> <code>enable_streaming</code> <code>bool</code> <p>Whether to enable response streaming</p> <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>bool</code> <p>Cache time-to-live in seconds</p> <code>timeout</code> <code>int</code> <p>Default request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>debug_mode</code> <code>bool</code> <p>Whether debug mode is enabled</p> <code>telemetry_enabled</code> <code>bool</code> <p>Whether to send telemetry data</p> <code>user_agent</code> <code>Optional[str]</code> <p>Custom user agent string</p> <code>environment</code> <code>str</code> <p>Environment name (dev, staging, prod)</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.Config","title":"Config","text":"<p>Pydantic configuration.</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.validate_default_provider","title":"validate_default_provider","text":"<pre><code>validate_default_provider(v, values)\n</code></pre> <p>Validate default provider exists in providers dict.</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.from_file","title":"from_file  <code>classmethod</code>","text":"<pre><code>from_file(config_path)\n</code></pre> <p>Load configuration from a file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Union[str, Path]</code> <p>Path to the configuration file</p> required <p>Returns:</p> Type Description <code>SentinelConfig</code> <p>SentinelConfig instance loaded from the file</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>ValueError</code> <p>If the configuration file format is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.add_provider","title":"add_provider","text":"<pre><code>add_provider(name, provider_config, set_as_default=False)\n</code></pre> <p>Add a new provider configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider</p> required <code>provider_config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.add_compliance_policy","title":"add_compliance_policy","text":"<pre><code>add_compliance_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Compliance policy to add</p> required"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.get_provider_config","title":"get_provider_config","text":"<pre><code>get_provider_config(provider_name=None)\n</code></pre> <p>Get provider configuration by name.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>Optional[str]</code> <p>Name of the provider (uses default if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>ProviderConfig</code> <p>Provider configuration</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.get_compliance_policy","title":"get_compliance_policy","text":"<pre><code>get_compliance_policy(policy_name)\n</code></pre> <p>Get compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Compliance policy if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert configuration to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the configuration</p>"},{"location":"reference/deepsentinel/#deepsentinel.SentinelConfig.update_from_dict","title":"update_from_dict","text":"<pre><code>update_from_dict(config_dict)\n</code></pre> <p>Update configuration from dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>Dict[str, Any]</code> <p>Dictionary containing configuration updates</p> required"},{"location":"reference/deepsentinel/#deepsentinel.AuthenticationError","title":"AuthenticationError","text":"<pre><code>AuthenticationError(message, provider_name, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider authentication fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.ComplianceViolationError","title":"ComplianceViolationError","text":"<pre><code>ComplianceViolationError(\n    message, policy_name, violation_type, severity=\"high\", error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when content violates compliance policies.</p> <p>This exception is raised when the compliance middleware detects content that violates configured compliance policies, such as PII detection, content filtering, or security violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <p>Name of the violated policy</p> <code>violation_type</code> <p>Type of violation detected</p> <code>severity</code> <p>Severity level of the violation</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation detected</p> required <code>severity</code> <code>str</code> <p>Severity level of the violation</p> <code>'high'</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.ConfigurationError","title":"ConfigurationError","text":"<pre><code>ConfigurationError(\n    message, config_key=None, config_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are configuration-related issues.</p> <p>This exception is raised for various configuration problems including invalid configuration values, missing required settings, conflicting options, and environment setup issues.</p> <p>Attributes:</p> Name Type Description <code>config_key</code> <p>The configuration key that caused the error</p> <code>config_value</code> <p>The problematic configuration value</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>config_key</code> <code>Optional[str]</code> <p>The configuration key that caused the error</p> <code>None</code> <code>config_value</code> <code>Optional[Any]</code> <p>The problematic configuration value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.DeepSentinelError","title":"DeepSentinelError","text":"<pre><code>DeepSentinelError(message, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Base exception for all DeepSentinel SDK errors.</p> <p>All SDK-specific exceptions inherit from this base class to provide a consistent exception hierarchy and error handling interface.</p> <p>Attributes:</p> Name Type Description <code>message</code> <p>Human-readable error message</p> <code>error_code</code> <p>Optional error code for programmatic handling</p> <code>details</code> <p>Optional dictionary containing additional error context</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.MCPError","title":"MCPError","text":"<pre><code>MCPError(\n    message,\n    server_name=None,\n    tool_name=None,\n    operation=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are Model Context Protocol (MCP) related issues.</p> <p>This exception covers MCP server communication errors, tool execution failures, resource access issues, and protocol-level problems.</p> <p>Attributes:</p> Name Type Description <code>server_name</code> <p>Name of the MCP server</p> <code>tool_name</code> <p>Name of the MCP tool if applicable</p> <code>operation</code> <p>The MCP operation that failed</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>server_name</code> <code>Optional[str]</code> <p>Name of the MCP server</p> <code>None</code> <code>tool_name</code> <code>Optional[str]</code> <p>Name of the MCP tool if applicable</p> <code>None</code> <code>operation</code> <code>Optional[str]</code> <p>The MCP operation that failed</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderError","title":"ProviderError","text":"<pre><code>ProviderError(\n    message,\n    provider_name,\n    status_code=None,\n    provider_error=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are issues with LLM provider operations.</p> <p>This exception covers various provider-related errors including authentication failures, rate limiting, API errors, and provider-specific issues.</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <p>Name of the LLM provider</p> <code>status_code</code> <p>HTTP status code if applicable</p> <code>provider_error</code> <p>Original error from the provider</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>status_code</code> <code>Optional[int]</code> <p>HTTP status code if applicable</p> <code>None</code> <code>provider_error</code> <code>Optional[Exception]</code> <p>Original error from the provider</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.RateLimitError","title":"RateLimitError","text":"<pre><code>RateLimitError(message, provider_name, retry_after=None, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider rate limits are exceeded.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>retry_after</code> <code>Optional[int]</code> <p>Seconds to wait before retrying</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.ValidationError","title":"ValidationError","text":"<pre><code>ValidationError(\n    message, field_name=None, field_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when data validation fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>field_name</code> <code>Optional[str]</code> <p>Name of the field that failed validation</p> <code>None</code> <code>field_value</code> <code>Optional[Any]</code> <p>The invalid field value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface","title":"AudioInterface","text":"<pre><code>AudioInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for audio operations like transcription and text-to-speech.</p> <p>This interface handles audio-related AI operations with support for various audio formats and processing options.</p>"},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface.transcribe","title":"transcribe  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>transcribe(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface.translate","title":"translate  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>translate(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface.transcribe_sync","title":"transcribe_sync","text":"<pre><code>transcribe_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p>"},{"location":"reference/deepsentinel/#deepsentinel.AudioInterface.translate_sync","title":"translate_sync","text":"<pre><code>translate_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatInterface","title":"ChatInterface","text":"<pre><code>ChatInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for chat completion operations.</p> <p>This interface handles conversational AI interactions with support for both synchronous and asynchronous operations, streaming responses, and compliance checking.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ChatInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatInterface.create_stream","title":"create_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionsInterface","title":"CompletionsInterface","text":"<pre><code>CompletionsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for text completion operations.</p> <p>This interface handles text completion requests with support for various completion parameters and compliance checking.</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionsInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.CompletionsInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionsInterface.create_stream","title":"create_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionsInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p>"},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingsInterface","title":"EmbeddingsInterface","text":"<pre><code>EmbeddingsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for embedding operations.</p> <p>This interface handles text embedding generation with support for various embedding models and batch processing.</p>"},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingsInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingsInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingsInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p>"},{"location":"reference/deepsentinel/#deepsentinel.ImageInterface","title":"ImageInterface","text":"<pre><code>ImageInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for image generation and processing operations.</p> <p>This interface handles image-related AI operations including generation, editing, and variation creation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ImageInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ImageInterface.generate","title":"generate  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>generate(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If prompt violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ImageInterface.generate_sync","title":"generate_sync","text":"<pre><code>generate_sync(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p>"},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface","title":"ModelsInterface","text":"<pre><code>ModelsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for model information and management.</p> <p>This interface provides access to available models, their capabilities, and metadata from different providers.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface.list","title":"list  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>list(provider=None, **kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface.retrieve","title":"retrieve  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>retrieve(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface.list_sync","title":"list_sync","text":"<pre><code>list_sync(provider=None, **kwargs)\n</code></pre> <p>List available models synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p>"},{"location":"reference/deepsentinel/#deepsentinel.ModelsInterface.retrieve_sync","title":"retrieve_sync","text":"<pre><code>retrieve_sync(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve model information synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector","title":"MetricsCollector","text":"<pre><code>MetricsCollector(enabled=True, window_size=1000, retention_minutes=60)\n</code></pre> <p>Comprehensive metrics collector for SDK performance monitoring.</p> <p>This class collects and aggregates performance metrics including: - Request performance and timing - Token usage and costs - Cache effectiveness - Provider-specific metrics - System health indicators</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <p>Whether metrics collection is enabled</p> <code>window_size</code> <p>Size of the rolling window for metrics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to collect metrics</p> <code>True</code> <code>window_size</code> <code>int</code> <p>Size of rolling window for recent metrics</p> <code>1000</code> <code>retention_minutes</code> <code>int</code> <p>How long to retain detailed metrics</p> <code>60</code>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.record_request","title":"record_request","text":"<pre><code>record_request(\n    provider,\n    operation,\n    duration,\n    success,\n    retry_count=0,\n    rate_limited=False,\n    error=None,\n)\n</code></pre> <p>Record a request performance metric.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>operation</code> <code>str</code> <p>Operation type (chat, completion, etc.)</p> required <code>duration</code> <code>float</code> <p>Request duration in seconds</p> required <code>success</code> <code>bool</code> <p>Whether the request was successful</p> required <code>retry_count</code> <code>int</code> <p>Number of retries performed</p> <code>0</code> <code>rate_limited</code> <code>bool</code> <p>Whether rate limiting was encountered</p> <code>False</code> <code>error</code> <code>Optional[str]</code> <p>Error message if request failed</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.record_token_usage","title":"record_token_usage","text":"<pre><code>record_token_usage(\n    provider, prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0\n)\n</code></pre> <p>Record token usage metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>prompt_tokens</code> <code>int</code> <p>Number of prompt tokens</p> <code>0</code> <code>completion_tokens</code> <code>int</code> <p>Number of completion tokens</p> <code>0</code> <code>total_tokens</code> <code>Optional[int]</code> <p>Total tokens (if different from sum)</p> <code>None</code> <code>cost</code> <code>float</code> <p>Estimated cost for this usage</p> <code>0.0</code>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.record_cache_metrics","title":"record_cache_metrics","text":"<pre><code>record_cache_metrics(\n    hits=0, misses=0, evictions=0, expired=0, current_size=0, max_size=0\n)\n</code></pre> <p>Record cache performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>0</code> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>0</code> <code>evictions</code> <code>int</code> <p>Number of evictions</p> <code>0</code> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>0</code> <code>current_size</code> <code>int</code> <p>Current cache size</p> <code>0</code> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> <code>0</code>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_overall_metrics","title":"get_overall_metrics","text":"<pre><code>get_overall_metrics()\n</code></pre> <p>Get overall performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing overall metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_provider_metrics","title":"get_provider_metrics","text":"<pre><code>get_provider_metrics(provider=None)\n</code></pre> <p>Get provider-specific metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Specific provider name (returns all if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing provider metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_operation_metrics","title":"get_operation_metrics","text":"<pre><code>get_operation_metrics()\n</code></pre> <p>Get operation-specific metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing operation metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_recent_requests","title":"get_recent_requests","text":"<pre><code>get_recent_requests(limit=None)\n</code></pre> <p>Get recent request data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of requests to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent request data</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_recent_errors","title":"get_recent_errors","text":"<pre><code>get_recent_errors(limit=None)\n</code></pre> <p>Get recent error data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of errors to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent error data</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.get_hourly_trends","title":"get_hourly_trends","text":"<pre><code>get_hourly_trends(hours=24)\n</code></pre> <p>Get hourly trend data.</p> <p>Parameters:</p> Name Type Description Default <code>hours</code> <code>int</code> <p>Number of hours of data to return</p> <code>24</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of hourly statistics</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.generate_report","title":"generate_report","text":"<pre><code>generate_report()\n</code></pre> <p>Generate a comprehensive metrics report.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive metrics report</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.reset_metrics","title":"reset_metrics","text":"<pre><code>reset_metrics()\n</code></pre> <p>Reset all collected metrics.</p>"},{"location":"reference/deepsentinel/#deepsentinel.MetricsCollector.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the metrics collector and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceMetrics","title":"PerformanceMetrics  <code>dataclass</code>","text":"<pre><code>PerformanceMetrics(\n    request_count=0,\n    successful_requests=0,\n    failed_requests=0,\n    total_duration=0.0,\n    avg_duration=0.0,\n    min_duration=float(\"inf\"),\n    max_duration=0.0,\n    retry_count=0,\n    rate_limit_hits=0,\n)\n</code></pre> <p>Performance metrics for requests and operations.</p> <p>Attributes:</p> Name Type Description <code>request_count</code> <code>int</code> <p>Total number of requests</p> <code>successful_requests</code> <code>int</code> <p>Number of successful requests</p> <code>failed_requests</code> <code>int</code> <p>Number of failed requests</p> <code>total_duration</code> <code>float</code> <p>Total time spent on requests</p> <code>avg_duration</code> <code>float</code> <p>Average request duration</p> <code>min_duration</code> <code>float</code> <p>Minimum request duration</p> <code>max_duration</code> <code>float</code> <p>Maximum request duration</p> <code>retry_count</code> <code>int</code> <p>Total number of retries</p> <code>rate_limit_hits</code> <code>int</code> <p>Number of rate limit encounters</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceMetrics-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.PerformanceMetrics.update_duration","title":"update_duration","text":"<pre><code>update_duration(duration)\n</code></pre> <p>Update duration statistics.</p>"},{"location":"reference/deepsentinel/#deepsentinel.PerformanceMetrics.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.TokenUsageMetrics","title":"TokenUsageMetrics  <code>dataclass</code>","text":"<pre><code>TokenUsageMetrics(\n    total_tokens=0,\n    prompt_tokens=0,\n    completion_tokens=0,\n    total_cost=0.0,\n    requests_with_tokens=0,\n)\n</code></pre> <p>Token usage tracking metrics.</p> <p>Attributes:</p> Name Type Description <code>total_tokens</code> <code>int</code> <p>Total tokens used</p> <code>prompt_tokens</code> <code>int</code> <p>Tokens used for prompts</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used for completions</p> <code>total_cost</code> <code>float</code> <p>Estimated total cost</p> <code>requests_with_tokens</code> <code>int</code> <p>Number of requests that used tokens</p>"},{"location":"reference/deepsentinel/#deepsentinel.TokenUsageMetrics-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.TokenUsageMetrics.add_usage","title":"add_usage","text":"<pre><code>add_usage(prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0)\n</code></pre> <p>Add token usage data.</p>"},{"location":"reference/deepsentinel/#deepsentinel.TokenUsageMetrics.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.BaseLLMProvider","title":"BaseLLMProvider","text":"<pre><code>BaseLLMProvider(config, name)\n</code></pre> <p>               Bases: <code>ProviderAdapter</code></p> <p>Base class for LLM providers with common functionality.</p> <p>This class provides common implementations and utilities that most LLM providers can use, reducing code duplication.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.BaseLLMProvider-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.BaseLLMProvider.get_performance_metrics","title":"get_performance_metrics","text":"<pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for this provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter","title":"ProviderAdapter","text":"<pre><code>ProviderAdapter(config, name)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all LLM provider adapters.</p> <p>This class defines the interface that all provider implementations must follow, ensuring consistent behavior across different providers.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter-attributes","title":"Attributes","text":""},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre> <p>Get the underlying provider client.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The provider's client instance</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the provider is not initialized</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the provider is initialized.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.initialize","title":"initialize  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the provider client and connection.</p> <p>This method should set up the provider client, validate configuration, and establish any necessary connections.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up provider resources.</p> <p>This method should close connections, clean up resources, and prepare the provider for shutdown.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.health_check","title":"health_check  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on the provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.chat_completion","title":"chat_completion  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.chat_completion_stream","title":"chat_completion_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.text_completion","title":"text_completion  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.text_completion_stream","title":"text_completion_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.create_embeddings","title":"create_embeddings  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.list_models","title":"list_models  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.get_model","title":"get_model  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.transcribe_audio","title":"transcribe_audio  <code>async</code>","text":"<pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.translate_audio","title":"translate_audio  <code>async</code>","text":"<pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.generate_image","title":"generate_image  <code>async</code>","text":"<pre><code>generate_image(prompt, model='dall-e-2', **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.validate_request","title":"validate_request","text":"<pre><code>validate_request(request)\n</code></pre> <p>Validate a request before processing.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>Request to validate</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the request is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderAdapter.handle_provider_error","title":"handle_provider_error","text":"<pre><code>handle_provider_error(error, operation)\n</code></pre> <p>Handle and wrap provider-specific errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original error from the provider</p> required <code>operation</code> <code>str</code> <p>The operation that failed</p> required <p>Raises:</p> Type Description <code>ProviderError</code> <p>Wrapped provider error</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider","title":"OpenAIProvider","text":"<pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.transcribe_audio","title":"transcribe_audio  <code>async</code>","text":"<pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.translate_audio","title":"translate_audio  <code>async</code>","text":"<pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.OpenAIProvider.generate_image","title":"generate_image  <code>async</code>","text":"<pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider","title":"AnthropicProvider","text":"<pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p>"},{"location":"reference/deepsentinel/#deepsentinel.AnthropicProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry","title":"ProviderRegistry","text":"<pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry-attributes","title":"Attributes","text":""},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.providers","title":"providers  <code>property</code>","text":"<pre><code>providers\n</code></pre> <p>Get all registered providers.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.provider_names","title":"provider_names  <code>property</code>","text":"<pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.default_provider","title":"default_provider  <code>property</code>","text":"<pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.register_provider_class","title":"register_provider_class","text":"<pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.register_model_mapping","title":"register_model_mapping","text":"<pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.register_model_mappings","title":"register_model_mappings","text":"<pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_provider_for_model","title":"get_provider_for_model","text":"<pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_models_for_provider","title":"get_models_for_provider","text":"<pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_provider_metadata","title":"get_provider_metadata","text":"<pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.set_failover_chain","title":"set_failover_chain","text":"<pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_failover_chain","title":"get_failover_chain","text":"<pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.create_provider","title":"create_provider","text":"<pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.register_provider","title":"register_provider  <code>async</code>","text":"<pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.unregister_provider","title":"unregister_provider","text":"<pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_provider","title":"get_provider","text":"<pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.get_provider_with_model_support","title":"get_provider_with_model_support","text":"<pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.has_provider","title":"has_provider","text":"<pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.set_default_provider","title":"set_default_provider","text":"<pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.initialize_all","title":"initialize_all  <code>async</code>","text":"<pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.cleanup_all","title":"cleanup_all  <code>async</code>","text":"<pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.health_check_all","title":"health_check_all  <code>async</code>","text":"<pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.ProviderRegistry.from_config","title":"from_config  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatRequest","title":"ChatRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>messages</code> <code>List[Message]</code> <p>List of conversation messages</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>functions</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional function definitions</p> <code>function_call</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional function call preference</p> <code>tools</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional tool definitions</p> <code>tool_choice</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional tool choice preference</p>"},{"location":"reference/deepsentinel/#deepsentinel.ChatResponse","title":"ChatResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[Choice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionRequest","title":"CompletionRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for text completions.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>str</code> <p>Model identifier</p> <code>prompt</code> <code>Union[str, List[str]]</code> <p>Text prompt</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>n</code> <code>Optional[int]</code> <p>Number of completions to generate</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>logprobs</code> <code>Optional[int]</code> <p>Number of log probabilities to return</p> <code>echo</code> <code>bool</code> <p>Whether to echo the prompt</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>best_of</code> <code>Optional[int]</code> <p>Number of completions to generate server-side</p> <code>logit_bias</code> <code>Optional[Dict[str, float]]</code> <p>Logit bias adjustments</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>suffix</code> <code>Optional[str]</code> <p>Optional suffix for completion</p>"},{"location":"reference/deepsentinel/#deepsentinel.CompletionResponse","title":"CompletionResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for text completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[CompletionChoice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingRequest","title":"EmbeddingRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>Union[str, List[str]]</code> <p>Text to embed</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>encoding_format</code> <code>Optional[str]</code> <p>Encoding format for embeddings</p> <code>dimensions</code> <code>Optional[int]</code> <p>Number of dimensions for embeddings</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p>"},{"location":"reference/deepsentinel/#deepsentinel.EmbeddingResponse","title":"EmbeddingResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>str</code> <p>Object type</p> <code>data</code> <code>List[Embedding]</code> <p>List of embeddings</p> <code>model</code> <code>str</code> <p>Model used</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p>"},{"location":"reference/deepsentinel/#deepsentinel.Message","title":"Message","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single message in a conversation.</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>MessageRole</code> <p>The role of the message sender</p> <code>content</code> <code>Optional[str]</code> <p>The message content</p> <code>name</code> <code>Optional[str]</code> <p>Optional name of the sender</p> <code>function_call</code> <code>Optional[Dict[str, Any]]</code> <p>Optional function call data</p> <code>tool_calls</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional list of tool calls</p> <code>tool_call_id</code> <code>Optional[str]</code> <p>Optional tool call identifier</p>"},{"location":"reference/deepsentinel/#deepsentinel.Message-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.Message.validate_content","title":"validate_content","text":"<pre><code>validate_content(v, values)\n</code></pre> <p>Validate that content is provided for most message types.</p>"},{"location":"reference/deepsentinel/#deepsentinel-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.get_global_registry","title":"get_global_registry","text":"<pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p>"},{"location":"reference/deepsentinel/#deepsentinel-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.api","title":"api","text":"<p>API client for DeepSentinel compliance services.</p> <p>This package provides client interfaces for interacting with DeepSentinel's compliance, audit, and API services.</p>"},{"location":"reference/deepsentinel/#deepsentinel.api-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.api.DeepSentinelAPIClient","title":"DeepSentinelAPIClient","text":"<pre><code>DeepSentinelAPIClient(config)\n</code></pre> <p>Main API client for DeepSentinel compliance services.</p> <p>This class handles authentication, request/response management, rate limiting, and communication with DeepSentinel's API endpoints.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>logger</code> <p>Structured logger</p> <code>base_url</code> <p>Base URL for API requests</p> <code>session</code> <p>Aiohttp client session</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize client session.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close client session.</p> <code></code> request <code>async</code> \u00b6 <pre><code>request(\n    method, path, data=None, params=None, headers=None, timeout=None, retry_count=0\n)\n</code></pre> <p>Make an API request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Additional headers</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>Request timeout</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>Current retry count</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limit is exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code>DeepSentinelError</code> <p>For other API errors</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(path, params=None, **kwargs)\n</code></pre> <p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> post <code>async</code> \u00b6 <pre><code>post(path, data=None, **kwargs)\n</code></pre> <p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> put <code>async</code> \u00b6 <pre><code>put(path, data=None, **kwargs)\n</code></pre> <p>Make a PUT request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(path, **kwargs)\n</code></pre> <p>Make a DELETE request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> verify_credentials <code>async</code> \u00b6 <pre><code>verify_credentials()\n</code></pre> <p>Verify API credentials.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if credentials are valid, False otherwise</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.api.ComplianceAPI","title":"ComplianceAPI","text":"<pre><code>ComplianceAPI(client)\n</code></pre> <p>Compliance API client for DeepSentinel services.</p> <p>This class provides specialized methods for compliance validation, policy management, and content scanning services.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> validate_text <code>async</code> \u00b6 <pre><code>validate_text(text, policy_ids=None, context=None)\n</code></pre> <p>Validate text content against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to validate</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> scan_for_sensitive_data <code>async</code> \u00b6 <pre><code>scan_for_sensitive_data(\n    content, content_type=\"text/plain\", sensitivity=\"medium\", types=None\n)\n</code></pre> <p>Scan content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to scan</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>sensitivity</code> <code>str</code> <p>Scanning sensitivity (low, medium, high)</p> <code>'medium'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to scan for</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Scanning results</p> <code></code> redact_sensitive_data <code>async</code> \u00b6 <pre><code>redact_sensitive_data(\n    content, content_type=\"text/plain\", types=None, replacement=\"[REDACTED]\"\n)\n</code></pre> <p>Redact sensitive data from content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to redact</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to redact</p> <code>None</code> <code>replacement</code> <code>str</code> <p>Replacement string for redacted content</p> <code>'[REDACTED]'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redaction results with redacted content</p> <code></code> validate_request <code>async</code> \u00b6 <pre><code>validate_request(request_data, request_type, policy_ids=None)\n</code></pre> <p>Validate a request against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data to validate</p> required <code>request_type</code> <code>str</code> <p>Type of request (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> validate_response <code>async</code> \u00b6 <pre><code>validate_response(response_data, request_data, response_type, policy_ids=None)\n</code></pre> <p>Validate a response against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data to validate</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Original request data</p> required <code>response_type</code> <code>str</code> <p>Type of response (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> get_policies <code>async</code> \u00b6 <pre><code>get_policies(active_only=True)\n</code></pre> <p>Get available compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>active_only</code> <code>bool</code> <p>Only return active policies</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of available policies</p> <code></code> get_policy <code>async</code> \u00b6 <pre><code>get_policy(policy_id)\n</code></pre> <p>Get details for a specific compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Policy details</p> <code></code> create_custom_policy <code>async</code> \u00b6 <pre><code>create_custom_policy(policy_data)\n</code></pre> <p>Create a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_data</code> <code>Dict[str, Any]</code> <p>Policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created policy details</p> <code></code> update_custom_policy <code>async</code> \u00b6 <pre><code>update_custom_policy(policy_id, policy_data)\n</code></pre> <p>Update a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to update</p> required <code>policy_data</code> <code>Dict[str, Any]</code> <p>Updated policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated policy details</p> <code></code> delete_custom_policy <code>async</code> \u00b6 <pre><code>delete_custom_policy(policy_id)\n</code></pre> <p>Delete a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to delete</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion result</p> <code></code> get_detection_patterns <code>async</code> \u00b6 <pre><code>get_detection_patterns(pattern_type=None)\n</code></pre> <p>Get available detection patterns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_type</code> <code>Optional[str]</code> <p>Optional type of patterns to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of detection patterns</p> <code></code> create_custom_pattern <code>async</code> \u00b6 <pre><code>create_custom_pattern(pattern_data)\n</code></pre> <p>Create a custom detection pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_data</code> <code>Dict[str, Any]</code> <p>Pattern configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created pattern details</p> <code></code> get_compliance_report <code>async</code> \u00b6 <pre><code>get_compliance_report(start_date, end_date, report_type='summary')\n</code></pre> <p>Get a compliance report for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Start date in ISO format</p> required <code>end_date</code> <code>str</code> <p>End date in ISO format</p> required <code>report_type</code> <code>str</code> <p>Type of report (summary, detailed)</p> <code>'summary'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance report data</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check compliance API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.api.AuditAPI","title":"AuditAPI","text":"<pre><code>AuditAPI(client)\n</code></pre> <p>Audit API client for DeepSentinel services.</p> <p>This class provides specialized methods for managing audit logs, tracking events, and retrieving compliance audit trails.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event_data, sync=False)\n</code></pre> <p>Log an audit event to the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>event_data</code> <code>Dict[str, Any]</code> <p>Audit event data</p> required <code>sync</code> <code>bool</code> <p>Whether to wait for log confirmation</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Log confirmation or acknowledgment</p> <code></code> log_batch_events <code>async</code> \u00b6 <pre><code>log_batch_events(events)\n</code></pre> <p>Log multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict[str, Any]]</code> <p>List of audit event data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Batch log confirmation</p> <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(\n    start_time=None,\n    end_time=None,\n    user_id=None,\n    session_id=None,\n    event_types=None,\n    limit=100,\n    offset=0,\n    sort=\"timestamp:desc\",\n)\n</code></pre> <p>Get audit events filtered by criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Filter by user ID</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Filter by session ID</p> <code>None</code> <code>event_types</code> <code>Optional[List[str]]</code> <p>Filter by event types</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <code>sort</code> <code>str</code> <p>Sorting field and direction</p> <code>'timestamp:desc'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Filtered audit events</p> <code></code> get_event <code>async</code> \u00b6 <pre><code>get_event(event_id)\n</code></pre> <p>Get details for a specific audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>str</code> <p>ID of the audit event</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit event details</p> <code></code> search_events <code>async</code> \u00b6 <pre><code>search_events(query, limit=100, offset=0)\n</code></pre> <p>Search audit events with a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Search query string</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results</p> <code></code> get_user_activity <code>async</code> \u00b6 <pre><code>get_user_activity(user_id, limit=100)\n</code></pre> <p>Get activity history for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>User activity history</p> <code></code> get_session_activity <code>async</code> \u00b6 <pre><code>get_session_activity(session_id)\n</code></pre> <p>Get activity history for a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Session activity history</p> <code></code> get_audit_trail_summary <code>async</code> \u00b6 <pre><code>get_audit_trail_summary(start_time=None, end_time=None)\n</code></pre> <p>Get summary statistics for the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit trail summary statistics</p> <code></code> export_audit_logs <code>async</code> \u00b6 <pre><code>export_audit_logs(start_time, end_time, format='json', filters=None)\n</code></pre> <p>Export audit logs for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>ISO timestamp for earliest events</p> required <code>end_time</code> <code>str</code> <p>ISO timestamp for latest events</p> required <code>format</code> <code>str</code> <p>Export format (json, csv)</p> <code>'json'</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional filters to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Export details including download URL</p> <code></code> get_compliance_violations <code>async</code> \u00b6 <pre><code>get_compliance_violations(\n    start_time=None, end_time=None, severity=None, limit=100, offset=0\n)\n</code></pre> <p>Get compliance violations from audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest violations</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest violations</p> <code>None</code> <code>severity</code> <code>Optional[str]</code> <p>Filter by severity level</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of violations to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance violations</p> <code></code> get_audit_settings <code>async</code> \u00b6 <pre><code>get_audit_settings()\n</code></pre> <p>Get current audit settings and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit settings</p> <code></code> update_audit_settings <code>async</code> \u00b6 <pre><code>update_audit_settings(settings)\n</code></pre> <p>Update audit settings and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Dict[str, Any]</code> <p>Updated settings data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated audit settings</p> <code></code> purge_audit_logs <code>async</code> \u00b6 <pre><code>purge_audit_logs(older_than, event_types=None, dry_run=True)\n</code></pre> <p>Purge audit logs older than specified time.</p> <p>Parameters:</p> Name Type Description Default <code>older_than</code> <code>str</code> <p>ISO timestamp or duration (e.g. \"90d\")</p> required <code>event_types</code> <code>Optional[List[str]]</code> <p>Optional event types to purge</p> <code>None</code> <code>dry_run</code> <code>bool</code> <p>Only simulate purge and return stats</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Purge operation results</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check audit API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.api-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.api.audit","title":"audit","text":"<p>Audit API endpoints for DeepSentinel services.</p> <p>This module provides specialized API client functionality for audit logging, event tracking, and compliance audit trail management.</p> Classes\u00b6 AuditAPI \u00b6 <pre><code>AuditAPI(client)\n</code></pre> <p>Audit API client for DeepSentinel services.</p> <p>This class provides specialized methods for managing audit logs, tracking events, and retrieving compliance audit trails.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event_data, sync=False)\n</code></pre> <p>Log an audit event to the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>event_data</code> <code>Dict[str, Any]</code> <p>Audit event data</p> required <code>sync</code> <code>bool</code> <p>Whether to wait for log confirmation</p> <code>False</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Log confirmation or acknowledgment</p> <code></code> log_batch_events <code>async</code> \u00b6 <pre><code>log_batch_events(events)\n</code></pre> <p>Log multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Dict[str, Any]]</code> <p>List of audit event data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Batch log confirmation</p> <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(\n    start_time=None,\n    end_time=None,\n    user_id=None,\n    session_id=None,\n    event_types=None,\n    limit=100,\n    offset=0,\n    sort=\"timestamp:desc\",\n)\n</code></pre> <p>Get audit events filtered by criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Filter by user ID</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Filter by session ID</p> <code>None</code> <code>event_types</code> <code>Optional[List[str]]</code> <p>Filter by event types</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <code>sort</code> <code>str</code> <p>Sorting field and direction</p> <code>'timestamp:desc'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Filtered audit events</p> <code></code> get_event <code>async</code> \u00b6 <pre><code>get_event(event_id)\n</code></pre> <p>Get details for a specific audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event_id</code> <code>str</code> <p>ID of the audit event</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit event details</p> <code></code> search_events <code>async</code> \u00b6 <pre><code>search_events(query, limit=100, offset=0)\n</code></pre> <p>Search audit events with a query string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Search query string</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Search results</p> <code></code> get_user_activity <code>async</code> \u00b6 <pre><code>get_user_activity(user_id, limit=100)\n</code></pre> <p>Get activity history for a specific user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>User activity history</p> <code></code> get_session_activity <code>async</code> \u00b6 <pre><code>get_session_activity(session_id)\n</code></pre> <p>Get activity history for a specific session.</p> <p>Parameters:</p> Name Type Description Default <code>session_id</code> <code>str</code> <p>Session ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Session activity history</p> <code></code> get_audit_trail_summary <code>async</code> \u00b6 <pre><code>get_audit_trail_summary(start_time=None, end_time=None)\n</code></pre> <p>Get summary statistics for the audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest events</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest events</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit trail summary statistics</p> <code></code> export_audit_logs <code>async</code> \u00b6 <pre><code>export_audit_logs(start_time, end_time, format='json', filters=None)\n</code></pre> <p>Export audit logs for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>str</code> <p>ISO timestamp for earliest events</p> required <code>end_time</code> <code>str</code> <p>ISO timestamp for latest events</p> required <code>format</code> <code>str</code> <p>Export format (json, csv)</p> <code>'json'</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional filters to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Export details including download URL</p> <code></code> get_compliance_violations <code>async</code> \u00b6 <pre><code>get_compliance_violations(\n    start_time=None, end_time=None, severity=None, limit=100, offset=0\n)\n</code></pre> <p>Get compliance violations from audit trail.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[str]</code> <p>ISO timestamp for earliest violations</p> <code>None</code> <code>end_time</code> <code>Optional[str]</code> <p>ISO timestamp for latest violations</p> <code>None</code> <code>severity</code> <code>Optional[str]</code> <p>Filter by severity level</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of violations to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance violations</p> <code></code> get_audit_settings <code>async</code> \u00b6 <pre><code>get_audit_settings()\n</code></pre> <p>Get current audit settings and configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Audit settings</p> <code></code> update_audit_settings <code>async</code> \u00b6 <pre><code>update_audit_settings(settings)\n</code></pre> <p>Update audit settings and configuration.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Dict[str, Any]</code> <p>Updated settings data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated audit settings</p> <code></code> purge_audit_logs <code>async</code> \u00b6 <pre><code>purge_audit_logs(older_than, event_types=None, dry_run=True)\n</code></pre> <p>Purge audit logs older than specified time.</p> <p>Parameters:</p> Name Type Description Default <code>older_than</code> <code>str</code> <p>ISO timestamp or duration (e.g. \"90d\")</p> required <code>event_types</code> <code>Optional[List[str]]</code> <p>Optional event types to purge</p> <code>None</code> <code>dry_run</code> <code>bool</code> <p>Only simulate purge and return stats</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Purge operation results</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check audit API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.api.client","title":"client","text":"<p>Main API client for DeepSentinel compliance services.</p> <p>This module provides the core HTTP client functionality for communicating with DeepSentinel's compliance API services.</p> Classes\u00b6 DeepSentinelAPIClient \u00b6 <pre><code>DeepSentinelAPIClient(config)\n</code></pre> <p>Main API client for DeepSentinel compliance services.</p> <p>This class handles authentication, request/response management, rate limiting, and communication with DeepSentinel's API endpoints.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>logger</code> <p>Structured logger</p> <code>base_url</code> <p>Base URL for API requests</p> <code>session</code> <p>Aiohttp client session</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize client session.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close client session.</p> <code></code> request <code>async</code> \u00b6 <pre><code>request(\n    method, path, data=None, params=None, headers=None, timeout=None, retry_count=0\n)\n</code></pre> <p>Make an API request.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>str</code> <p>HTTP method</p> required <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>headers</code> <code>Optional[Dict[str, Any]]</code> <p>Additional headers</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>Request timeout</p> <code>None</code> <code>retry_count</code> <code>int</code> <p>Current retry count</p> <code>0</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <p>Raises:</p> Type Description <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limit is exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code>DeepSentinelError</code> <p>For other API errors</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(path, params=None, **kwargs)\n</code></pre> <p>Make a GET request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>params</code> <code>Optional[Dict[str, Any]]</code> <p>URL parameters</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> post <code>async</code> \u00b6 <pre><code>post(path, data=None, **kwargs)\n</code></pre> <p>Make a POST request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> put <code>async</code> \u00b6 <pre><code>put(path, data=None, **kwargs)\n</code></pre> <p>Make a PUT request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>data</code> <code>Optional[Dict[str, Any]]</code> <p>Request data</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(path, **kwargs)\n</code></pre> <p>Make a DELETE request.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>API path</p> required <code>**kwargs</code> <code>Any</code> <p>Additional request parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>API response</p> <code></code> verify_credentials <code>async</code> \u00b6 <pre><code>verify_credentials()\n</code></pre> <p>Verify API credentials.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if credentials are valid, False otherwise</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.api.compliance","title":"compliance","text":"<p>Compliance API endpoints for DeepSentinel services.</p> <p>This module provides specialized API client functionality for compliance validation, policy management, and content scanning services.</p> Classes\u00b6 ComplianceAPI \u00b6 <pre><code>ComplianceAPI(client)\n</code></pre> <p>Compliance API client for DeepSentinel services.</p> <p>This class provides specialized methods for compliance validation, policy management, and content scanning services.</p> <p>Attributes:</p> Name Type Description <code>client</code> <p>Base API client</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>DeepSentinelAPIClient</code> <p>Base API client instance</p> required Functions\u00b6 <code></code> validate_text <code>async</code> \u00b6 <pre><code>validate_text(text, policy_ids=None, context=None)\n</code></pre> <p>Validate text content against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text content to validate</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> scan_for_sensitive_data <code>async</code> \u00b6 <pre><code>scan_for_sensitive_data(\n    content, content_type=\"text/plain\", sensitivity=\"medium\", types=None\n)\n</code></pre> <p>Scan content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to scan</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>sensitivity</code> <code>str</code> <p>Scanning sensitivity (low, medium, high)</p> <code>'medium'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to scan for</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Scanning results</p> <code></code> redact_sensitive_data <code>async</code> \u00b6 <pre><code>redact_sensitive_data(\n    content, content_type=\"text/plain\", types=None, replacement=\"[REDACTED]\"\n)\n</code></pre> <p>Redact sensitive data from content.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>Content to redact</p> required <code>content_type</code> <code>str</code> <p>MIME type of content</p> <code>'text/plain'</code> <code>types</code> <code>Optional[List[str]]</code> <p>Optional list of data types to redact</p> <code>None</code> <code>replacement</code> <code>str</code> <p>Replacement string for redacted content</p> <code>'[REDACTED]'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Redaction results with redacted content</p> <code></code> validate_request <code>async</code> \u00b6 <pre><code>validate_request(request_data, request_type, policy_ids=None)\n</code></pre> <p>Validate a request against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data to validate</p> required <code>request_type</code> <code>str</code> <p>Type of request (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> validate_response <code>async</code> \u00b6 <pre><code>validate_response(response_data, request_data, response_type, policy_ids=None)\n</code></pre> <p>Validate a response against compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data to validate</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Original request data</p> required <code>response_type</code> <code>str</code> <p>Type of response (chat, completion, embedding)</p> required <code>policy_ids</code> <code>Optional[List[str]]</code> <p>Optional list of specific policy IDs to check</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Validation results</p> <code></code> get_policies <code>async</code> \u00b6 <pre><code>get_policies(active_only=True)\n</code></pre> <p>Get available compliance policies.</p> <p>Parameters:</p> Name Type Description Default <code>active_only</code> <code>bool</code> <p>Only return active policies</p> <code>True</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of available policies</p> <code></code> get_policy <code>async</code> \u00b6 <pre><code>get_policy(policy_id)\n</code></pre> <p>Get details for a specific compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Policy details</p> <code></code> create_custom_policy <code>async</code> \u00b6 <pre><code>create_custom_policy(policy_data)\n</code></pre> <p>Create a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_data</code> <code>Dict[str, Any]</code> <p>Policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created policy details</p> <code></code> update_custom_policy <code>async</code> \u00b6 <pre><code>update_custom_policy(policy_id, policy_data)\n</code></pre> <p>Update a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to update</p> required <code>policy_data</code> <code>Dict[str, Any]</code> <p>Updated policy configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Updated policy details</p> <code></code> delete_custom_policy <code>async</code> \u00b6 <pre><code>delete_custom_policy(policy_id)\n</code></pre> <p>Delete a custom compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_id</code> <code>str</code> <p>ID of the policy to delete</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Deletion result</p> <code></code> get_detection_patterns <code>async</code> \u00b6 <pre><code>get_detection_patterns(pattern_type=None)\n</code></pre> <p>Get available detection patterns.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_type</code> <code>Optional[str]</code> <p>Optional type of patterns to filter by</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>List of detection patterns</p> <code></code> create_custom_pattern <code>async</code> \u00b6 <pre><code>create_custom_pattern(pattern_data)\n</code></pre> <p>Create a custom detection pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern_data</code> <code>Dict[str, Any]</code> <p>Pattern configuration data</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Created pattern details</p> <code></code> get_compliance_report <code>async</code> \u00b6 <pre><code>get_compliance_report(start_date, end_date, report_type='summary')\n</code></pre> <p>Get a compliance report for a specified time period.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>Start date in ISO format</p> required <code>end_date</code> <code>str</code> <p>End date in ISO format</p> required <code>report_type</code> <code>str</code> <p>Type of report (summary, detailed)</p> <code>'summary'</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Compliance report data</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Check compliance API service health.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit","title":"audit","text":"<p>Audit logging and event tracking components.</p> <p>This module provides a comprehensive audit system for tracking operations, compliance checks, and performance metrics throughout the SDK.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.audit.AuditClient","title":"AuditClient","text":"<pre><code>AuditClient(\n    config,\n    storage_backend=None,\n    batch_size=100,\n    batch_interval_sec=5.0,\n    metrics_collector=None,\n)\n</code></pre> <p>Audit client for the DeepSentinel SDK.</p> <p>This class handles audit event logging, storage, batch processing, and performance metrics collection.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>storage</code> <p>Audit storage backend</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>batch_interval_sec</code> <p>Interval for batch processing in seconds</p> <code>pending_events</code> <code>List[AuditEvent]</code> <p>List of pending audit events</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>storage_backend</code> <code>Optional[AuditStorage]</code> <p>Custom storage backend (if not specified, one will be created based on the configuration)</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>100</code> <code>batch_interval_sec</code> <code>float</code> <p>Interval for batch processing in seconds</p> <code>5.0</code> <code>metrics_collector</code> <code>Optional[MetricsCollector]</code> <p>Optional metrics collector for performance tracking</p> <code>None</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the audit client.</p> <p>This sets up the storage backend and starts the batch processing task.</p> <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event)\n</code></pre> <p>Log an audit event.</p> <p>If batch processing is enabled, the event will be added to the batch. Otherwise, it will be stored immediately.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to log</p> required <code></code> log_events <code>async</code> \u00b6 <pre><code>log_events(events)\n</code></pre> <p>Log multiple audit events.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to log</p> required <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for the audit client.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Performance metrics including comprehensive stats</p> <code></code> get_metrics_report <code>async</code> \u00b6 <pre><code>get_metrics_report()\n</code></pre> <p>Get a comprehensive metrics report including trends.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Comprehensive metrics report</p> <code></code> log_audit_entry <code>async</code> \u00b6 <pre><code>log_audit_entry(entry)\n</code></pre> <p>Log an audit entry.</p> <p>This converts the entry to an appropriate audit event and logs it.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>AuditEntry</code> <p>Audit entry to log</p> required <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the audit client.</p> <p>This stops the batch processing task and cleans up the storage backend.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.AuditStorage","title":"AuditStorage","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for audit storage backends.</p> <p>This class defines the interface that all storage backends must implement for storing and retrieving audit events.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the storage backend.</p> <p>This method should be called before using the storage backend. It should set up any necessary resources (e.g., connections, files).</p> <code></code> store_event <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>The audit event to store</p> required <code></code> store_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the storage backend.</p> <p>This method should be called when the storage backend is no longer needed. It should release any resources (e.g., connections, files).</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.FileAuditStorage","title":"FileAuditStorage","text":"<pre><code>FileAuditStorage(\n    config,\n    log_dir=None,\n    file_format=\"jsonl\",\n    max_file_size_mb=10,\n    file_rotation_count=5,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>File-based storage backend for audit events.</p> <p>This class implements storage of audit events in local files, supporting both JSON and JSONL formats with rotation capabilities.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>log_dir</code> <p>Directory for audit log files</p> <code>file_format</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>max_file_size_mb</code> <p>Maximum file size before rotation</p> <code>file_rotation_count</code> <p>Number of files to keep during rotation</p> <code>current_file</code> <code>Optional[Path]</code> <p>Path to the current audit log file</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>log_dir</code> <code>Optional[str]</code> <p>Directory for audit log files (default: ./audit_logs)</p> <code>None</code> <code>file_format</code> <code>str</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>'jsonl'</code> <code>max_file_size_mb</code> <code>int</code> <p>Maximum file size before rotation (in MB)</p> <code>10</code> <code>file_rotation_count</code> <code>int</code> <p>Number of files to keep during rotation</p> <code>5</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the file storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the file.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.APIAuditStorage","title":"APIAuditStorage","text":"<pre><code>APIAuditStorage(\n    config,\n    base_url,\n    api_key=None,\n    batch_size=50,\n    connection_timeout=10.0,\n    max_connections=10,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>API-based storage backend for audit events.</p> <p>This class implements storage of audit events via HTTP API calls, supporting connection pooling and batch processing.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>base_url</code> <p>Base URL for the audit API</p> <code>api_key</code> <p>API key for authentication</p> <code>session</code> <code>Optional[ClientSession]</code> <p>HTTP session for connection pooling</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>base_url</code> <code>str</code> <p>Base URL for the audit API</p> required <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>50</code> <code>connection_timeout</code> <code>float</code> <p>Timeout for API connections in seconds</p> <code>10.0</code> <code>max_connections</code> <code>int</code> <p>Maximum number of connections in the pool</p> <code>10</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the API storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event via API.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch via API.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria via API.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.DatabaseAuditStorage","title":"DatabaseAuditStorage","text":"<pre><code>DatabaseAuditStorage(config, **db_config)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>Database-based storage backend for audit events.</p> <p>This is a placeholder implementation. In a real implementation, this would use an async database client to store events in a database.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>**db_config</code> <code>Any</code> <p>Database-specific configuration</p> <code>{}</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the database storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the database.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch in the database.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria from the database.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.AuditEvent","title":"AuditEvent","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for all audit events.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the event</p> <code>event_type</code> <code>AuditEventType</code> <p>Type of the audit event</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the event</p> <code>source</code> <code>str</code> <p>Source of the event (component, module)</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional event details</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional contextual metadata</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert event to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the event</p> <code></code> to_audit_entry \u00b6 <pre><code>to_audit_entry()\n</code></pre> <p>Convert event to audit entry.</p> <p>Returns:</p> Type Description <code>AuditEntry</code> <p>AuditEntry representation of the event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.AuditEventType","title":"AuditEventType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of audit event types.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.ChatOperationEvent","title":"ChatOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for chat operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for the chat</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.CompletionOperationEvent","title":"CompletionOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for text completion operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for completion</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.ComplianceViolationEvent","title":"ComplianceViolationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> <code>violation_type</code> <code>str</code> <p>Type of violation</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> <code>action_taken</code> <code>str</code> <p>Action taken in response to the violation</p> <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details about the violation</p> <code>resource_id</code> <code>Optional[str]</code> <p>Identifier of the resource with violation</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.ConfigurationChangeEvent","title":"ConfigurationChangeEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for configuration changes.</p> <p>Attributes:</p> Name Type Description <code>config_section</code> <code>str</code> <p>Section of configuration being changed</p> <code>old_value</code> <code>Any</code> <p>Previous configuration value</p> <code>new_value</code> <code>Any</code> <p>New configuration value</p> <code>changed_by</code> <code>Optional[str]</code> <p>Identifier of who made the change</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.EmbeddingOperationEvent","title":"EmbeddingOperationEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for embedding operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for embeddings</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.OperationMetrics","title":"OperationMetrics","text":"<p>               Bases: <code>BaseModel</code></p> <p>Performance metrics for an operation.</p> <p>Attributes:</p> Name Type Description <code>total_duration_ms</code> <code>Optional[float]</code> <p>Total duration of the operation in milliseconds</p> <code>request_duration_ms</code> <code>Optional[float]</code> <p>Duration of the request phase in milliseconds</p> <code>response_duration_ms</code> <code>Optional[float]</code> <p>Duration of the response phase in milliseconds</p> <code>token_count</code> <code>Optional[int]</code> <p>Number of tokens used</p> <code>prompt_tokens</code> <code>Optional[int]</code> <p>Number of prompt tokens</p> <code>completion_tokens</code> <code>Optional[int]</code> <p>Number of completion tokens</p> <code>tpm</code> <code>Optional[float]</code> <p>Tokens per minute rate</p> <code>rpm</code> <code>Optional[float]</code> <p>Requests per minute rate</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.PerformanceMetricsEvent","title":"PerformanceMetricsEvent","text":"<p>               Bases: <code>AuditEvent</code></p> <p>Audit event for performance metrics.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> <code>model</code> <code>Optional[str]</code> <p>Model used for the operation</p> <code>provider</code> <code>Optional[str]</code> <p>Provider of the model</p> <code>component</code> <code>Optional[str]</code> <p>Component being measured</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.SystemErrorEvent","title":"SystemErrorEvent","text":"<pre><code>SystemErrorEvent(**data)\n</code></pre> <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for system errors.</p> <p>Attributes:</p> Name Type Description <code>error_type</code> <code>str</code> <p>Type of error</p> <code>error_message</code> <code>str</code> <p>Error message</p> <code>stack_trace</code> <code>Optional[str]</code> <p>Stack trace of the error</p> <code>component</code> <code>str</code> <p>Component where the error occurred</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.audit.create_chat_request_event","title":"create_chat_request_event","text":"<pre><code>create_chat_request_event(\n    model, provider, request_data, user_id=None, session_id=None, metrics=None\n)\n</code></pre> <p>Create a chat request audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat request audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.create_chat_response_event","title":"create_chat_response_event","text":"<pre><code>create_chat_response_event(\n    model,\n    provider,\n    request_data,\n    response_data,\n    user_id=None,\n    session_id=None,\n    metrics=None,\n    request_id=None,\n)\n</code></pre> <p>Create a chat response audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <code>request_id</code> <code>Optional[str]</code> <p>Optional request identifier to link with request event</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat response audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.create_compliance_violation_event","title":"create_compliance_violation_event","text":"<pre><code>create_compliance_violation_event(\n    policy_name,\n    violation_type,\n    severity,\n    action_taken,\n    violation_details,\n    user_id=None,\n    session_id=None,\n    resource_id=None,\n)\n</code></pre> <p>Create a compliance violation audit event.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation</p> required <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> required <code>action_taken</code> <code>str</code> <p>Action taken in response</p> required <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details of the violation</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>resource_id</code> <code>Optional[str]</code> <p>Optional resource identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>ComplianceViolationEvent</code> <p>Compliance violation audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.create_performance_metrics_event","title":"create_performance_metrics_event","text":"<pre><code>create_performance_metrics_event(\n    operation_type,\n    metrics,\n    model=None,\n    provider=None,\n    component=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a performance metrics audit event.</p> <p>Parameters:</p> Name Type Description Default <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> required <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> required <code>model</code> <code>Optional[str]</code> <p>Optional model identifier</p> <code>None</code> <code>provider</code> <code>Optional[str]</code> <p>Optional provider name</p> <code>None</code> <code>component</code> <code>Optional[str]</code> <p>Optional component name</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>PerformanceMetricsEvent</code> <p>Performance metrics audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit.create_system_error_event","title":"create_system_error_event","text":"<pre><code>create_system_error_event(\n    error_type,\n    error_message,\n    component,\n    stack_trace=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a system error audit event.</p> <p>Parameters:</p> Name Type Description Default <code>error_type</code> <code>str</code> <p>Type of error</p> required <code>error_message</code> <code>str</code> <p>Error message</p> required <code>component</code> <code>str</code> <p>Component where the error occurred</p> required <code>stack_trace</code> <code>Optional[str]</code> <p>Optional stack trace</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>SystemErrorEvent</code> <p>System error audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.audit-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.audit.client","title":"client","text":"<p>Audit client for DeepSentinel SDK.</p> <p>This module implements the audit client that handles audit event logging, storage backends, batch processing, and performance metrics collection.</p> Classes\u00b6 AuditStorage \u00b6 <p>               Bases: <code>ABC</code></p> <p>Abstract base class for audit storage backends.</p> <p>This class defines the interface that all storage backends must implement for storing and retrieving audit events.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the storage backend.</p> <p>This method should be called before using the storage backend. It should set up any necessary resources (e.g., connections, files).</p> <code></code> store_event <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>The audit event to store</p> required <code></code> store_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the storage backend.</p> <p>This method should be called when the storage backend is no longer needed. It should release any resources (e.g., connections, files).</p> <code></code> FileAuditStorage \u00b6 <pre><code>FileAuditStorage(\n    config,\n    log_dir=None,\n    file_format=\"jsonl\",\n    max_file_size_mb=10,\n    file_rotation_count=5,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>File-based storage backend for audit events.</p> <p>This class implements storage of audit events in local files, supporting both JSON and JSONL formats with rotation capabilities.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>log_dir</code> <p>Directory for audit log files</p> <code>file_format</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>max_file_size_mb</code> <p>Maximum file size before rotation</p> <code>file_rotation_count</code> <p>Number of files to keep during rotation</p> <code>current_file</code> <code>Optional[Path]</code> <p>Path to the current audit log file</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>log_dir</code> <code>Optional[str]</code> <p>Directory for audit log files (default: ./audit_logs)</p> <code>None</code> <code>file_format</code> <code>str</code> <p>Format of audit log files (\"json\" or \"jsonl\")</p> <code>'jsonl'</code> <code>max_file_size_mb</code> <code>int</code> <p>Maximum file size before rotation (in MB)</p> <code>10</code> <code>file_rotation_count</code> <code>int</code> <p>Number of files to keep during rotation</p> <code>5</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the file storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the file.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p> <code></code> APIAuditStorage \u00b6 <pre><code>APIAuditStorage(\n    config,\n    base_url,\n    api_key=None,\n    batch_size=50,\n    connection_timeout=10.0,\n    max_connections=10,\n)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>API-based storage backend for audit events.</p> <p>This class implements storage of audit events via HTTP API calls, supporting connection pooling and batch processing.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>base_url</code> <p>Base URL for the audit API</p> <code>api_key</code> <p>API key for authentication</p> <code>session</code> <code>Optional[ClientSession]</code> <p>HTTP session for connection pooling</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>base_url</code> <code>str</code> <p>Base URL for the audit API</p> required <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>50</code> <code>connection_timeout</code> <code>float</code> <p>Timeout for API connections in seconds</p> <code>10.0</code> <code>max_connections</code> <code>int</code> <p>Maximum number of connections in the pool</p> <code>10</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the API storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event via API.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch via API.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria via API.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p> <code></code> DatabaseAuditStorage \u00b6 <pre><code>DatabaseAuditStorage(config, **db_config)\n</code></pre> <p>               Bases: <code>AuditStorage</code></p> <p>Database-based storage backend for audit events.</p> <p>This is a placeholder implementation. In a real implementation, this would use an async database client to store events in a database.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>**db_config</code> <code>Any</code> <p>Database-specific configuration</p> <code>{}</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the database storage backend.</p> <code></code> store_event <code>async</code> \u00b6 <pre><code>store_event(event)\n</code></pre> <p>Store a single audit event in the database.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to store</p> required <code></code> store_events <code>async</code> \u00b6 <pre><code>store_events(events)\n</code></pre> <p>Store multiple audit events in batch in the database.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to store</p> required <code></code> get_events <code>async</code> \u00b6 <pre><code>get_events(start_time=None, end_time=None, filters=None, limit=100, offset=0)\n</code></pre> <p>Retrieve audit events based on criteria from the database.</p> <p>Parameters:</p> Name Type Description Default <code>start_time</code> <code>Optional[datetime]</code> <p>Optional start time for filtering events</p> <code>None</code> <code>end_time</code> <code>Optional[datetime]</code> <p>Optional end time for filtering events</p> <code>None</code> <code>filters</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional filters</p> <code>None</code> <code>limit</code> <code>int</code> <p>Maximum number of events to return</p> <code>100</code> <code>offset</code> <code>int</code> <p>Offset for pagination</p> <code>0</code> <p>Returns:</p> Type Description <code>List[AuditEvent]</code> <p>List of matching audit events</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources.</p> <code></code> AuditClient \u00b6 <pre><code>AuditClient(\n    config,\n    storage_backend=None,\n    batch_size=100,\n    batch_interval_sec=5.0,\n    metrics_collector=None,\n)\n</code></pre> <p>Audit client for the DeepSentinel SDK.</p> <p>This class handles audit event logging, storage, batch processing, and performance metrics collection.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Audit configuration</p> <code>storage</code> <p>Audit storage backend</p> <code>batch_size</code> <p>Maximum batch size for event submission</p> <code>batch_interval_sec</code> <p>Interval for batch processing in seconds</p> <code>pending_events</code> <code>List[AuditEvent]</code> <p>List of pending audit events</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>AuditConfig</code> <p>Audit configuration</p> required <code>storage_backend</code> <code>Optional[AuditStorage]</code> <p>Custom storage backend (if not specified, one will be created based on the configuration)</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Maximum batch size for event submission</p> <code>100</code> <code>batch_interval_sec</code> <code>float</code> <p>Interval for batch processing in seconds</p> <code>5.0</code> <code>metrics_collector</code> <code>Optional[MetricsCollector]</code> <p>Optional metrics collector for performance tracking</p> <code>None</code> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the audit client.</p> <p>This sets up the storage backend and starts the batch processing task.</p> <code></code> log_event <code>async</code> \u00b6 <pre><code>log_event(event)\n</code></pre> <p>Log an audit event.</p> <p>If batch processing is enabled, the event will be added to the batch. Otherwise, it will be stored immediately.</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>AuditEvent</code> <p>Audit event to log</p> required <code></code> log_events <code>async</code> \u00b6 <pre><code>log_events(events)\n</code></pre> <p>Log multiple audit events.</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[AuditEvent]</code> <p>List of audit events to log</p> required <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for the audit client.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Performance metrics including comprehensive stats</p> <code></code> get_metrics_report <code>async</code> \u00b6 <pre><code>get_metrics_report()\n</code></pre> <p>Get a comprehensive metrics report including trends.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Comprehensive metrics report</p> <code></code> log_audit_entry <code>async</code> \u00b6 <pre><code>log_audit_entry(entry)\n</code></pre> <p>Log an audit entry.</p> <p>This converts the entry to an appropriate audit event and logs it.</p> <p>Parameters:</p> Name Type Description Default <code>entry</code> <code>AuditEntry</code> <p>Audit entry to log</p> required <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up resources used by the audit client.</p> <p>This stops the batch processing task and cleans up the storage backend.</p> Functions\u00b6"},{"location":"reference/deepsentinel/#deepsentinel.audit.events","title":"events","text":"<p>Audit event types and schemas for DeepSentinel SDK.</p> <p>This module defines comprehensive audit event types and schemas for tracking operations, compliance violations, and performance metrics.</p> Classes\u00b6 AuditEventType \u00b6 <p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of audit event types.</p> <code></code> OperationMetrics \u00b6 <p>               Bases: <code>BaseModel</code></p> <p>Performance metrics for an operation.</p> <p>Attributes:</p> Name Type Description <code>total_duration_ms</code> <code>Optional[float]</code> <p>Total duration of the operation in milliseconds</p> <code>request_duration_ms</code> <code>Optional[float]</code> <p>Duration of the request phase in milliseconds</p> <code>response_duration_ms</code> <code>Optional[float]</code> <p>Duration of the response phase in milliseconds</p> <code>token_count</code> <code>Optional[int]</code> <p>Number of tokens used</p> <code>prompt_tokens</code> <code>Optional[int]</code> <p>Number of prompt tokens</p> <code>completion_tokens</code> <code>Optional[int]</code> <p>Number of completion tokens</p> <code>tpm</code> <code>Optional[float]</code> <p>Tokens per minute rate</p> <code>rpm</code> <code>Optional[float]</code> <p>Requests per minute rate</p> <code></code> AuditEvent \u00b6 <p>               Bases: <code>BaseModel</code></p> <p>Base class for all audit events.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the event</p> <code>event_type</code> <code>AuditEventType</code> <p>Type of the audit event</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the event</p> <code>source</code> <code>str</code> <p>Source of the event (component, module)</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional event details</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional contextual metadata</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert event to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the event</p> <code></code> to_audit_entry \u00b6 <pre><code>to_audit_entry()\n</code></pre> <p>Convert event to audit entry.</p> <p>Returns:</p> Type Description <code>AuditEntry</code> <p>AuditEntry representation of the event</p> <code></code> ChatOperationEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for chat operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for the chat</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> CompletionOperationEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for text completion operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for completion</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> EmbeddingOperationEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for embedding operations.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>str</code> <p>Identifier of the request</p> <code>model</code> <code>str</code> <p>Model used for embeddings</p> <code>provider</code> <code>str</code> <p>Provider of the model</p> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Performance metrics</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> ComplianceViolationEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> <code>violation_type</code> <code>str</code> <p>Type of violation</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> <code>action_taken</code> <code>str</code> <p>Action taken in response to the violation</p> <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details about the violation</p> <code>resource_id</code> <code>Optional[str]</code> <p>Identifier of the resource with violation</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> PerformanceMetricsEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for performance metrics.</p> <p>Attributes:</p> Name Type Description <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> <code>model</code> <code>Optional[str]</code> <p>Model used for the operation</p> <code>provider</code> <code>Optional[str]</code> <p>Provider of the model</p> <code>component</code> <code>Optional[str]</code> <p>Component being measured</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> SystemErrorEvent \u00b6 <pre><code>SystemErrorEvent(**data)\n</code></pre> <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for system errors.</p> <p>Attributes:</p> Name Type Description <code>error_type</code> <code>str</code> <p>Type of error</p> <code>error_message</code> <code>str</code> <p>Error message</p> <code>stack_trace</code> <code>Optional[str]</code> <p>Stack trace of the error</p> <code>component</code> <code>str</code> <p>Component where the error occurred</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> <code></code> ConfigurationChangeEvent \u00b6 <p>               Bases: <code>AuditEvent</code></p> <p>Audit event for configuration changes.</p> <p>Attributes:</p> Name Type Description <code>config_section</code> <code>str</code> <p>Section of configuration being changed</p> <code>old_value</code> <code>Any</code> <p>Previous configuration value</p> <code>new_value</code> <code>Any</code> <p>New configuration value</p> <code>changed_by</code> <code>Optional[str]</code> <p>Identifier of who made the change</p> Functions\u00b6 <code></code> update_details \u00b6 <pre><code>update_details()\n</code></pre> <p>Update details with specialized fields.</p> Functions\u00b6 <code></code> create_chat_request_event \u00b6 <pre><code>create_chat_request_event(\n    model, provider, request_data, user_id=None, session_id=None, metrics=None\n)\n</code></pre> <p>Create a chat request audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat request audit event</p> <code></code> create_chat_response_event \u00b6 <pre><code>create_chat_response_event(\n    model,\n    provider,\n    request_data,\n    response_data,\n    user_id=None,\n    session_id=None,\n    metrics=None,\n    request_id=None,\n)\n</code></pre> <p>Create a chat response audit event.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model identifier</p> required <code>provider</code> <code>str</code> <p>Provider name</p> required <code>request_data</code> <code>Dict[str, Any]</code> <p>Request data summary</p> required <code>response_data</code> <code>Dict[str, Any]</code> <p>Response data summary</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>metrics</code> <code>Optional[OperationMetrics]</code> <p>Optional performance metrics</p> <code>None</code> <code>request_id</code> <code>Optional[str]</code> <p>Optional request identifier to link with request event</p> <code>None</code> <p>Returns:</p> Type Description <code>ChatOperationEvent</code> <p>Chat response audit event</p> <code></code> create_compliance_violation_event \u00b6 <pre><code>create_compliance_violation_event(\n    policy_name,\n    violation_type,\n    severity,\n    action_taken,\n    violation_details,\n    user_id=None,\n    session_id=None,\n    resource_id=None,\n)\n</code></pre> <p>Create a compliance violation audit event.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation</p> required <code>severity</code> <code>SeverityLevel</code> <p>Severity level of the violation</p> required <code>action_taken</code> <code>str</code> <p>Action taken in response</p> required <code>violation_details</code> <code>Dict[str, Any]</code> <p>Details of the violation</p> required <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <code>resource_id</code> <code>Optional[str]</code> <p>Optional resource identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>ComplianceViolationEvent</code> <p>Compliance violation audit event</p> <code></code> create_performance_metrics_event \u00b6 <pre><code>create_performance_metrics_event(\n    operation_type,\n    metrics,\n    model=None,\n    provider=None,\n    component=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a performance metrics audit event.</p> <p>Parameters:</p> Name Type Description Default <code>operation_type</code> <code>str</code> <p>Type of operation being measured</p> required <code>metrics</code> <code>OperationMetrics</code> <p>Performance metrics data</p> required <code>model</code> <code>Optional[str]</code> <p>Optional model identifier</p> <code>None</code> <code>provider</code> <code>Optional[str]</code> <p>Optional provider name</p> <code>None</code> <code>component</code> <code>Optional[str]</code> <p>Optional component name</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>PerformanceMetricsEvent</code> <p>Performance metrics audit event</p> <code></code> create_system_error_event \u00b6 <pre><code>create_system_error_event(\n    error_type,\n    error_message,\n    component,\n    stack_trace=None,\n    user_id=None,\n    session_id=None,\n)\n</code></pre> <p>Create a system error audit event.</p> <p>Parameters:</p> Name Type Description Default <code>error_type</code> <code>str</code> <p>Type of error</p> required <code>error_message</code> <code>str</code> <p>Error message</p> required <code>component</code> <code>str</code> <p>Component where the error occurred</p> required <code>stack_trace</code> <code>Optional[str]</code> <p>Optional stack trace</p> <code>None</code> <code>user_id</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional session identifier</p> <code>None</code> <p>Returns:</p> Type Description <code>SystemErrorEvent</code> <p>System error audit event</p>"},{"location":"reference/deepsentinel/#deepsentinel.cache","title":"cache","text":"<p>DeepSentinel SDK caching system.</p> <p>This module provides response caching capabilities with LRU eviction and TTL-based expiration for improved performance.</p>"},{"location":"reference/deepsentinel/#deepsentinel.cache-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.cache.CacheClient","title":"CacheClient","text":"<pre><code>CacheClient(max_size=1000, default_ttl=3600, cleanup_interval=300)\n</code></pre> <p>LRU cache client with TTL support and performance tracking.</p> <p>This cache implementation provides: - LRU (Least Recently Used) eviction policy - TTL (Time To Live) based expiration - Performance metrics tracking - Async/await support - Key generation based on request parameters</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <p>Maximum number of entries in the cache</p> <code>default_ttl</code> <p>Default TTL for cache entries</p> <code>stats</code> <p>Cache performance statistics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>Maximum number of entries to store</p> <code>1000</code> <code>default_ttl</code> <code>int</code> <p>Default TTL in seconds</p> <code>3600</code> <code>cleanup_interval</code> <code>int</code> <p>Interval for cleanup tasks in seconds</p> <code>300</code> Functions\u00b6 <code></code> generate_cache_key \u00b6 <pre><code>generate_cache_key(request_data, provider_name='', operation='')\n</code></pre> <p>Generate a cache key from request parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request parameters</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider</p> <code>''</code> <code>operation</code> <code>str</code> <p>Operation being cached</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>Cache key string</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(key, default=None)\n</code></pre> <p>Get a value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>default</code> <code>Any</code> <p>Default value if key not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[Optional[Any], bool]</code> <p>Tuple of (value, cache_hit_boolean)</p> <code></code> set <code>async</code> \u00b6 <pre><code>set(key, value, ttl=None, metadata=None)\n</code></pre> <p>Set a value in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>value</code> <code>Any</code> <p>Value to cache</p> required <code>ttl</code> <code>Optional[int]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(key)\n</code></pre> <p>Delete a key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key existed and was deleted, False otherwise</p> <code></code> clear <code>async</code> \u00b6 <pre><code>clear()\n</code></pre> <p>Clear all entries from the cache.</p> <code></code> size <code>async</code> \u00b6 <pre><code>size()\n</code></pre> <p>Get the current size of the cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of entries in the cache</p> <code></code> get_stats <code>async</code> \u00b6 <pre><code>get_stats()\n</code></pre> <p>Get cache performance statistics.</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats object with performance metrics</p> <code></code> get_info <code>async</code> \u00b6 <pre><code>get_info()\n</code></pre> <p>Get detailed cache information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing cache information</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the cache.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the cache client and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.cache.CacheEntry","title":"CacheEntry","text":"<pre><code>CacheEntry(value, ttl=3600, metadata=None)\n</code></pre> <p>Represents a cached entry with TTL and metadata.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The cached value</p> <code>created_at</code> <p>Timestamp when the entry was created</p> <code>ttl</code> <p>Time-to-live in seconds</p> <code>access_count</code> <p>Number of times this entry has been accessed</p> <code>last_accessed</code> <p>Timestamp of last access</p> <code>metadata</code> <p>Additional metadata about the cached entry</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to cache</p> required <code>ttl</code> <code>int</code> <p>Time-to-live in seconds</p> <code>3600</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> Attributes\u00b6 <code></code> is_expired <code>property</code> \u00b6 <pre><code>is_expired\n</code></pre> <p>Check if the cache entry has expired.</p> <code></code> age <code>property</code> \u00b6 <pre><code>age\n</code></pre> <p>Get the age of the cache entry in seconds.</p> Functions\u00b6 <code></code> access \u00b6 <pre><code>access()\n</code></pre> <p>Access the cached value and update access statistics.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The cached value</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert cache entry to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the cache entry</p>"},{"location":"reference/deepsentinel/#deepsentinel.cache.CacheStats","title":"CacheStats","text":"<pre><code>CacheStats()\n</code></pre> <p>Cache performance statistics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <p>Number of cache hits</p> <code>misses</code> <p>Number of cache misses</p> <code>evictions</code> <p>Number of cache evictions</p> <code>expired</code> <p>Number of expired entries removed</p> Attributes\u00b6 <code></code> hit_rate <code>property</code> \u00b6 <pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p> <code></code> miss_rate <code>property</code> \u00b6 <pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert stats to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of cache statistics</p>"},{"location":"reference/deepsentinel/#deepsentinel.cache-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.cache.client","title":"client","text":"<p>Response caching client with LRU eviction and TTL support.</p> <p>This module provides a comprehensive caching system with LRU eviction, TTL-based expiration, and performance metrics tracking.</p> Classes\u00b6 CacheEntry \u00b6 <pre><code>CacheEntry(value, ttl=3600, metadata=None)\n</code></pre> <p>Represents a cached entry with TTL and metadata.</p> <p>Attributes:</p> Name Type Description <code>value</code> <p>The cached value</p> <code>created_at</code> <p>Timestamp when the entry was created</p> <code>ttl</code> <p>Time-to-live in seconds</p> <code>access_count</code> <p>Number of times this entry has been accessed</p> <code>last_accessed</code> <p>Timestamp of last access</p> <code>metadata</code> <p>Additional metadata about the cached entry</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to cache</p> required <code>ttl</code> <code>int</code> <p>Time-to-live in seconds</p> <code>3600</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> Attributes\u00b6 <code></code> is_expired <code>property</code> \u00b6 <pre><code>is_expired\n</code></pre> <p>Check if the cache entry has expired.</p> <code></code> age <code>property</code> \u00b6 <pre><code>age\n</code></pre> <p>Get the age of the cache entry in seconds.</p> Functions\u00b6 <code></code> access \u00b6 <pre><code>access()\n</code></pre> <p>Access the cached value and update access statistics.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The cached value</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert cache entry to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the cache entry</p> <code></code> CacheStats \u00b6 <pre><code>CacheStats()\n</code></pre> <p>Cache performance statistics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <p>Number of cache hits</p> <code>misses</code> <p>Number of cache misses</p> <code>evictions</code> <p>Number of cache evictions</p> <code>expired</code> <p>Number of expired entries removed</p> Attributes\u00b6 <code></code> hit_rate <code>property</code> \u00b6 <pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p> <code></code> miss_rate <code>property</code> \u00b6 <pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert stats to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of cache statistics</p> <code></code> CacheClient \u00b6 <pre><code>CacheClient(max_size=1000, default_ttl=3600, cleanup_interval=300)\n</code></pre> <p>LRU cache client with TTL support and performance tracking.</p> <p>This cache implementation provides: - LRU (Least Recently Used) eviction policy - TTL (Time To Live) based expiration - Performance metrics tracking - Async/await support - Key generation based on request parameters</p> <p>Attributes:</p> Name Type Description <code>max_size</code> <p>Maximum number of entries in the cache</p> <code>default_ttl</code> <p>Default TTL for cache entries</p> <code>stats</code> <p>Cache performance statistics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>max_size</code> <code>int</code> <p>Maximum number of entries to store</p> <code>1000</code> <code>default_ttl</code> <code>int</code> <p>Default TTL in seconds</p> <code>3600</code> <code>cleanup_interval</code> <code>int</code> <p>Interval for cleanup tasks in seconds</p> <code>300</code> Functions\u00b6 <code></code> generate_cache_key \u00b6 <pre><code>generate_cache_key(request_data, provider_name='', operation='')\n</code></pre> <p>Generate a cache key from request parameters.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>Dict[str, Any]</code> <p>Request parameters</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider</p> <code>''</code> <code>operation</code> <code>str</code> <p>Operation being cached</p> <code>''</code> <p>Returns:</p> Type Description <code>str</code> <p>Cache key string</p> <code></code> get <code>async</code> \u00b6 <pre><code>get(key, default=None)\n</code></pre> <p>Get a value from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>default</code> <code>Any</code> <p>Default value if key not found</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[Optional[Any], bool]</code> <p>Tuple of (value, cache_hit_boolean)</p> <code></code> set <code>async</code> \u00b6 <pre><code>set(key, value, ttl=None, metadata=None)\n</code></pre> <p>Set a value in the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>value</code> <code>Any</code> <p>Value to cache</p> required <code>ttl</code> <code>Optional[int]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code></code> delete <code>async</code> \u00b6 <pre><code>delete(key)\n</code></pre> <p>Delete a key from the cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to delete</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if key existed and was deleted, False otherwise</p> <code></code> clear <code>async</code> \u00b6 <pre><code>clear()\n</code></pre> <p>Clear all entries from the cache.</p> <code></code> size <code>async</code> \u00b6 <pre><code>size()\n</code></pre> <p>Get the current size of the cache.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of entries in the cache</p> <code></code> get_stats <code>async</code> \u00b6 <pre><code>get_stats()\n</code></pre> <p>Get cache performance statistics.</p> <p>Returns:</p> Type Description <code>CacheStats</code> <p>CacheStats object with performance metrics</p> <code></code> get_info <code>async</code> \u00b6 <pre><code>get_info()\n</code></pre> <p>Get detailed cache information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing cache information</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the cache.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the cache client and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client","title":"client","text":"<p>DeepSentinel SDK main client implementation.</p> <p>This module contains the main SentinelClient class that provides the primary interface for interacting with LLM providers through the compliance middleware.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelClient","title":"SentinelClient","text":"<pre><code>SentinelClient(config=None, **kwargs)\n</code></pre> <p>Main client for the DeepSentinel SDK.</p> <p>This class provides the primary interface for interacting with LLM providers through a compliance-aware middleware layer. It handles configuration, provider management, compliance checking, and audit logging.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Client configuration</p> <code>chat</code> <p>Chat completions interface</p> <code>completions</code> <p>Text completions interface</p> <code>embeddings</code> <p>Embeddings interface</p> <code>models</code> <p>Models interface</p> <code>audio</code> <p>Audio processing interface</p> <code>images</code> <p>Image generation interface</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[SentinelConfig]</code> <p>Configuration instance (creates default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional configuration parameters</p> <code>{}</code> Attributes\u00b6 <code></code> provider_registry <code>property</code> \u00b6 <pre><code>provider_registry\n</code></pre> <p>Get the provider registry.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Provider registry instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p> <code></code> middleware <code>property</code> \u00b6 <pre><code>middleware\n</code></pre> <p>Get the compliance middleware.</p> <p>Returns:</p> Type Description <code>ComplianceMiddleware</code> <p>Compliance middleware instance</p> <p>Raises:</p> Type Description <code>DeepSentinelError</code> <p>If client is not initialized</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the client is initialized.</p> Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the client and all components.</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>DeepSentinelError</code> <p>If initialization fails</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up client resources.</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on all components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelChatInterface","title":"SentinelChatInterface","text":"<pre><code>SentinelChatInterface(client)\n</code></pre> <p>               Bases: <code>ChatInterface</code></p> <p>Chat completions interface implementation.</p> Functions\u00b6 <code></code> create <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <code></code> create_stream <code>async</code> \u00b6 <pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelCompletionsInterface","title":"SentinelCompletionsInterface","text":"<pre><code>SentinelCompletionsInterface(client)\n</code></pre> <p>               Bases: <code>CompletionsInterface</code></p> <p>Text completions interface implementation.</p> Functions\u00b6 <code></code> create <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion.</p> <code></code> create_stream <code>async</code> \u00b6 <pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelEmbeddingsInterface","title":"SentinelEmbeddingsInterface","text":"<pre><code>SentinelEmbeddingsInterface(client)\n</code></pre> <p>               Bases: <code>EmbeddingsInterface</code></p> <p>Embeddings interface implementation.</p> Functions\u00b6 <code></code> create <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelModelsInterface","title":"SentinelModelsInterface","text":"<pre><code>SentinelModelsInterface(client)\n</code></pre> <p>               Bases: <code>ModelsInterface</code></p> <p>Models interface implementation.</p> Functions\u00b6 <code></code> list <code>async</code> \u00b6 <pre><code>list(provider=None, **kwargs)\n</code></pre> <p>List available models.</p> <code></code> retrieve <code>async</code> \u00b6 <pre><code>retrieve(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve model information.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelAudioInterface","title":"SentinelAudioInterface","text":"<pre><code>SentinelAudioInterface(client)\n</code></pre> <p>               Bases: <code>AudioInterface</code></p> <p>Audio interface implementation.</p> Functions\u00b6 <code></code> transcribe <code>async</code> \u00b6 <pre><code>transcribe(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <code></code> translate <code>async</code> \u00b6 <pre><code>translate(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio to English text.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client.SentinelImageInterface","title":"SentinelImageInterface","text":"<pre><code>SentinelImageInterface(client)\n</code></pre> <p>               Bases: <code>ImageInterface</code></p> <p>Image interface implementation.</p> Functions\u00b6 <code></code> generate <code>async</code> \u00b6 <pre><code>generate(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images from text prompts.</p>"},{"location":"reference/deepsentinel/#deepsentinel.client-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.compliance","title":"compliance","text":"<p>Compliance checking and policy enforcement components.</p>"},{"location":"reference/deepsentinel/#deepsentinel.compliance-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.compliance.detection","title":"detection","text":"<p>Local detection system for sensitive data patterns.</p> Modules\u00b6 engine \u00b6 <p>Main detection engine for sensitive data pattern matching.</p> <p>This module provides the core detection engine that coordinates multiple detection modules to identify sensitive data patterns in text content.</p> Classes\u00b6 DetectionEngine \u00b6 <pre><code>DetectionEngine(config)\n</code></pre> <p>Main detection engine for sensitive data identification.</p> <p>This class coordinates multiple detection modules to identify various types of sensitive data patterns in text content.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>engines</code> <code>Dict[str, Any]</code> <p>Dictionary of detection engines by name</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze_text <code>async</code> \u00b6 <pre><code>analyze_text(text_content, context=None)\n</code></pre> <p>Analyze text content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text_content</code> <code>List[str]</code> <p>List of text strings to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results from all engines</p> <code></code> analyze_single_text <code>async</code> \u00b6 <pre><code>analyze_single_text(text, engine_names=None, context=None)\n</code></pre> <p>Analyze a single text string with specified engines.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text string to analyze</p> required <code>engine_names</code> <code>Optional[List[str]]</code> <p>Optional list of engine names to use</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results</p> <code></code> get_engine \u00b6 <pre><code>get_engine(engine_name)\n</code></pre> <p>Get a specific detection engine by name.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Detection engine instance or None if not found</p> <code></code> list_engines \u00b6 <pre><code>list_engines()\n</code></pre> <p>Get list of available detection engine names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of detection engine names</p> <code></code> get_engine_info \u00b6 <pre><code>get_engine_info(engine_name)\n</code></pre> <p>Get information about a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dictionary containing engine information</p> <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get detection engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on all detection engines.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> reload_engines <code>async</code> \u00b6 <pre><code>reload_engines()\n</code></pre> <p>Reload all detection engines with updated configuration.</p> <code></code> enable_engine \u00b6 <pre><code>enable_engine(engine_name)\n</code></pre> <p>Enable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to enable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was enabled, False if not found</p> <code></code> disable_engine \u00b6 <pre><code>disable_engine(engine_name)\n</code></pre> <p>Disable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to disable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was disabled, False if not found</p> <code></code> patterns \u00b6 <p>Pattern matching utilities for sensitive data detection.</p> <p>This module provides base pattern matching functionality that can be used by various detection engines to identify sensitive data patterns.</p> Classes\u00b6 <code></code> PatternMatch \u00b6 <pre><code>PatternMatch(\n    text, start, end, pattern_name, pattern_type, confidence=1.0, metadata=None\n)\n</code></pre> <p>Represents a pattern match result.</p> <p>Attributes:</p> Name Type Description <code>text</code> <p>The matched text</p> <code>start</code> <p>Start position in the original text</p> <code>end</code> <p>End position in the original text</p> <code>pattern_name</code> <p>Name of the pattern that matched</p> <code>pattern_type</code> <p>Type/category of the pattern</p> <code>confidence</code> <p>Confidence score (0.0 to 1.0)</p> <code>metadata</code> <p>Additional metadata about the match</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The matched text</p> required <code>start</code> <code>int</code> <p>Start position in the original text</p> required <code>end</code> <code>int</code> <p>End position in the original text</p> required <code>pattern_name</code> <code>str</code> <p>Name of the pattern that matched</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>1.0</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata about the match</p> <code>None</code> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert match to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the match</p> <code></code> PatternMatcher \u00b6 <pre><code>PatternMatcher(config)\n</code></pre> <p>Base pattern matcher for sensitive data detection.</p> <p>This class provides pattern matching functionality using regex and other techniques to identify sensitive data patterns in text.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>patterns</code> <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary of compiled regex patterns</p> <code>enabled</code> <p>Whether the pattern matcher is enabled</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for pattern matches with performance tracking.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> analyze_batch <code>async</code> \u00b6 <pre><code>analyze_batch(texts, context=None)\n</code></pre> <p>Analyze multiple texts in batch for better performance.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>List[str]</code> <p>List of texts to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of analysis results for each text</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> add_pattern \u00b6 <pre><code>add_pattern(name, pattern, pattern_type, confidence=0.8, flags=0)\n</code></pre> <p>Add a new pattern to the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <code>pattern</code> <code>str</code> <p>Regular expression pattern</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>0.8</code> <code>flags</code> <code>int</code> <p>Regex flags</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was added successfully, False otherwise</p> <code></code> remove_pattern \u00b6 <pre><code>remove_pattern(name)\n</code></pre> <p>Remove a pattern from the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was removed, False if not found</p> <code></code> get_pattern_info \u00b6 <pre><code>get_pattern_info(name)\n</code></pre> <p>Get information about a specific pattern.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Pattern information dictionary or None if not found</p> <code></code> list_patterns \u00b6 <pre><code>list_patterns()\n</code></pre> <p>Get list of available pattern names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of pattern names</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the pattern matcher including performance.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing matcher information and performance stats</p> <code></code> get_performance_stats \u00b6 <pre><code>get_performance_stats()\n</code></pre> <p>Get detailed performance statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the pattern matcher.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the pattern matcher.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the pattern matcher.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> pci \u00b6 <p>PCI (Payment Card Industry) detection module.</p> <p>This module provides specialized detection for PCI DSS sensitive data types including credit card numbers, bank account numbers, CVV codes, and other payment-related information.</p> Classes\u00b6 <code></code> PCIDetector \u00b6 <pre><code>PCIDetector(config)\n</code></pre> <p>Specialized detector for PCI DSS sensitive data patterns.</p> <p>This detector focuses on identifying payment card industry data including credit card numbers, bank accounts, CVV codes, and other financial information requiring PCI DSS compliance.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>strict_validation</code> <p>Whether to use strict validation</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PCI-sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> set_strict_validation \u00b6 <pre><code>set_strict_validation(strict)\n</code></pre> <p>Set strict validation mode.</p> <p>Parameters:</p> Name Type Description Default <code>strict</code> <code>bool</code> <p>Whether to use strict validation</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PCI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PCI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> phi \u00b6 <p>PHI (Protected Health Information) detection module.</p> <p>This module provides specialized detection for PHI data types including medical record numbers, diagnosis codes, medication names, and other health-related information as defined by HIPAA regulations.</p> Classes\u00b6 <code></code> PHIDetector \u00b6 <pre><code>PHIDetector(config)\n</code></pre> <p>Specialized detector for PHI data patterns.</p> <p>This detector focuses on identifying protected health information including medical records, diagnosis codes, medications, and other healthcare-related sensitive data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>medical_terms</code> <p>Set of medical terminology for context analysis</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PHI patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PHI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PHI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> pii \u00b6 <p>PII (Personally Identifiable Information) detection module.</p> <p>This module provides specialized detection for PII data types including emails, phone numbers, social security numbers, and other personal identifiers.</p> Classes\u00b6 <code></code> PIIDetector \u00b6 <pre><code>PIIDetector(config)\n</code></pre> <p>Specialized detector for PII data patterns.</p> <p>This detector focuses on identifying personally identifiable information such as emails, phone numbers, SSNs, addresses, and other personal data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>sensitivity_level</code> <p>Detection sensitivity (low, medium, high)</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PII patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> set_sensitivity_level \u00b6 <pre><code>set_sensitivity_level(level)\n</code></pre> <p>Set the detection sensitivity level.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Sensitivity level (\"low\", \"medium\", \"high\")</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PII detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PII detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.compliance.engine","title":"engine","text":"<p>Main compliance processing engine for DeepSentinel SDK.</p> <p>This module contains the core compliance processing engine that orchestrates policy evaluation, detection, and enforcement across all compliance checks.</p> Classes\u00b6 ComplianceEngine \u00b6 <pre><code>ComplianceEngine(config)\n</code></pre> <p>Main compliance processing engine.</p> <p>This class orchestrates all compliance checking operations including policy evaluation, detection engines, and enforcement actions.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policy_manager</code> <p>Policy manager instance</p> <code>detection_engine</code> <p>Detection engine instance</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required Functions\u00b6 <code></code> process_request <code>async</code> \u00b6 <pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p> <code></code> process_response <code>async</code> \u00b6 <pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p> <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get compliance engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on compliance engine components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> reload_policies <code>async</code> \u00b6 <pre><code>reload_policies()\n</code></pre> <p>Reload compliance policies from configuration.</p>"},{"location":"reference/deepsentinel/#deepsentinel.compliance.interceptor","title":"interceptor","text":"<p>Request/response interceptor for compliance checking.</p> <p>This module provides interceptor functionality that can be integrated into HTTP clients and middleware to automatically apply compliance checks to all requests and responses.</p> Classes\u00b6 ComplianceInterceptor \u00b6 <pre><code>ComplianceInterceptor(engine, enabled=True, bypass_rules=None)\n</code></pre> <p>Interceptor for automatic compliance checking.</p> <p>This class provides interceptor functionality that can be integrated into HTTP clients, middleware, or other components to automatically apply compliance checks to requests and responses.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>Compliance engine instance</p> <code>logger</code> <p>Structured logger</p> <code>enabled</code> <p>Whether the interceptor is enabled</p> <code>bypass_rules</code> <p>Rules for bypassing compliance checks</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>ComplianceEngine</code> <p>Compliance engine to use for checks</p> required <code>enabled</code> <code>bool</code> <p>Whether the interceptor is enabled</p> <code>True</code> <code>bypass_rules</code> <code>Optional[Dict[str, Any]]</code> <p>Optional rules for bypassing compliance checks</p> <code>None</code> Functions\u00b6 <code></code> intercept_request <code>async</code> \u00b6 <pre><code>intercept_request(request, context=None)\n</code></pre> <p>Intercept and process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to intercept and check</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates compliance policies</p> <code></code> intercept_response <code>async</code> \u00b6 <pre><code>intercept_response(response, request, context=None)\n</code></pre> <p>Intercept and process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to intercept and check</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates compliance policies</p> <code></code> create_middleware \u00b6 <pre><code>create_middleware()\n</code></pre> <p>Create middleware function that wraps API calls with compliance.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]], Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]]</code> <p>Middleware function that can wrap API calls</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the interceptor.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the interceptor.</p> <code></code> update_bypass_rules \u00b6 <pre><code>update_bypass_rules(bypass_rules)\n</code></pre> <p>Update bypass rules.</p> <p>Parameters:</p> Name Type Description Default <code>bypass_rules</code> <code>Dict[str, Any]</code> <p>New bypass rules configuration</p> required <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get interceptor performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> reset_metrics \u00b6 <pre><code>reset_metrics()\n</code></pre> <p>Reset performance metrics counters.</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on interceptor.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.compliance.policies","title":"policies","text":"<p>Policy management and enforcement for compliance checking.</p> <p>This module provides policy management capabilities including policy loading, evaluation, and enforcement for various compliance requirements.</p> Classes\u00b6 PolicyManager \u00b6 <pre><code>PolicyManager(policies)\n</code></pre> <p>Manager for compliance policies and their evaluation.</p> <p>This class handles policy loading, caching, and evaluation against requests and responses to determine compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policies</code> <code>Dict[str, CompliancePolicy]</code> <p>Dictionary of loaded compliance policies</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies to manage</p> required Functions\u00b6 <code></code> evaluate_request <code>async</code> \u00b6 <pre><code>evaluate_request(request, detection_results, context=None)\n</code></pre> <p>Evaluate request against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to evaluate</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p> <code></code> evaluate_response <code>async</code> \u00b6 <pre><code>evaluate_response(response, request, detection_results, context=None)\n</code></pre> <p>Evaluate response against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to evaluate</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p> <code></code> get_active_policies \u00b6 <pre><code>get_active_policies()\n</code></pre> <p>Get list of active policies.</p> <p>Returns:</p> Type Description <code>List[CompliancePolicy]</code> <p>List of enabled compliance policies</p> <code></code> get_policy \u00b6 <pre><code>get_policy(name)\n</code></pre> <p>Get policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p> <code></code> add_policy \u00b6 <pre><code>add_policy(policy)\n</code></pre> <p>Add or update a policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add or update</p> required <code></code> remove_policy \u00b6 <pre><code>remove_policy(name)\n</code></pre> <p>Remove a policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if policy was removed, False if not found</p> <code></code> reload_policies <code>async</code> \u00b6 <pre><code>reload_policies(policies)\n</code></pre> <p>Reload policies from new configuration.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>New list of policies to load</p> required <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on policy manager.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/deepsentinel/#deepsentinel.config","title":"config","text":"<p>DeepSentinel SDK configuration management.</p> <p>This module provides configuration classes and utilities for managing DeepSentinel SDK settings, compliance policies, and provider configurations.</p>"},{"location":"reference/deepsentinel/#deepsentinel.config-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.config.CompliancePolicy","title":"CompliancePolicy","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for compliance policies and rules.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the policy</p> <code>enabled</code> <code>bool</code> <p>Whether the policy is enabled</p> <code>action</code> <code>ComplianceAction</code> <p>Default action to take on violations</p> <code>severity</code> <code>SeverityLevel</code> <p>Default severity level for violations</p> <code>rules</code> <code>Dict[str, Any]</code> <p>Dictionary of rule configurations</p> <code>exceptions</code> <code>List[str]</code> <p>List of exceptions to the policy</p> <code>custom_handlers</code> <code>Dict[str, Any]</code> <p>Custom handler configurations</p> Functions\u00b6 <code></code> validate_name \u00b6 <pre><code>validate_name(v)\n</code></pre> <p>Validate policy name is not empty.</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.PIIPolicy","title":"PIIPolicy","text":"<pre><code>PIIPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>PII detection and handling policy.</p> <p>Attributes:</p> Name Type Description <code>detection_threshold</code> <code>float</code> <p>Confidence threshold for PII detection</p> <code>redaction_strategy</code> <code>str</code> <p>Strategy for redacting PII</p> <code>pii_types</code> <code>List[str]</code> <p>Specific PII types to detect</p> <code>allow_partial_redaction</code> <code>bool</code> <p>Whether to allow partial redaction</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.ContentFilterPolicy","title":"ContentFilterPolicy","text":"<pre><code>ContentFilterPolicy(**data)\n</code></pre> <p>               Bases: <code>CompliancePolicy</code></p> <p>Content filtering policy for harmful or inappropriate content.</p> <p>Attributes:</p> Name Type Description <code>filter_categories</code> <code>List[str]</code> <p>Categories of content to filter</p> <code>strictness_level</code> <code>str</code> <p>Strictness level for filtering</p> <code>custom_patterns</code> <code>List[str]</code> <p>Custom regex patterns to match</p> <code>whitelist_patterns</code> <code>List[str]</code> <p>Patterns to whitelist</p> <code>context_aware</code> <code>bool</code> <p>Whether to consider context in filtering</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.AuditConfig","title":"AuditConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for audit logging and compliance tracking.</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <code>bool</code> <p>Whether audit logging is enabled</p> <code>log_level</code> <code>str</code> <p>Minimum log level to record</p> <code>storage_backend</code> <code>str</code> <p>Storage backend for audit logs</p> <code>retention_days</code> <code>int</code> <p>Number of days to retain audit logs</p> <code>include_request_body</code> <code>bool</code> <p>Whether to log request bodies</p> <code>include_response_body</code> <code>bool</code> <p>Whether to log response bodies</p> <code>exclude_patterns</code> <code>List[str]</code> <p>Patterns to exclude from logging</p> <code>encryption_enabled</code> <code>bool</code> <p>Whether to encrypt audit logs</p> <code>storage_config</code> <code>Dict[str, Any]</code> <p>Storage backend configuration</p> Functions\u00b6 <code></code> validate_retention_days \u00b6 <pre><code>validate_retention_days(v)\n</code></pre> <p>Validate retention days is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.LoggingConfig","title":"LoggingConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for structured logging.</p> <p>Attributes:</p> Name Type Description <code>level</code> <code>str</code> <p>Log level</p> <code>format</code> <code>str</code> <p>Log format</p> <code>handlers</code> <code>Dict[str, Any]</code> <p>Log handlers configuration</p> <code>disable_existing_loggers</code> <code>bool</code> <p>Whether to disable existing loggers</p> <code>structured</code> <code>bool</code> <p>Whether to use structured logging</p> <code>include_timestamp</code> <code>bool</code> <p>Whether to include timestamps</p> <code>include_trace_id</code> <code>bool</code> <p>Whether to include trace IDs</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.PerformanceConfig","title":"PerformanceConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for performance optimizations.</p> <p>Attributes:</p> Name Type Description <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>int</code> <p>Default cache TTL in seconds</p> <code>cache_max_size</code> <code>int</code> <p>Maximum cache size</p> <code>connection_pool_size</code> <code>int</code> <p>HTTP connection pool size</p> <code>connection_pool_per_host</code> <code>int</code> <p>Connections per host</p> <code>connect_timeout</code> <code>int</code> <p>Connection timeout in seconds</p> <code>read_timeout</code> <code>int</code> <p>Read timeout in seconds</p> <code>enable_metrics</code> <code>bool</code> <p>Whether to collect performance metrics</p> <code>metrics_window_size</code> <code>int</code> <p>Size of metrics rolling window</p> <code>pattern_cache_size</code> <code>int</code> <p>Size of pattern compilation cache</p> Functions\u00b6 <code></code> validate_cache_ttl \u00b6 <pre><code>validate_cache_ttl(v)\n</code></pre> <p>Validate cache TTL is positive.</p> <code></code> validate_cache_max_size \u00b6 <pre><code>validate_cache_max_size(v)\n</code></pre> <p>Validate cache max size is positive.</p> <code></code> validate_connection_pool_size \u00b6 <pre><code>validate_connection_pool_size(v)\n</code></pre> <p>Validate connection pool size is positive.</p>"},{"location":"reference/deepsentinel/#deepsentinel.config.SentinelConfig","title":"SentinelConfig","text":"<pre><code>SentinelConfig(**data)\n</code></pre> <p>               Bases: <code>BaseModel</code></p> <p>Main configuration class for the DeepSentinel SDK.</p> <p>This class manages all configuration aspects of the SDK including provider settings, compliance policies, audit configuration, and operational parameters.</p> <p>Attributes:</p> Name Type Description <code>providers</code> <code>Dict[str, ProviderConfig]</code> <p>Dictionary of provider configurations</p> <code>default_provider</code> <code>Optional[str]</code> <p>Default provider to use</p> <code>compliance_policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies</p> <code>audit_config</code> <code>AuditConfig</code> <p>Audit logging configuration</p> <code>logging_config</code> <code>LoggingConfig</code> <p>Structured logging configuration</p> <code>enable_streaming</code> <code>bool</code> <p>Whether to enable response streaming</p> <code>enable_caching</code> <code>bool</code> <p>Whether to enable response caching</p> <code>cache_ttl</code> <code>bool</code> <p>Cache time-to-live in seconds</p> <code>timeout</code> <code>int</code> <p>Default request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>debug_mode</code> <code>bool</code> <p>Whether debug mode is enabled</p> <code>telemetry_enabled</code> <code>bool</code> <p>Whether to send telemetry data</p> <code>user_agent</code> <code>Optional[str]</code> <p>Custom user agent string</p> <code>environment</code> <code>str</code> <p>Environment name (dev, staging, prod)</p> Classes\u00b6 <code></code> Config \u00b6 <p>Pydantic configuration.</p> Functions\u00b6 <code></code> validate_default_provider \u00b6 <pre><code>validate_default_provider(v, values)\n</code></pre> <p>Validate default provider exists in providers dict.</p> <code></code> from_file <code>classmethod</code> \u00b6 <pre><code>from_file(config_path)\n</code></pre> <p>Load configuration from a file.</p> <p>Parameters:</p> Name Type Description Default <code>config_path</code> <code>Union[str, Path]</code> <p>Path to the configuration file</p> required <p>Returns:</p> Type Description <code>SentinelConfig</code> <p>SentinelConfig instance loaded from the file</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the configuration file doesn't exist</p> <code>ValueError</code> <p>If the configuration file format is invalid</p> <code></code> add_provider \u00b6 <pre><code>add_provider(name, provider_config, set_as_default=False)\n</code></pre> <p>Add a new provider configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider</p> required <code>provider_config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <code></code> add_compliance_policy \u00b6 <pre><code>add_compliance_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Compliance policy to add</p> required <code></code> get_provider_config \u00b6 <pre><code>get_provider_config(provider_name=None)\n</code></pre> <p>Get provider configuration by name.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>Optional[str]</code> <p>Name of the provider (uses default if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>ProviderConfig</code> <p>Provider configuration</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> get_compliance_policy \u00b6 <pre><code>get_compliance_policy(policy_name)\n</code></pre> <p>Get compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Compliance policy if found, None otherwise</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert configuration to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the configuration</p> <code></code> update_from_dict \u00b6 <pre><code>update_from_dict(config_dict)\n</code></pre> <p>Update configuration from dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>Dict[str, Any]</code> <p>Dictionary containing configuration updates</p> required"},{"location":"reference/deepsentinel/#deepsentinel.exceptions","title":"exceptions","text":"<p>DeepSentinel SDK exception hierarchy.</p> <p>This module defines all custom exceptions used throughout the DeepSentinel SDK, providing clear error types for different failure scenarios.</p>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.exceptions.DeepSentinelError","title":"DeepSentinelError","text":"<pre><code>DeepSentinelError(message, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Base exception for all DeepSentinel SDK errors.</p> <p>All SDK-specific exceptions inherit from this base class to provide a consistent exception hierarchy and error handling interface.</p> <p>Attributes:</p> Name Type Description <code>message</code> <p>Human-readable error message</p> <code>error_code</code> <p>Optional error code for programmatic handling</p> <code>details</code> <p>Optional dictionary containing additional error context</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.ComplianceViolationError","title":"ComplianceViolationError","text":"<pre><code>ComplianceViolationError(\n    message, policy_name, violation_type, severity=\"high\", error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when content violates compliance policies.</p> <p>This exception is raised when the compliance middleware detects content that violates configured compliance policies, such as PII detection, content filtering, or security violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <p>Name of the violated policy</p> <code>violation_type</code> <p>Type of violation detected</p> <code>severity</code> <p>Severity level of the violation</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation detected</p> required <code>severity</code> <code>str</code> <p>Severity level of the violation</p> <code>'high'</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.ProviderError","title":"ProviderError","text":"<pre><code>ProviderError(\n    message,\n    provider_name,\n    status_code=None,\n    provider_error=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are issues with LLM provider operations.</p> <p>This exception covers various provider-related errors including authentication failures, rate limiting, API errors, and provider-specific issues.</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <p>Name of the LLM provider</p> <code>status_code</code> <p>HTTP status code if applicable</p> <code>provider_error</code> <p>Original error from the provider</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>status_code</code> <code>Optional[int]</code> <p>HTTP status code if applicable</p> <code>None</code> <code>provider_error</code> <code>Optional[Exception]</code> <p>Original error from the provider</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.ConfigurationError","title":"ConfigurationError","text":"<pre><code>ConfigurationError(\n    message, config_key=None, config_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are configuration-related issues.</p> <p>This exception is raised for various configuration problems including invalid configuration values, missing required settings, conflicting options, and environment setup issues.</p> <p>Attributes:</p> Name Type Description <code>config_key</code> <p>The configuration key that caused the error</p> <code>config_value</code> <p>The problematic configuration value</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>config_key</code> <code>Optional[str]</code> <p>The configuration key that caused the error</p> <code>None</code> <code>config_value</code> <code>Optional[Any]</code> <p>The problematic configuration value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.MCPError","title":"MCPError","text":"<pre><code>MCPError(\n    message,\n    server_name=None,\n    tool_name=None,\n    operation=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are Model Context Protocol (MCP) related issues.</p> <p>This exception covers MCP server communication errors, tool execution failures, resource access issues, and protocol-level problems.</p> <p>Attributes:</p> Name Type Description <code>server_name</code> <p>Name of the MCP server</p> <code>tool_name</code> <p>Name of the MCP tool if applicable</p> <code>operation</code> <p>The MCP operation that failed</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>server_name</code> <code>Optional[str]</code> <p>Name of the MCP server</p> <code>None</code> <code>tool_name</code> <code>Optional[str]</code> <p>Name of the MCP tool if applicable</p> <code>None</code> <code>operation</code> <code>Optional[str]</code> <p>The MCP operation that failed</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.AuthenticationError","title":"AuthenticationError","text":"<pre><code>AuthenticationError(message, provider_name, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider authentication fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.RateLimitError","title":"RateLimitError","text":"<pre><code>RateLimitError(message, provider_name, retry_after=None, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider rate limits are exceeded.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>retry_after</code> <code>Optional[int]</code> <p>Seconds to wait before retrying</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.exceptions.ValidationError","title":"ValidationError","text":"<pre><code>ValidationError(\n    message, field_name=None, field_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when data validation fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>field_name</code> <code>Optional[str]</code> <p>Name of the field that failed validation</p> <code>None</code> <code>field_value</code> <code>Optional[Any]</code> <p>The invalid field value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces","title":"interfaces","text":"<p>DeepSentinel SDK API interfaces.</p> <p>This module defines the abstract interfaces for different LLM operations such as chat completions, text completions, embeddings, and streaming.</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.interfaces.BaseInterface","title":"BaseInterface","text":"<pre><code>BaseInterface(client)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base interface for all LLM operations.</p> <p>This abstract base class defines common functionality and patterns that all specific interfaces should follow.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Any</code> <p>Reference to the main SentinelClient instance</p> required Attributes\u00b6 <code></code> client <code>property</code> \u00b6 <pre><code>client\n</code></pre> <p>Get the client reference.</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.ChatInterface","title":"ChatInterface","text":"<pre><code>ChatInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for chat completion operations.</p> <p>This interface handles conversational AI interactions with support for both synchronous and asynchronous operations, streaming responses, and compliance checking.</p> Functions\u00b6 <code></code> create <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_sync \u00b6 <pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.CompletionsInterface","title":"CompletionsInterface","text":"<pre><code>CompletionsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for text completion operations.</p> <p>This interface handles text completion requests with support for various completion parameters and compliance checking.</p> Functions\u00b6 <code></code> create <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_sync \u00b6 <pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.EmbeddingsInterface","title":"EmbeddingsInterface","text":"<pre><code>EmbeddingsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for embedding operations.</p> <p>This interface handles text embedding generation with support for various embedding models and batch processing.</p> Functions\u00b6 <code></code> create <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_sync \u00b6 <pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.ModelsInterface","title":"ModelsInterface","text":"<pre><code>ModelsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for model information and management.</p> <p>This interface provides access to available models, their capabilities, and metadata from different providers.</p> Functions\u00b6 <code></code> list <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>list(provider=None, **kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code></code> retrieve <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>retrieve(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code></code> list_sync \u00b6 <pre><code>list_sync(provider=None, **kwargs)\n</code></pre> <p>List available models synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <code></code> retrieve_sync \u00b6 <pre><code>retrieve_sync(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve model information synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.AudioInterface","title":"AudioInterface","text":"<pre><code>AudioInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for audio operations like transcription and text-to-speech.</p> <p>This interface handles audio-related AI operations with support for various audio formats and processing options.</p> Functions\u00b6 <code></code> transcribe <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>transcribe(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> translate <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>translate(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> transcribe_sync \u00b6 <pre><code>transcribe_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <code></code> translate_sync \u00b6 <pre><code>translate_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p>"},{"location":"reference/deepsentinel/#deepsentinel.interfaces.ImageInterface","title":"ImageInterface","text":"<pre><code>ImageInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for image generation and processing operations.</p> <p>This interface handles image-related AI operations including generation, editing, and variation creation.</p> Functions\u00b6 <code></code> generate <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>generate(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If prompt violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> generate_sync \u00b6 <pre><code>generate_sync(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p>"},{"location":"reference/deepsentinel/#deepsentinel.mcp","title":"mcp","text":"<p>Model Context Protocol (MCP) integration components.</p>"},{"location":"reference/deepsentinel/#deepsentinel.metrics","title":"metrics","text":"<p>DeepSentinel SDK performance metrics and monitoring.</p> <p>This module provides comprehensive performance monitoring, metrics collection, and reporting utilities for tracking SDK performance and usage patterns.</p>"},{"location":"reference/deepsentinel/#deepsentinel.metrics-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.metrics.MetricsCollector","title":"MetricsCollector","text":"<pre><code>MetricsCollector(enabled=True, window_size=1000, retention_minutes=60)\n</code></pre> <p>Comprehensive metrics collector for SDK performance monitoring.</p> <p>This class collects and aggregates performance metrics including: - Request performance and timing - Token usage and costs - Cache effectiveness - Provider-specific metrics - System health indicators</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <p>Whether metrics collection is enabled</p> <code>window_size</code> <p>Size of the rolling window for metrics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to collect metrics</p> <code>True</code> <code>window_size</code> <code>int</code> <p>Size of rolling window for recent metrics</p> <code>1000</code> <code>retention_minutes</code> <code>int</code> <p>How long to retain detailed metrics</p> <code>60</code> Functions\u00b6 <code></code> record_request \u00b6 <pre><code>record_request(\n    provider,\n    operation,\n    duration,\n    success,\n    retry_count=0,\n    rate_limited=False,\n    error=None,\n)\n</code></pre> <p>Record a request performance metric.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>operation</code> <code>str</code> <p>Operation type (chat, completion, etc.)</p> required <code>duration</code> <code>float</code> <p>Request duration in seconds</p> required <code>success</code> <code>bool</code> <p>Whether the request was successful</p> required <code>retry_count</code> <code>int</code> <p>Number of retries performed</p> <code>0</code> <code>rate_limited</code> <code>bool</code> <p>Whether rate limiting was encountered</p> <code>False</code> <code>error</code> <code>Optional[str]</code> <p>Error message if request failed</p> <code>None</code> <code></code> record_token_usage \u00b6 <pre><code>record_token_usage(\n    provider, prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0\n)\n</code></pre> <p>Record token usage metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>prompt_tokens</code> <code>int</code> <p>Number of prompt tokens</p> <code>0</code> <code>completion_tokens</code> <code>int</code> <p>Number of completion tokens</p> <code>0</code> <code>total_tokens</code> <code>Optional[int]</code> <p>Total tokens (if different from sum)</p> <code>None</code> <code>cost</code> <code>float</code> <p>Estimated cost for this usage</p> <code>0.0</code> <code></code> record_cache_metrics \u00b6 <pre><code>record_cache_metrics(\n    hits=0, misses=0, evictions=0, expired=0, current_size=0, max_size=0\n)\n</code></pre> <p>Record cache performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>0</code> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>0</code> <code>evictions</code> <code>int</code> <p>Number of evictions</p> <code>0</code> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>0</code> <code>current_size</code> <code>int</code> <p>Current cache size</p> <code>0</code> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> <code>0</code> <code></code> get_overall_metrics \u00b6 <pre><code>get_overall_metrics()\n</code></pre> <p>Get overall performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing overall metrics</p> <code></code> get_provider_metrics \u00b6 <pre><code>get_provider_metrics(provider=None)\n</code></pre> <p>Get provider-specific metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Specific provider name (returns all if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing provider metrics</p> <code></code> get_operation_metrics \u00b6 <pre><code>get_operation_metrics()\n</code></pre> <p>Get operation-specific metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing operation metrics</p> <code></code> get_recent_requests \u00b6 <pre><code>get_recent_requests(limit=None)\n</code></pre> <p>Get recent request data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of requests to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent request data</p> <code></code> get_recent_errors \u00b6 <pre><code>get_recent_errors(limit=None)\n</code></pre> <p>Get recent error data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of errors to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent error data</p> <code></code> get_hourly_trends \u00b6 <pre><code>get_hourly_trends(hours=24)\n</code></pre> <p>Get hourly trend data.</p> <p>Parameters:</p> Name Type Description Default <code>hours</code> <code>int</code> <p>Number of hours of data to return</p> <code>24</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of hourly statistics</p> <code></code> generate_report \u00b6 <pre><code>generate_report()\n</code></pre> <p>Generate a comprehensive metrics report.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive metrics report</p> <code></code> reset_metrics \u00b6 <pre><code>reset_metrics()\n</code></pre> <p>Reset all collected metrics.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the metrics collector and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.metrics.PerformanceMetrics","title":"PerformanceMetrics  <code>dataclass</code>","text":"<pre><code>PerformanceMetrics(\n    request_count=0,\n    successful_requests=0,\n    failed_requests=0,\n    total_duration=0.0,\n    avg_duration=0.0,\n    min_duration=float(\"inf\"),\n    max_duration=0.0,\n    retry_count=0,\n    rate_limit_hits=0,\n)\n</code></pre> <p>Performance metrics for requests and operations.</p> <p>Attributes:</p> Name Type Description <code>request_count</code> <code>int</code> <p>Total number of requests</p> <code>successful_requests</code> <code>int</code> <p>Number of successful requests</p> <code>failed_requests</code> <code>int</code> <p>Number of failed requests</p> <code>total_duration</code> <code>float</code> <p>Total time spent on requests</p> <code>avg_duration</code> <code>float</code> <p>Average request duration</p> <code>min_duration</code> <code>float</code> <p>Minimum request duration</p> <code>max_duration</code> <code>float</code> <p>Maximum request duration</p> <code>retry_count</code> <code>int</code> <p>Total number of retries</p> <code>rate_limit_hits</code> <code>int</code> <p>Number of rate limit encounters</p> Functions\u00b6 <code></code> update_duration \u00b6 <pre><code>update_duration(duration)\n</code></pre> <p>Update duration statistics.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.metrics.TokenUsageMetrics","title":"TokenUsageMetrics  <code>dataclass</code>","text":"<pre><code>TokenUsageMetrics(\n    total_tokens=0,\n    prompt_tokens=0,\n    completion_tokens=0,\n    total_cost=0.0,\n    requests_with_tokens=0,\n)\n</code></pre> <p>Token usage tracking metrics.</p> <p>Attributes:</p> Name Type Description <code>total_tokens</code> <code>int</code> <p>Total tokens used</p> <code>prompt_tokens</code> <code>int</code> <p>Tokens used for prompts</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used for completions</p> <code>total_cost</code> <code>float</code> <p>Estimated total cost</p> <code>requests_with_tokens</code> <code>int</code> <p>Number of requests that used tokens</p> Functions\u00b6 <code></code> add_usage \u00b6 <pre><code>add_usage(prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0)\n</code></pre> <p>Add token usage data.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.metrics-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.metrics.collector","title":"collector","text":"<p>Performance metrics collection and monitoring.</p> <p>This module provides comprehensive metrics collection for tracking request performance, token usage, cache effectiveness, and system health.</p> Classes\u00b6 PerformanceMetrics <code>dataclass</code> \u00b6 <pre><code>PerformanceMetrics(\n    request_count=0,\n    successful_requests=0,\n    failed_requests=0,\n    total_duration=0.0,\n    avg_duration=0.0,\n    min_duration=float(\"inf\"),\n    max_duration=0.0,\n    retry_count=0,\n    rate_limit_hits=0,\n)\n</code></pre> <p>Performance metrics for requests and operations.</p> <p>Attributes:</p> Name Type Description <code>request_count</code> <code>int</code> <p>Total number of requests</p> <code>successful_requests</code> <code>int</code> <p>Number of successful requests</p> <code>failed_requests</code> <code>int</code> <p>Number of failed requests</p> <code>total_duration</code> <code>float</code> <p>Total time spent on requests</p> <code>avg_duration</code> <code>float</code> <p>Average request duration</p> <code>min_duration</code> <code>float</code> <p>Minimum request duration</p> <code>max_duration</code> <code>float</code> <p>Maximum request duration</p> <code>retry_count</code> <code>int</code> <p>Total number of retries</p> <code>rate_limit_hits</code> <code>int</code> <p>Number of rate limit encounters</p> Functions\u00b6 <code></code> update_duration \u00b6 <pre><code>update_duration(duration)\n</code></pre> <p>Update duration statistics.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p> <code></code> TokenUsageMetrics <code>dataclass</code> \u00b6 <pre><code>TokenUsageMetrics(\n    total_tokens=0,\n    prompt_tokens=0,\n    completion_tokens=0,\n    total_cost=0.0,\n    requests_with_tokens=0,\n)\n</code></pre> <p>Token usage tracking metrics.</p> <p>Attributes:</p> Name Type Description <code>total_tokens</code> <code>int</code> <p>Total tokens used</p> <code>prompt_tokens</code> <code>int</code> <p>Tokens used for prompts</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used for completions</p> <code>total_cost</code> <code>float</code> <p>Estimated total cost</p> <code>requests_with_tokens</code> <code>int</code> <p>Number of requests that used tokens</p> Functions\u00b6 <code></code> add_usage \u00b6 <pre><code>add_usage(prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0)\n</code></pre> <p>Add token usage data.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p> <code></code> CacheMetrics <code>dataclass</code> \u00b6 <pre><code>CacheMetrics(hits=0, misses=0, evictions=0, expired=0, size=0, max_size=0)\n</code></pre> <p>Cache performance metrics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>evictions</code> <code>int</code> <p>Number of cache evictions</p> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>size</code> <code>int</code> <p>Current cache size</p> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> Attributes\u00b6 <code></code> hit_rate <code>property</code> \u00b6 <pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p> <code></code> miss_rate <code>property</code> \u00b6 <pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p> <code></code> MetricsCollector \u00b6 <pre><code>MetricsCollector(enabled=True, window_size=1000, retention_minutes=60)\n</code></pre> <p>Comprehensive metrics collector for SDK performance monitoring.</p> <p>This class collects and aggregates performance metrics including: - Request performance and timing - Token usage and costs - Cache effectiveness - Provider-specific metrics - System health indicators</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <p>Whether metrics collection is enabled</p> <code>window_size</code> <p>Size of the rolling window for metrics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to collect metrics</p> <code>True</code> <code>window_size</code> <code>int</code> <p>Size of rolling window for recent metrics</p> <code>1000</code> <code>retention_minutes</code> <code>int</code> <p>How long to retain detailed metrics</p> <code>60</code> Functions\u00b6 <code></code> record_request \u00b6 <pre><code>record_request(\n    provider,\n    operation,\n    duration,\n    success,\n    retry_count=0,\n    rate_limited=False,\n    error=None,\n)\n</code></pre> <p>Record a request performance metric.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>operation</code> <code>str</code> <p>Operation type (chat, completion, etc.)</p> required <code>duration</code> <code>float</code> <p>Request duration in seconds</p> required <code>success</code> <code>bool</code> <p>Whether the request was successful</p> required <code>retry_count</code> <code>int</code> <p>Number of retries performed</p> <code>0</code> <code>rate_limited</code> <code>bool</code> <p>Whether rate limiting was encountered</p> <code>False</code> <code>error</code> <code>Optional[str]</code> <p>Error message if request failed</p> <code>None</code> <code></code> record_token_usage \u00b6 <pre><code>record_token_usage(\n    provider, prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0\n)\n</code></pre> <p>Record token usage metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>prompt_tokens</code> <code>int</code> <p>Number of prompt tokens</p> <code>0</code> <code>completion_tokens</code> <code>int</code> <p>Number of completion tokens</p> <code>0</code> <code>total_tokens</code> <code>Optional[int]</code> <p>Total tokens (if different from sum)</p> <code>None</code> <code>cost</code> <code>float</code> <p>Estimated cost for this usage</p> <code>0.0</code> <code></code> record_cache_metrics \u00b6 <pre><code>record_cache_metrics(\n    hits=0, misses=0, evictions=0, expired=0, current_size=0, max_size=0\n)\n</code></pre> <p>Record cache performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>0</code> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>0</code> <code>evictions</code> <code>int</code> <p>Number of evictions</p> <code>0</code> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>0</code> <code>current_size</code> <code>int</code> <p>Current cache size</p> <code>0</code> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> <code>0</code> <code></code> get_overall_metrics \u00b6 <pre><code>get_overall_metrics()\n</code></pre> <p>Get overall performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing overall metrics</p> <code></code> get_provider_metrics \u00b6 <pre><code>get_provider_metrics(provider=None)\n</code></pre> <p>Get provider-specific metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Specific provider name (returns all if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing provider metrics</p> <code></code> get_operation_metrics \u00b6 <pre><code>get_operation_metrics()\n</code></pre> <p>Get operation-specific metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing operation metrics</p> <code></code> get_recent_requests \u00b6 <pre><code>get_recent_requests(limit=None)\n</code></pre> <p>Get recent request data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of requests to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent request data</p> <code></code> get_recent_errors \u00b6 <pre><code>get_recent_errors(limit=None)\n</code></pre> <p>Get recent error data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of errors to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent error data</p> <code></code> get_hourly_trends \u00b6 <pre><code>get_hourly_trends(hours=24)\n</code></pre> <p>Get hourly trend data.</p> <p>Parameters:</p> Name Type Description Default <code>hours</code> <code>int</code> <p>Number of hours of data to return</p> <code>24</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of hourly statistics</p> <code></code> generate_report \u00b6 <pre><code>generate_report()\n</code></pre> <p>Generate a comprehensive metrics report.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive metrics report</p> <code></code> reset_metrics \u00b6 <pre><code>reset_metrics()\n</code></pre> <p>Reset all collected metrics.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the metrics collector and cleanup resources.</p>"},{"location":"reference/deepsentinel/#deepsentinel.middleware","title":"middleware","text":"<p>Middleware components for request/response processing.</p>"},{"location":"reference/deepsentinel/#deepsentinel.middleware-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.middleware.ComplianceMiddleware","title":"ComplianceMiddleware","text":"<pre><code>ComplianceMiddleware(config)\n</code></pre> <p>Compliance middleware for processing requests and responses.</p> <p>This class implements a pipeline of compliance checks and transformations that can be applied to LLM requests and responses to ensure they meet organizational policies and regulatory requirements.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policies</code> <p>List of compliance policies</p> <code>audit_enabled</code> <p>Whether audit logging is enabled</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required Functions\u00b6 <code></code> process_request <code>async</code> \u00b6 <pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p> <code></code> process_response <code>async</code> \u00b6 <pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p> <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize middleware components.</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up middleware resources.</p> <code></code> get_audit_entries \u00b6 <pre><code>get_audit_entries()\n</code></pre> <p>Get all audit entries.</p> <p>Returns:</p> Type Description <code>List[AuditEntry]</code> <p>List of audit entries</p> <code></code> clear_audit_entries \u00b6 <pre><code>clear_audit_entries()\n</code></pre> <p>Clear all stored audit entries.</p> <code></code> submit_audit_entries <code>async</code> \u00b6 <pre><code>submit_audit_entries()\n</code></pre> <p>Submit audit entries to the audit API if enabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise</p> <code></code> add_policy \u00b6 <pre><code>add_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add</p> required <code></code> remove_policy \u00b6 <pre><code>remove_policy(policy_name)\n</code></pre> <p>Remove a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy to remove</p> required <code></code> get_policy \u00b6 <pre><code>get_policy(policy_name)\n</code></pre> <p>Get a compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.middleware-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.middleware.base","title":"base","text":"<p>Base middleware for compliance and processing pipeline.</p> <p>This module provides the foundation for compliance middleware that processes requests and responses through a configurable pipeline of checks and transformations.</p> Classes\u00b6 ComplianceMiddleware \u00b6 <pre><code>ComplianceMiddleware(config)\n</code></pre> <p>Compliance middleware for processing requests and responses.</p> <p>This class implements a pipeline of compliance checks and transformations that can be applied to LLM requests and responses to ensure they meet organizational policies and regulatory requirements.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policies</code> <p>List of compliance policies</p> <code>audit_enabled</code> <p>Whether audit logging is enabled</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required Functions\u00b6 <code></code> process_request <code>async</code> \u00b6 <pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p> <code></code> process_response <code>async</code> \u00b6 <pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p> <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize middleware components.</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up middleware resources.</p> <code></code> get_audit_entries \u00b6 <pre><code>get_audit_entries()\n</code></pre> <p>Get all audit entries.</p> <p>Returns:</p> Type Description <code>List[AuditEntry]</code> <p>List of audit entries</p> <code></code> clear_audit_entries \u00b6 <pre><code>clear_audit_entries()\n</code></pre> <p>Clear all stored audit entries.</p> <code></code> submit_audit_entries <code>async</code> \u00b6 <pre><code>submit_audit_entries()\n</code></pre> <p>Submit audit entries to the audit API if enabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise</p> <code></code> add_policy \u00b6 <pre><code>add_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add</p> required <code></code> remove_policy \u00b6 <pre><code>remove_policy(policy_name)\n</code></pre> <p>Remove a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy to remove</p> required <code></code> get_policy \u00b6 <pre><code>get_policy(policy_name)\n</code></pre> <p>Get a compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers","title":"providers","text":"<p>Provider adapters for different LLM services.</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.providers.AnthropicProvider","title":"AnthropicProvider","text":"<pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.BaseLLMProvider","title":"BaseLLMProvider","text":"<pre><code>BaseLLMProvider(config, name)\n</code></pre> <p>               Bases: <code>ProviderAdapter</code></p> <p>Base class for LLM providers with common functionality.</p> <p>This class provides common implementations and utilities that most LLM providers can use, reducing code duplication.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for this provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.ProviderAdapter","title":"ProviderAdapter","text":"<pre><code>ProviderAdapter(config, name)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all LLM provider adapters.</p> <p>This class defines the interface that all provider implementations must follow, ensuring consistent behavior across different providers.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Attributes\u00b6 <code></code> client <code>property</code> \u00b6 <pre><code>client\n</code></pre> <p>Get the underlying provider client.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The provider's client instance</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the provider is not initialized</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the provider is initialized.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the provider client and connection.</p> <p>This method should set up the provider client, validate configuration, and establish any necessary connections.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up provider resources.</p> <p>This method should close connections, clean up resources, and prepare the provider for shutdown.</p> <code></code> health_check <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> chat_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> create_embeddings <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> list_models <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-2', **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> validate_request \u00b6 <pre><code>validate_request(request)\n</code></pre> <p>Validate a request before processing.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>Request to validate</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the request is invalid</p> <code></code> handle_provider_error \u00b6 <pre><code>handle_provider_error(error, operation)\n</code></pre> <p>Handle and wrap provider-specific errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original error from the provider</p> required <code>operation</code> <code>str</code> <p>The operation that failed</p> required <p>Raises:</p> Type Description <code>ProviderError</code> <p>Wrapped provider error</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.OpenAIProvider","title":"OpenAIProvider","text":"<pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.ProviderRegistry","title":"ProviderRegistry","text":"<pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p> Attributes\u00b6 <code></code> providers <code>property</code> \u00b6 <pre><code>providers\n</code></pre> <p>Get all registered providers.</p> <code></code> provider_names <code>property</code> \u00b6 <pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p> <code></code> default_provider <code>property</code> \u00b6 <pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p> Functions\u00b6 <code></code> register_provider_class \u00b6 <pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p> <code></code> register_model_mapping \u00b6 <pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required <code></code> register_model_mappings \u00b6 <pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required <code></code> get_provider_for_model \u00b6 <pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p> <code></code> get_models_for_provider \u00b6 <pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p> <code></code> get_provider_metadata \u00b6 <pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p> <code></code> set_failover_chain \u00b6 <pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required <code></code> get_failover_chain \u00b6 <pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p> <code></code> create_provider \u00b6 <pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p> <code></code> register_provider <code>async</code> \u00b6 <pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p> <code></code> unregister_provider \u00b6 <pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> get_provider \u00b6 <pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p> <code></code> get_provider_with_model_support \u00b6 <pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p> <code></code> has_provider \u00b6 <pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p> <code></code> set_default_provider \u00b6 <pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> initialize_all <code>async</code> \u00b6 <pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p> <code></code> cleanup_all <code>async</code> \u00b6 <pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p> <code></code> health_check_all <code>async</code> \u00b6 <pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p> <code></code> from_config <code>async</code> <code>classmethod</code> \u00b6 <pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers-functions","title":"Functions","text":""},{"location":"reference/deepsentinel/#deepsentinel.providers.create_registry_from_config","title":"create_registry_from_config  <code>async</code>","text":"<pre><code>create_registry_from_config(config, setup_failover=True)\n</code></pre> <p>Create and configure a provider registry from SentinelConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required <code>setup_failover</code> <code>bool</code> <p>Whether to set up default failover chains</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.get_global_registry","title":"get_global_registry","text":"<pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.initialize_default_providers","title":"initialize_default_providers  <code>async</code>","text":"<pre><code>initialize_default_providers()\n</code></pre> <p>Initialize default provider classes with model mappings.</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.set_global_registry","title":"set_global_registry","text":"<pre><code>set_global_registry(registry)\n</code></pre> <p>Set the global provider registry instance.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to set as global</p> required"},{"location":"reference/deepsentinel/#deepsentinel.providers.setup_default_failover_chains","title":"setup_default_failover_chains","text":"<pre><code>setup_default_failover_chains(registry)\n</code></pre> <p>Set up default failover chains for common scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to configure failover chains for</p> required"},{"location":"reference/deepsentinel/#deepsentinel.providers-modules","title":"Modules","text":""},{"location":"reference/deepsentinel/#deepsentinel.providers.anthropic","title":"anthropic","text":"<p>Anthropic provider adapter for DeepSentinel.</p> <p>This module implements the Anthropic provider adapter, supporting Claude models with comprehensive functionality including chat completions, streaming support, robust error handling, and middleware integration.</p> Classes\u00b6 AnthropicProvider \u00b6 <pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.base","title":"base","text":"<p>Base provider adapter for LLM integrations.</p> <p>This module defines the abstract base class for all provider adapters, establishing a consistent interface for different LLM providers.</p> Classes\u00b6 ProviderAdapter \u00b6 <pre><code>ProviderAdapter(config, name)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all LLM provider adapters.</p> <p>This class defines the interface that all provider implementations must follow, ensuring consistent behavior across different providers.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Attributes\u00b6 <code></code> client <code>property</code> \u00b6 <pre><code>client\n</code></pre> <p>Get the underlying provider client.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The provider's client instance</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the provider is not initialized</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the provider is initialized.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the provider client and connection.</p> <p>This method should set up the provider client, validate configuration, and establish any necessary connections.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up provider resources.</p> <p>This method should close connections, clean up resources, and prepare the provider for shutdown.</p> <code></code> health_check <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> chat_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> create_embeddings <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> list_models <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-2', **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> validate_request \u00b6 <pre><code>validate_request(request)\n</code></pre> <p>Validate a request before processing.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>Request to validate</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the request is invalid</p> <code></code> handle_provider_error \u00b6 <pre><code>handle_provider_error(error, operation)\n</code></pre> <p>Handle and wrap provider-specific errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original error from the provider</p> required <code>operation</code> <code>str</code> <p>The operation that failed</p> required <p>Raises:</p> Type Description <code>ProviderError</code> <p>Wrapped provider error</p> <code></code> BaseLLMProvider \u00b6 <pre><code>BaseLLMProvider(config, name)\n</code></pre> <p>               Bases: <code>ProviderAdapter</code></p> <p>Base class for LLM providers with common functionality.</p> <p>This class provides common implementations and utilities that most LLM providers can use, reducing code duplication.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for this provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.openai","title":"openai","text":"<p>OpenAI provider adapter for DeepSentinel.</p> <p>This module implements the OpenAI provider adapter, supporting all OpenAI API features including chat completions, text completions, embeddings, and more. Includes comprehensive error handling, streaming support, and middleware.</p> Classes\u00b6 OpenAIProvider \u00b6 <pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/deepsentinel/#deepsentinel.providers.registry","title":"registry","text":"<p>Provider registry for managing LLM provider instances.</p> <p>This module provides a centralized registry for managing different LLM provider adapters, including registration, lookup, and lifecycle management.</p> Classes\u00b6 ProviderRegistry \u00b6 <pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p> Attributes\u00b6 <code></code> providers <code>property</code> \u00b6 <pre><code>providers\n</code></pre> <p>Get all registered providers.</p> <code></code> provider_names <code>property</code> \u00b6 <pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p> <code></code> default_provider <code>property</code> \u00b6 <pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p> Functions\u00b6 <code></code> register_provider_class \u00b6 <pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p> <code></code> register_model_mapping \u00b6 <pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required <code></code> register_model_mappings \u00b6 <pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required <code></code> get_provider_for_model \u00b6 <pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p> <code></code> get_models_for_provider \u00b6 <pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p> <code></code> get_provider_metadata \u00b6 <pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p> <code></code> set_failover_chain \u00b6 <pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required <code></code> get_failover_chain \u00b6 <pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p> <code></code> create_provider \u00b6 <pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p> <code></code> register_provider <code>async</code> \u00b6 <pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p> <code></code> unregister_provider \u00b6 <pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> get_provider \u00b6 <pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p> <code></code> get_provider_with_model_support \u00b6 <pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p> <code></code> has_provider \u00b6 <pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p> <code></code> set_default_provider \u00b6 <pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> initialize_all <code>async</code> \u00b6 <pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p> <code></code> cleanup_all <code>async</code> \u00b6 <pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p> <code></code> health_check_all <code>async</code> \u00b6 <pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p> <code></code> from_config <code>async</code> <code>classmethod</code> \u00b6 <pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p> Functions\u00b6 <code></code> get_global_registry \u00b6 <pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p> <code></code> set_global_registry \u00b6 <pre><code>set_global_registry(registry)\n</code></pre> <p>Set the global provider registry instance.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to set as global</p> required <code></code> initialize_default_providers <code>async</code> \u00b6 <pre><code>initialize_default_providers()\n</code></pre> <p>Initialize default provider classes with model mappings.</p> <code></code> setup_default_failover_chains \u00b6 <pre><code>setup_default_failover_chains(registry)\n</code></pre> <p>Set up default failover chains for common scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to configure failover chains for</p> required <code></code> create_registry_from_config <code>async</code> \u00b6 <pre><code>create_registry_from_config(config, setup_failover=True)\n</code></pre> <p>Create and configure a provider registry from SentinelConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required <code>setup_failover</code> <code>bool</code> <p>Whether to set up default failover chains</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p>"},{"location":"reference/deepsentinel/#deepsentinel.types","title":"types","text":"<p>DeepSentinel SDK data types and models.</p> <p>This module contains all Pydantic models used for request/response validation, configuration, and internal data structures throughout the DeepSentinel SDK.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types-classes","title":"Classes","text":""},{"location":"reference/deepsentinel/#deepsentinel.types.MessageRole","title":"MessageRole","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of possible message roles in a conversation.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ComplianceAction","title":"ComplianceAction","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of possible compliance actions.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.SeverityLevel","title":"SeverityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of severity levels for violations and alerts.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ProviderType","title":"ProviderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of supported LLM providers.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.Message","title":"Message","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single message in a conversation.</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>MessageRole</code> <p>The role of the message sender</p> <code>content</code> <code>Optional[str]</code> <p>The message content</p> <code>name</code> <code>Optional[str]</code> <p>Optional name of the sender</p> <code>function_call</code> <code>Optional[Dict[str, Any]]</code> <p>Optional function call data</p> <code>tool_calls</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional list of tool calls</p> <code>tool_call_id</code> <code>Optional[str]</code> <p>Optional tool call identifier</p> Functions\u00b6 <code></code> validate_content \u00b6 <pre><code>validate_content(v, values)\n</code></pre> <p>Validate that content is provided for most message types.</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ChatRequest","title":"ChatRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>messages</code> <code>List[Message]</code> <p>List of conversation messages</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>functions</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional function definitions</p> <code>function_call</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional function call preference</p> <code>tools</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional tool definitions</p> <code>tool_choice</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional tool choice preference</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.Usage","title":"Usage","text":"<p>               Bases: <code>BaseModel</code></p> <p>Token usage information.</p> <p>Attributes:</p> Name Type Description <code>prompt_tokens</code> <code>int</code> <p>Tokens used in the prompt</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used in the completion</p> <code>total_tokens</code> <code>int</code> <p>Total tokens used</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.Choice","title":"Choice","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single completion choice.</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>int</code> <p>Choice index</p> <code>message</code> <code>Message</code> <p>The response message</p> <code>finish_reason</code> <code>Optional[str]</code> <p>Reason the completion finished</p> <code>logprobs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional log probabilities</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ChatResponse","title":"ChatResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[Choice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.CompletionRequest","title":"CompletionRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for text completions.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>str</code> <p>Model identifier</p> <code>prompt</code> <code>Union[str, List[str]]</code> <p>Text prompt</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>n</code> <code>Optional[int]</code> <p>Number of completions to generate</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>logprobs</code> <code>Optional[int]</code> <p>Number of log probabilities to return</p> <code>echo</code> <code>bool</code> <p>Whether to echo the prompt</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>best_of</code> <code>Optional[int]</code> <p>Number of completions to generate server-side</p> <code>logit_bias</code> <code>Optional[Dict[str, float]]</code> <p>Logit bias adjustments</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>suffix</code> <code>Optional[str]</code> <p>Optional suffix for completion</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.CompletionChoice","title":"CompletionChoice","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single completion choice.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Generated text</p> <code>index</code> <code>int</code> <p>Choice index</p> <code>logprobs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional log probabilities</p> <code>finish_reason</code> <code>Optional[str]</code> <p>Reason the completion finished</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.CompletionResponse","title":"CompletionResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for text completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[CompletionChoice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.EmbeddingRequest","title":"EmbeddingRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>Union[str, List[str]]</code> <p>Text to embed</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>encoding_format</code> <code>Optional[str]</code> <p>Encoding format for embeddings</p> <code>dimensions</code> <code>Optional[int]</code> <p>Number of dimensions for embeddings</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.Embedding","title":"Embedding","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single embedding.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>str</code> <p>Object type</p> <code>embedding</code> <code>List[float]</code> <p>The embedding vector</p> <code>index</code> <code>int</code> <p>Embedding index</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.EmbeddingResponse","title":"EmbeddingResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>str</code> <p>Object type</p> <code>data</code> <code>List[Embedding]</code> <p>List of embeddings</p> <code>model</code> <code>str</code> <p>Model used</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ComplianceCheck","title":"ComplianceCheck","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a compliance check result.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the policy that was checked</p> <code>passed</code> <code>bool</code> <p>Whether the check passed</p> <code>action</code> <code>ComplianceAction</code> <p>Action to take if check failed</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of any violation</p> <code>message</code> <code>str</code> <p>Human-readable message about the check</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional details about the check</p> <code>timestamp</code> <code>datetime</code> <p>When the check was performed</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.AuditEntry","title":"AuditEntry","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an audit log entry.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the entry</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>operation</code> <code>str</code> <p>The operation that was performed</p> <code>provider</code> <code>str</code> <p>The LLM provider used</p> <code>model</code> <code>str</code> <p>The model used</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Summary of the request</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Summary of the response</p> <code>compliance_checks</code> <code>List[ComplianceCheck]</code> <p>List of compliance checks performed</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional metadata</p> <code>cost</code> <code>Optional[float]</code> <p>Optional cost information</p> <code>duration_ms</code> <code>Optional[int]</code> <p>Duration of the operation in milliseconds</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.ProviderConfig","title":"ProviderConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a specific provider.</p> <p>Attributes:</p> Name Type Description <code>provider_type</code> <code>ProviderType</code> <p>Type of the provider</p> <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the provider's API</p> <code>timeout</code> <code>int</code> <p>Request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>rate_limit</code> <code>Optional[Dict[str, Any]]</code> <p>Rate limit configuration</p> <code>headers</code> <code>Dict[str, str]</code> <p>Additional headers to send</p> <code>extra_config</code> <code>Dict[str, Any]</code> <p>Provider-specific configuration</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.StreamChunk","title":"StreamChunk","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a chunk of streamed response data.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Chunk identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[Dict[str, Any]]</code> <p>List of choice deltas</p> <code>usage</code> <code>Optional[Usage]</code> <p>Optional usage information (usually only in final chunk)</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.MCPToolCall","title":"MCPToolCall","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an MCP tool call.</p> <p>Attributes:</p> Name Type Description <code>server_name</code> <code>str</code> <p>Name of the MCP server</p> <code>tool_name</code> <code>str</code> <p>Name of the tool to call</p> <code>arguments</code> <code>Dict[str, Any]</code> <p>Arguments to pass to the tool</p> <code>call_id</code> <code>str</code> <p>Unique identifier for the call</p>"},{"location":"reference/deepsentinel/#deepsentinel.types.MCPToolResult","title":"MCPToolResult","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the result of an MCP tool call.</p> <p>Attributes:</p> Name Type Description <code>call_id</code> <code>str</code> <p>Identifier of the original call</p> <code>success</code> <code>bool</code> <p>Whether the call was successful</p> <code>result</code> <code>Optional[Any]</code> <p>The result data</p> <code>error</code> <code>Optional[str]</code> <p>Error information if the call failed</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional metadata</p>"},{"location":"reference/exceptions/","title":"deepsentinel.exceptions","text":""},{"location":"reference/exceptions/#deepsentinel.exceptions","title":"exceptions","text":"<p>DeepSentinel SDK exception hierarchy.</p> <p>This module defines all custom exceptions used throughout the DeepSentinel SDK, providing clear error types for different failure scenarios.</p>"},{"location":"reference/exceptions/#deepsentinel.exceptions-classes","title":"Classes","text":""},{"location":"reference/exceptions/#deepsentinel.exceptions.DeepSentinelError","title":"DeepSentinelError","text":"<pre><code>DeepSentinelError(message, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>Exception</code></p> <p>Base exception for all DeepSentinel SDK errors.</p> <p>All SDK-specific exceptions inherit from this base class to provide a consistent exception hierarchy and error handling interface.</p> <p>Attributes:</p> Name Type Description <code>message</code> <p>Human-readable error message</p> <code>error_code</code> <p>Optional error code for programmatic handling</p> <code>details</code> <p>Optional dictionary containing additional error context</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.ComplianceViolationError","title":"ComplianceViolationError","text":"<pre><code>ComplianceViolationError(\n    message, policy_name, violation_type, severity=\"high\", error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when content violates compliance policies.</p> <p>This exception is raised when the compliance middleware detects content that violates configured compliance policies, such as PII detection, content filtering, or security violations.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <p>Name of the violated policy</p> <code>violation_type</code> <p>Type of violation detected</p> <code>severity</code> <p>Severity level of the violation</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>policy_name</code> <code>str</code> <p>Name of the violated policy</p> required <code>violation_type</code> <code>str</code> <p>Type of violation detected</p> required <code>severity</code> <code>str</code> <p>Severity level of the violation</p> <code>'high'</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.ProviderError","title":"ProviderError","text":"<pre><code>ProviderError(\n    message,\n    provider_name,\n    status_code=None,\n    provider_error=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are issues with LLM provider operations.</p> <p>This exception covers various provider-related errors including authentication failures, rate limiting, API errors, and provider-specific issues.</p> <p>Attributes:</p> Name Type Description <code>provider_name</code> <p>Name of the LLM provider</p> <code>status_code</code> <p>HTTP status code if applicable</p> <code>provider_error</code> <p>Original error from the provider</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>status_code</code> <code>Optional[int]</code> <p>HTTP status code if applicable</p> <code>None</code> <code>provider_error</code> <code>Optional[Exception]</code> <p>Original error from the provider</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.ConfigurationError","title":"ConfigurationError","text":"<pre><code>ConfigurationError(\n    message, config_key=None, config_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are configuration-related issues.</p> <p>This exception is raised for various configuration problems including invalid configuration values, missing required settings, conflicting options, and environment setup issues.</p> <p>Attributes:</p> Name Type Description <code>config_key</code> <p>The configuration key that caused the error</p> <code>config_value</code> <p>The problematic configuration value</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>config_key</code> <code>Optional[str]</code> <p>The configuration key that caused the error</p> <code>None</code> <code>config_value</code> <code>Optional[Any]</code> <p>The problematic configuration value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.MCPError","title":"MCPError","text":"<pre><code>MCPError(\n    message,\n    server_name=None,\n    tool_name=None,\n    operation=None,\n    error_code=None,\n    details=None,\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when there are Model Context Protocol (MCP) related issues.</p> <p>This exception covers MCP server communication errors, tool execution failures, resource access issues, and protocol-level problems.</p> <p>Attributes:</p> Name Type Description <code>server_name</code> <p>Name of the MCP server</p> <code>tool_name</code> <p>Name of the MCP tool if applicable</p> <code>operation</code> <p>The MCP operation that failed</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>server_name</code> <code>Optional[str]</code> <p>Name of the MCP server</p> <code>None</code> <code>tool_name</code> <code>Optional[str]</code> <p>Name of the MCP tool if applicable</p> <code>None</code> <code>operation</code> <code>Optional[str]</code> <p>The MCP operation that failed</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.AuthenticationError","title":"AuthenticationError","text":"<pre><code>AuthenticationError(message, provider_name, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider authentication fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.RateLimitError","title":"RateLimitError","text":"<pre><code>RateLimitError(message, provider_name, retry_after=None, error_code=None, details=None)\n</code></pre> <p>               Bases: <code>ProviderError</code></p> <p>Raised when provider rate limits are exceeded.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>provider_name</code> <code>str</code> <p>Name of the LLM provider</p> required <code>retry_after</code> <code>Optional[int]</code> <p>Seconds to wait before retrying</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/exceptions/#deepsentinel.exceptions.ValidationError","title":"ValidationError","text":"<pre><code>ValidationError(\n    message, field_name=None, field_value=None, error_code=None, details=None\n)\n</code></pre> <p>               Bases: <code>DeepSentinelError</code></p> <p>Raised when data validation fails.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Human-readable error message</p> required <code>field_name</code> <code>Optional[str]</code> <p>Name of the field that failed validation</p> <code>None</code> <code>field_value</code> <code>Optional[Any]</code> <p>The invalid field value</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code for programmatic handling</p> <code>None</code> <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional dictionary containing additional error context</p> <code>None</code>"},{"location":"reference/interfaces/","title":"deepsentinel.interfaces","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces","title":"interfaces","text":"<p>DeepSentinel SDK API interfaces.</p> <p>This module defines the abstract interfaces for different LLM operations such as chat completions, text completions, embeddings, and streaming.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces-classes","title":"Classes","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.BaseInterface","title":"BaseInterface","text":"<pre><code>BaseInterface(client)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base interface for all LLM operations.</p> <p>This abstract base class defines common functionality and patterns that all specific interfaces should follow.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Any</code> <p>Reference to the main SentinelClient instance</p> required"},{"location":"reference/interfaces/#deepsentinel.interfaces.BaseInterface-attributes","title":"Attributes","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.BaseInterface.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre> <p>Get the client reference.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ChatInterface","title":"ChatInterface","text":"<pre><code>ChatInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for chat completion operations.</p> <p>This interface handles conversational AI interactions with support for both synchronous and asynchronous operations, streaming responses, and compliance checking.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ChatInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.ChatInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ChatInterface.create_stream","title":"create_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ChatInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a chat completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.CompletionsInterface","title":"CompletionsInterface","text":"<pre><code>CompletionsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for text completion operations.</p> <p>This interface handles text completion requests with support for various completion parameters and compliance checking.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.CompletionsInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.CompletionsInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.CompletionsInterface.create_stream","title":"create_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_stream(request, provider=None, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.CompletionsInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create a text completion synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.EmbeddingsInterface","title":"EmbeddingsInterface","text":"<pre><code>EmbeddingsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for embedding operations.</p> <p>This interface handles text embedding generation with support for various embedding models and batch processing.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.EmbeddingsInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.EmbeddingsInterface.create","title":"create  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If content violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.EmbeddingsInterface.create_sync","title":"create_sync","text":"<pre><code>create_sync(request, provider=None, **kwargs)\n</code></pre> <p>Create embeddings synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface","title":"ModelsInterface","text":"<pre><code>ModelsInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for model information and management.</p> <p>This interface provides access to available models, their capabilities, and metadata from different providers.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface.list","title":"list  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>list(provider=None, **kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface.retrieve","title":"retrieve  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>retrieve(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface.list_sync","title":"list_sync","text":"<pre><code>list_sync(provider=None, **kwargs)\n</code></pre> <p>List available models synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ModelsInterface.retrieve_sync","title":"retrieve_sync","text":"<pre><code>retrieve_sync(model_id, provider=None, **kwargs)\n</code></pre> <p>Retrieve model information synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>provider</code> <code>Optional[str]</code> <p>Provider to query (queries default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface","title":"AudioInterface","text":"<pre><code>AudioInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for audio operations like transcription and text-to-speech.</p> <p>This interface handles audio-related AI operations with support for various audio formats and processing options.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface.transcribe","title":"transcribe  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>transcribe(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface.translate","title":"translate  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>translate(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface.transcribe_sync","title":"transcribe_sync","text":"<pre><code>transcribe_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Transcribe audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.AudioInterface.translate_sync","title":"translate_sync","text":"<pre><code>translate_sync(audio_file, model='whisper-1', provider=None, **kwargs)\n</code></pre> <p>Translate audio synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ImageInterface","title":"ImageInterface","text":"<pre><code>ImageInterface(client)\n</code></pre> <p>               Bases: <code>BaseInterface</code></p> <p>Interface for image generation and processing operations.</p> <p>This interface handles image-related AI operations including generation, editing, and variation creation.</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ImageInterface-functions","title":"Functions","text":""},{"location":"reference/interfaces/#deepsentinel.interfaces.ImageInterface.generate","title":"generate  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>generate(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If prompt violates policies</p> <code>ProviderError</code> <p>If provider operation fails</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/interfaces/#deepsentinel.interfaces.ImageInterface.generate_sync","title":"generate_sync","text":"<pre><code>generate_sync(prompt, model='dall-e-2', provider=None, **kwargs)\n</code></pre> <p>Generate images synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>provider</code> <code>Optional[str]</code> <p>Provider to use (uses default if None)</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p>"},{"location":"reference/metrics/","title":"deepsentinel.metrics","text":""},{"location":"reference/metrics/#deepsentinel.metrics","title":"metrics","text":"<p>DeepSentinel SDK performance metrics and monitoring.</p> <p>This module provides comprehensive performance monitoring, metrics collection, and reporting utilities for tracking SDK performance and usage patterns.</p>"},{"location":"reference/metrics/#deepsentinel.metrics-classes","title":"Classes","text":""},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector","title":"MetricsCollector","text":"<pre><code>MetricsCollector(enabled=True, window_size=1000, retention_minutes=60)\n</code></pre> <p>Comprehensive metrics collector for SDK performance monitoring.</p> <p>This class collects and aggregates performance metrics including: - Request performance and timing - Token usage and costs - Cache effectiveness - Provider-specific metrics - System health indicators</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <p>Whether metrics collection is enabled</p> <code>window_size</code> <p>Size of the rolling window for metrics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to collect metrics</p> <code>True</code> <code>window_size</code> <code>int</code> <p>Size of rolling window for recent metrics</p> <code>1000</code> <code>retention_minutes</code> <code>int</code> <p>How long to retain detailed metrics</p> <code>60</code>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector-functions","title":"Functions","text":""},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.record_request","title":"record_request","text":"<pre><code>record_request(\n    provider,\n    operation,\n    duration,\n    success,\n    retry_count=0,\n    rate_limited=False,\n    error=None,\n)\n</code></pre> <p>Record a request performance metric.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>operation</code> <code>str</code> <p>Operation type (chat, completion, etc.)</p> required <code>duration</code> <code>float</code> <p>Request duration in seconds</p> required <code>success</code> <code>bool</code> <p>Whether the request was successful</p> required <code>retry_count</code> <code>int</code> <p>Number of retries performed</p> <code>0</code> <code>rate_limited</code> <code>bool</code> <p>Whether rate limiting was encountered</p> <code>False</code> <code>error</code> <code>Optional[str]</code> <p>Error message if request failed</p> <code>None</code>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.record_token_usage","title":"record_token_usage","text":"<pre><code>record_token_usage(\n    provider, prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0\n)\n</code></pre> <p>Record token usage metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>prompt_tokens</code> <code>int</code> <p>Number of prompt tokens</p> <code>0</code> <code>completion_tokens</code> <code>int</code> <p>Number of completion tokens</p> <code>0</code> <code>total_tokens</code> <code>Optional[int]</code> <p>Total tokens (if different from sum)</p> <code>None</code> <code>cost</code> <code>float</code> <p>Estimated cost for this usage</p> <code>0.0</code>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.record_cache_metrics","title":"record_cache_metrics","text":"<pre><code>record_cache_metrics(\n    hits=0, misses=0, evictions=0, expired=0, current_size=0, max_size=0\n)\n</code></pre> <p>Record cache performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>0</code> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>0</code> <code>evictions</code> <code>int</code> <p>Number of evictions</p> <code>0</code> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>0</code> <code>current_size</code> <code>int</code> <p>Current cache size</p> <code>0</code> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> <code>0</code>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_overall_metrics","title":"get_overall_metrics","text":"<pre><code>get_overall_metrics()\n</code></pre> <p>Get overall performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing overall metrics</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_provider_metrics","title":"get_provider_metrics","text":"<pre><code>get_provider_metrics(provider=None)\n</code></pre> <p>Get provider-specific metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Specific provider name (returns all if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing provider metrics</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_operation_metrics","title":"get_operation_metrics","text":"<pre><code>get_operation_metrics()\n</code></pre> <p>Get operation-specific metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing operation metrics</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_recent_requests","title":"get_recent_requests","text":"<pre><code>get_recent_requests(limit=None)\n</code></pre> <p>Get recent request data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of requests to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent request data</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_recent_errors","title":"get_recent_errors","text":"<pre><code>get_recent_errors(limit=None)\n</code></pre> <p>Get recent error data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of errors to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent error data</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.get_hourly_trends","title":"get_hourly_trends","text":"<pre><code>get_hourly_trends(hours=24)\n</code></pre> <p>Get hourly trend data.</p> <p>Parameters:</p> Name Type Description Default <code>hours</code> <code>int</code> <p>Number of hours of data to return</p> <code>24</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of hourly statistics</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.generate_report","title":"generate_report","text":"<pre><code>generate_report()\n</code></pre> <p>Generate a comprehensive metrics report.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive metrics report</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.reset_metrics","title":"reset_metrics","text":"<pre><code>reset_metrics()\n</code></pre> <p>Reset all collected metrics.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.MetricsCollector.close","title":"close  <code>async</code>","text":"<pre><code>close()\n</code></pre> <p>Close the metrics collector and cleanup resources.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.PerformanceMetrics","title":"PerformanceMetrics  <code>dataclass</code>","text":"<pre><code>PerformanceMetrics(\n    request_count=0,\n    successful_requests=0,\n    failed_requests=0,\n    total_duration=0.0,\n    avg_duration=0.0,\n    min_duration=float(\"inf\"),\n    max_duration=0.0,\n    retry_count=0,\n    rate_limit_hits=0,\n)\n</code></pre> <p>Performance metrics for requests and operations.</p> <p>Attributes:</p> Name Type Description <code>request_count</code> <code>int</code> <p>Total number of requests</p> <code>successful_requests</code> <code>int</code> <p>Number of successful requests</p> <code>failed_requests</code> <code>int</code> <p>Number of failed requests</p> <code>total_duration</code> <code>float</code> <p>Total time spent on requests</p> <code>avg_duration</code> <code>float</code> <p>Average request duration</p> <code>min_duration</code> <code>float</code> <p>Minimum request duration</p> <code>max_duration</code> <code>float</code> <p>Maximum request duration</p> <code>retry_count</code> <code>int</code> <p>Total number of retries</p> <code>rate_limit_hits</code> <code>int</code> <p>Number of rate limit encounters</p>"},{"location":"reference/metrics/#deepsentinel.metrics.PerformanceMetrics-functions","title":"Functions","text":""},{"location":"reference/metrics/#deepsentinel.metrics.PerformanceMetrics.update_duration","title":"update_duration","text":"<pre><code>update_duration(duration)\n</code></pre> <p>Update duration statistics.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.PerformanceMetrics.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.TokenUsageMetrics","title":"TokenUsageMetrics  <code>dataclass</code>","text":"<pre><code>TokenUsageMetrics(\n    total_tokens=0,\n    prompt_tokens=0,\n    completion_tokens=0,\n    total_cost=0.0,\n    requests_with_tokens=0,\n)\n</code></pre> <p>Token usage tracking metrics.</p> <p>Attributes:</p> Name Type Description <code>total_tokens</code> <code>int</code> <p>Total tokens used</p> <code>prompt_tokens</code> <code>int</code> <p>Tokens used for prompts</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used for completions</p> <code>total_cost</code> <code>float</code> <p>Estimated total cost</p> <code>requests_with_tokens</code> <code>int</code> <p>Number of requests that used tokens</p>"},{"location":"reference/metrics/#deepsentinel.metrics.TokenUsageMetrics-functions","title":"Functions","text":""},{"location":"reference/metrics/#deepsentinel.metrics.TokenUsageMetrics.add_usage","title":"add_usage","text":"<pre><code>add_usage(prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0)\n</code></pre> <p>Add token usage data.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.TokenUsageMetrics.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/metrics/#deepsentinel.metrics-modules","title":"Modules","text":""},{"location":"reference/metrics/#deepsentinel.metrics.collector","title":"collector","text":"<p>Performance metrics collection and monitoring.</p> <p>This module provides comprehensive metrics collection for tracking request performance, token usage, cache effectiveness, and system health.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.collector-classes","title":"Classes","text":""},{"location":"reference/metrics/#deepsentinel.metrics.collector.PerformanceMetrics","title":"PerformanceMetrics  <code>dataclass</code>","text":"<pre><code>PerformanceMetrics(\n    request_count=0,\n    successful_requests=0,\n    failed_requests=0,\n    total_duration=0.0,\n    avg_duration=0.0,\n    min_duration=float(\"inf\"),\n    max_duration=0.0,\n    retry_count=0,\n    rate_limit_hits=0,\n)\n</code></pre> <p>Performance metrics for requests and operations.</p> <p>Attributes:</p> Name Type Description <code>request_count</code> <code>int</code> <p>Total number of requests</p> <code>successful_requests</code> <code>int</code> <p>Number of successful requests</p> <code>failed_requests</code> <code>int</code> <p>Number of failed requests</p> <code>total_duration</code> <code>float</code> <p>Total time spent on requests</p> <code>avg_duration</code> <code>float</code> <p>Average request duration</p> <code>min_duration</code> <code>float</code> <p>Minimum request duration</p> <code>max_duration</code> <code>float</code> <p>Maximum request duration</p> <code>retry_count</code> <code>int</code> <p>Total number of retries</p> <code>rate_limit_hits</code> <code>int</code> <p>Number of rate limit encounters</p> Functions\u00b6 <code></code> update_duration \u00b6 <pre><code>update_duration(duration)\n</code></pre> <p>Update duration statistics.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.collector.TokenUsageMetrics","title":"TokenUsageMetrics  <code>dataclass</code>","text":"<pre><code>TokenUsageMetrics(\n    total_tokens=0,\n    prompt_tokens=0,\n    completion_tokens=0,\n    total_cost=0.0,\n    requests_with_tokens=0,\n)\n</code></pre> <p>Token usage tracking metrics.</p> <p>Attributes:</p> Name Type Description <code>total_tokens</code> <code>int</code> <p>Total tokens used</p> <code>prompt_tokens</code> <code>int</code> <p>Tokens used for prompts</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used for completions</p> <code>total_cost</code> <code>float</code> <p>Estimated total cost</p> <code>requests_with_tokens</code> <code>int</code> <p>Number of requests that used tokens</p> Functions\u00b6 <code></code> add_usage \u00b6 <pre><code>add_usage(prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0)\n</code></pre> <p>Add token usage data.</p> <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.collector.CacheMetrics","title":"CacheMetrics  <code>dataclass</code>","text":"<pre><code>CacheMetrics(hits=0, misses=0, evictions=0, expired=0, size=0, max_size=0)\n</code></pre> <p>Cache performance metrics.</p> <p>Attributes:</p> Name Type Description <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>evictions</code> <code>int</code> <p>Number of cache evictions</p> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>size</code> <code>int</code> <p>Current cache size</p> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> Attributes\u00b6 <code></code> hit_rate <code>property</code> \u00b6 <pre><code>hit_rate\n</code></pre> <p>Calculate cache hit rate.</p> <code></code> miss_rate <code>property</code> \u00b6 <pre><code>miss_rate\n</code></pre> <p>Calculate cache miss rate.</p> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert to dictionary representation.</p>"},{"location":"reference/metrics/#deepsentinel.metrics.collector.MetricsCollector","title":"MetricsCollector","text":"<pre><code>MetricsCollector(enabled=True, window_size=1000, retention_minutes=60)\n</code></pre> <p>Comprehensive metrics collector for SDK performance monitoring.</p> <p>This class collects and aggregates performance metrics including: - Request performance and timing - Token usage and costs - Cache effectiveness - Provider-specific metrics - System health indicators</p> <p>Attributes:</p> Name Type Description <code>enabled</code> <p>Whether metrics collection is enabled</p> <code>window_size</code> <p>Size of the rolling window for metrics</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to collect metrics</p> <code>True</code> <code>window_size</code> <code>int</code> <p>Size of rolling window for recent metrics</p> <code>1000</code> <code>retention_minutes</code> <code>int</code> <p>How long to retain detailed metrics</p> <code>60</code> Functions\u00b6 <code></code> record_request \u00b6 <pre><code>record_request(\n    provider,\n    operation,\n    duration,\n    success,\n    retry_count=0,\n    rate_limited=False,\n    error=None,\n)\n</code></pre> <p>Record a request performance metric.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>operation</code> <code>str</code> <p>Operation type (chat, completion, etc.)</p> required <code>duration</code> <code>float</code> <p>Request duration in seconds</p> required <code>success</code> <code>bool</code> <p>Whether the request was successful</p> required <code>retry_count</code> <code>int</code> <p>Number of retries performed</p> <code>0</code> <code>rate_limited</code> <code>bool</code> <p>Whether rate limiting was encountered</p> <code>False</code> <code>error</code> <code>Optional[str]</code> <p>Error message if request failed</p> <code>None</code> <code></code> record_token_usage \u00b6 <pre><code>record_token_usage(\n    provider, prompt_tokens=0, completion_tokens=0, total_tokens=None, cost=0.0\n)\n</code></pre> <p>Record token usage metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>str</code> <p>Provider name</p> required <code>prompt_tokens</code> <code>int</code> <p>Number of prompt tokens</p> <code>0</code> <code>completion_tokens</code> <code>int</code> <p>Number of completion tokens</p> <code>0</code> <code>total_tokens</code> <code>Optional[int]</code> <p>Total tokens (if different from sum)</p> <code>None</code> <code>cost</code> <code>float</code> <p>Estimated cost for this usage</p> <code>0.0</code> <code></code> record_cache_metrics \u00b6 <pre><code>record_cache_metrics(\n    hits=0, misses=0, evictions=0, expired=0, current_size=0, max_size=0\n)\n</code></pre> <p>Record cache performance metrics.</p> <p>Parameters:</p> Name Type Description Default <code>hits</code> <code>int</code> <p>Number of cache hits</p> <code>0</code> <code>misses</code> <code>int</code> <p>Number of cache misses</p> <code>0</code> <code>evictions</code> <code>int</code> <p>Number of evictions</p> <code>0</code> <code>expired</code> <code>int</code> <p>Number of expired entries</p> <code>0</code> <code>current_size</code> <code>int</code> <p>Current cache size</p> <code>0</code> <code>max_size</code> <code>int</code> <p>Maximum cache size</p> <code>0</code> <code></code> get_overall_metrics \u00b6 <pre><code>get_overall_metrics()\n</code></pre> <p>Get overall performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing overall metrics</p> <code></code> get_provider_metrics \u00b6 <pre><code>get_provider_metrics(provider=None)\n</code></pre> <p>Get provider-specific metrics.</p> <p>Parameters:</p> Name Type Description Default <code>provider</code> <code>Optional[str]</code> <p>Specific provider name (returns all if None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing provider metrics</p> <code></code> get_operation_metrics \u00b6 <pre><code>get_operation_metrics()\n</code></pre> <p>Get operation-specific metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing operation metrics</p> <code></code> get_recent_requests \u00b6 <pre><code>get_recent_requests(limit=None)\n</code></pre> <p>Get recent request data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of requests to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent request data</p> <code></code> get_recent_errors \u00b6 <pre><code>get_recent_errors(limit=None)\n</code></pre> <p>Get recent error data.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>Optional[int]</code> <p>Maximum number of errors to return</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of recent error data</p> <code></code> get_hourly_trends \u00b6 <pre><code>get_hourly_trends(hours=24)\n</code></pre> <p>Get hourly trend data.</p> <p>Parameters:</p> Name Type Description Default <code>hours</code> <code>int</code> <p>Number of hours of data to return</p> <code>24</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of hourly statistics</p> <code></code> generate_report \u00b6 <pre><code>generate_report()\n</code></pre> <p>Generate a comprehensive metrics report.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing comprehensive metrics report</p> <code></code> reset_metrics \u00b6 <pre><code>reset_metrics()\n</code></pre> <p>Reset all collected metrics.</p> <code></code> close <code>async</code> \u00b6 <pre><code>close()\n</code></pre> <p>Close the metrics collector and cleanup resources.</p>"},{"location":"reference/middleware/","title":"deepsentinel.middleware","text":""},{"location":"reference/middleware/#deepsentinel.middleware","title":"middleware","text":"<p>Middleware components for request/response processing.</p>"},{"location":"reference/middleware/#deepsentinel.middleware-classes","title":"Classes","text":""},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware","title":"ComplianceMiddleware","text":"<pre><code>ComplianceMiddleware(config)\n</code></pre> <p>Compliance middleware for processing requests and responses.</p> <p>This class implements a pipeline of compliance checks and transformations that can be applied to LLM requests and responses to ensure they meet organizational policies and regulatory requirements.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policies</code> <p>List of compliance policies</p> <code>audit_enabled</code> <p>Whether audit logging is enabled</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware-functions","title":"Functions","text":""},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.process_request","title":"process_request  <code>async</code>","text":"<pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.process_response","title":"process_response  <code>async</code>","text":"<pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize middleware components.</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up middleware resources.</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.get_audit_entries","title":"get_audit_entries","text":"<pre><code>get_audit_entries()\n</code></pre> <p>Get all audit entries.</p> <p>Returns:</p> Type Description <code>List[AuditEntry]</code> <p>List of audit entries</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.clear_audit_entries","title":"clear_audit_entries","text":"<pre><code>clear_audit_entries()\n</code></pre> <p>Clear all stored audit entries.</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.submit_audit_entries","title":"submit_audit_entries  <code>async</code>","text":"<pre><code>submit_audit_entries()\n</code></pre> <p>Submit audit entries to the audit API if enabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise</p>"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.add_policy","title":"add_policy","text":"<pre><code>add_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add</p> required"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.remove_policy","title":"remove_policy","text":"<pre><code>remove_policy(policy_name)\n</code></pre> <p>Remove a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy to remove</p> required"},{"location":"reference/middleware/#deepsentinel.middleware.ComplianceMiddleware.get_policy","title":"get_policy","text":"<pre><code>get_policy(policy_name)\n</code></pre> <p>Get a compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/middleware/#deepsentinel.middleware-modules","title":"Modules","text":""},{"location":"reference/middleware/#deepsentinel.middleware.base","title":"base","text":"<p>Base middleware for compliance and processing pipeline.</p> <p>This module provides the foundation for compliance middleware that processes requests and responses through a configurable pipeline of checks and transformations.</p>"},{"location":"reference/middleware/#deepsentinel.middleware.base-classes","title":"Classes","text":""},{"location":"reference/middleware/#deepsentinel.middleware.base.ComplianceMiddleware","title":"ComplianceMiddleware","text":"<pre><code>ComplianceMiddleware(config)\n</code></pre> <p>Compliance middleware for processing requests and responses.</p> <p>This class implements a pipeline of compliance checks and transformations that can be applied to LLM requests and responses to ensure they meet organizational policies and regulatory requirements.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policies</code> <p>List of compliance policies</p> <code>audit_enabled</code> <p>Whether audit logging is enabled</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required Functions\u00b6 <code></code> process_request <code>async</code> \u00b6 <pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p> <code></code> process_response <code>async</code> \u00b6 <pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through the compliance pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p> <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize middleware components.</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up middleware resources.</p> <code></code> get_audit_entries \u00b6 <pre><code>get_audit_entries()\n</code></pre> <p>Get all audit entries.</p> <p>Returns:</p> Type Description <code>List[AuditEntry]</code> <p>List of audit entries</p> <code></code> clear_audit_entries \u00b6 <pre><code>clear_audit_entries()\n</code></pre> <p>Clear all stored audit entries.</p> <code></code> submit_audit_entries <code>async</code> \u00b6 <pre><code>submit_audit_entries()\n</code></pre> <p>Submit audit entries to the audit API if enabled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if successful, False otherwise</p> <code></code> add_policy \u00b6 <pre><code>add_policy(policy)\n</code></pre> <p>Add a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add</p> required <code></code> remove_policy \u00b6 <pre><code>remove_policy(policy_name)\n</code></pre> <p>Remove a compliance policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy to remove</p> required <code></code> get_policy \u00b6 <pre><code>get_policy(policy_name)\n</code></pre> <p>Get a compliance policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>policy_name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/types/","title":"deepsentinel.types","text":""},{"location":"reference/types/#deepsentinel.types","title":"types","text":"<p>DeepSentinel SDK data types and models.</p> <p>This module contains all Pydantic models used for request/response validation, configuration, and internal data structures throughout the DeepSentinel SDK.</p>"},{"location":"reference/types/#deepsentinel.types-classes","title":"Classes","text":""},{"location":"reference/types/#deepsentinel.types.MessageRole","title":"MessageRole","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of possible message roles in a conversation.</p>"},{"location":"reference/types/#deepsentinel.types.ComplianceAction","title":"ComplianceAction","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of possible compliance actions.</p>"},{"location":"reference/types/#deepsentinel.types.SeverityLevel","title":"SeverityLevel","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of severity levels for violations and alerts.</p>"},{"location":"reference/types/#deepsentinel.types.ProviderType","title":"ProviderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration of supported LLM providers.</p>"},{"location":"reference/types/#deepsentinel.types.Message","title":"Message","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single message in a conversation.</p> <p>Attributes:</p> Name Type Description <code>role</code> <code>MessageRole</code> <p>The role of the message sender</p> <code>content</code> <code>Optional[str]</code> <p>The message content</p> <code>name</code> <code>Optional[str]</code> <p>Optional name of the sender</p> <code>function_call</code> <code>Optional[Dict[str, Any]]</code> <p>Optional function call data</p> <code>tool_calls</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional list of tool calls</p> <code>tool_call_id</code> <code>Optional[str]</code> <p>Optional tool call identifier</p>"},{"location":"reference/types/#deepsentinel.types.Message-functions","title":"Functions","text":""},{"location":"reference/types/#deepsentinel.types.Message.validate_content","title":"validate_content","text":"<pre><code>validate_content(v, values)\n</code></pre> <p>Validate that content is provided for most message types.</p>"},{"location":"reference/types/#deepsentinel.types.ChatRequest","title":"ChatRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>messages</code> <code>List[Message]</code> <p>List of conversation messages</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>functions</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional function definitions</p> <code>function_call</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional function call preference</p> <code>tools</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Optional tool definitions</p> <code>tool_choice</code> <code>Optional[Union[str, Dict[str, Any]]]</code> <p>Optional tool choice preference</p>"},{"location":"reference/types/#deepsentinel.types.Usage","title":"Usage","text":"<p>               Bases: <code>BaseModel</code></p> <p>Token usage information.</p> <p>Attributes:</p> Name Type Description <code>prompt_tokens</code> <code>int</code> <p>Tokens used in the prompt</p> <code>completion_tokens</code> <code>int</code> <p>Tokens used in the completion</p> <code>total_tokens</code> <code>int</code> <p>Total tokens used</p>"},{"location":"reference/types/#deepsentinel.types.Choice","title":"Choice","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single completion choice.</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>int</code> <p>Choice index</p> <code>message</code> <code>Message</code> <p>The response message</p> <code>finish_reason</code> <code>Optional[str]</code> <p>Reason the completion finished</p> <code>logprobs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional log probabilities</p>"},{"location":"reference/types/#deepsentinel.types.ChatResponse","title":"ChatResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for chat completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[Choice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/types/#deepsentinel.types.CompletionRequest","title":"CompletionRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for text completions.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>str</code> <p>Model identifier</p> <code>prompt</code> <code>Union[str, List[str]]</code> <p>Text prompt</p> <code>max_tokens</code> <code>Optional[int]</code> <p>Maximum tokens to generate</p> <code>temperature</code> <code>Optional[float]</code> <p>Sampling temperature</p> <code>top_p</code> <code>Optional[float]</code> <p>Nucleus sampling parameter</p> <code>n</code> <code>Optional[int]</code> <p>Number of completions to generate</p> <code>stream</code> <code>bool</code> <p>Whether to stream the response</p> <code>logprobs</code> <code>Optional[int]</code> <p>Number of log probabilities to return</p> <code>echo</code> <code>bool</code> <p>Whether to echo the prompt</p> <code>stop</code> <code>Optional[Union[str, List[str]]]</code> <p>Stop sequences</p> <code>presence_penalty</code> <code>Optional[float]</code> <p>Presence penalty parameter</p> <code>frequency_penalty</code> <code>Optional[float]</code> <p>Frequency penalty parameter</p> <code>best_of</code> <code>Optional[int]</code> <p>Number of completions to generate server-side</p> <code>logit_bias</code> <code>Optional[Dict[str, float]]</code> <p>Logit bias adjustments</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p> <code>suffix</code> <code>Optional[str]</code> <p>Optional suffix for completion</p>"},{"location":"reference/types/#deepsentinel.types.CompletionChoice","title":"CompletionChoice","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single completion choice.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Generated text</p> <code>index</code> <code>int</code> <p>Choice index</p> <code>logprobs</code> <code>Optional[Dict[str, Any]]</code> <p>Optional log probabilities</p> <code>finish_reason</code> <code>Optional[str]</code> <p>Reason the completion finished</p>"},{"location":"reference/types/#deepsentinel.types.CompletionResponse","title":"CompletionResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for text completions.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Response identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[CompletionChoice]</code> <p>List of completion choices</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p> <code>system_fingerprint</code> <code>Optional[str]</code> <p>Optional system fingerprint</p>"},{"location":"reference/types/#deepsentinel.types.EmbeddingRequest","title":"EmbeddingRequest","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>Union[str, List[str]]</code> <p>Text to embed</p> <code>model</code> <code>str</code> <p>Model identifier</p> <code>encoding_format</code> <code>Optional[str]</code> <p>Encoding format for embeddings</p> <code>dimensions</code> <code>Optional[int]</code> <p>Number of dimensions for embeddings</p> <code>user</code> <code>Optional[str]</code> <p>Optional user identifier</p>"},{"location":"reference/types/#deepsentinel.types.Embedding","title":"Embedding","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a single embedding.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>str</code> <p>Object type</p> <code>embedding</code> <code>List[float]</code> <p>The embedding vector</p> <code>index</code> <code>int</code> <p>Embedding index</p>"},{"location":"reference/types/#deepsentinel.types.EmbeddingResponse","title":"EmbeddingResponse","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for embeddings.</p> <p>Attributes:</p> Name Type Description <code>object</code> <code>str</code> <p>Object type</p> <code>data</code> <code>List[Embedding]</code> <p>List of embeddings</p> <code>model</code> <code>str</code> <p>Model used</p> <code>usage</code> <code>Optional[Usage]</code> <p>Token usage information</p>"},{"location":"reference/types/#deepsentinel.types.ComplianceCheck","title":"ComplianceCheck","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a compliance check result.</p> <p>Attributes:</p> Name Type Description <code>policy_name</code> <code>str</code> <p>Name of the policy that was checked</p> <code>passed</code> <code>bool</code> <p>Whether the check passed</p> <code>action</code> <code>ComplianceAction</code> <p>Action to take if check failed</p> <code>severity</code> <code>SeverityLevel</code> <p>Severity level of any violation</p> <code>message</code> <code>str</code> <p>Human-readable message about the check</p> <code>details</code> <code>Dict[str, Any]</code> <p>Additional details about the check</p> <code>timestamp</code> <code>datetime</code> <p>When the check was performed</p>"},{"location":"reference/types/#deepsentinel.types.AuditEntry","title":"AuditEntry","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an audit log entry.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique identifier for the entry</p> <code>timestamp</code> <code>datetime</code> <p>When the event occurred</p> <code>user_id</code> <code>Optional[str]</code> <p>Identifier of the user</p> <code>session_id</code> <code>Optional[str]</code> <p>Session identifier</p> <code>operation</code> <code>str</code> <p>The operation that was performed</p> <code>provider</code> <code>str</code> <p>The LLM provider used</p> <code>model</code> <code>str</code> <p>The model used</p> <code>request_data</code> <code>Dict[str, Any]</code> <p>Summary of the request</p> <code>response_data</code> <code>Dict[str, Any]</code> <p>Summary of the response</p> <code>compliance_checks</code> <code>List[ComplianceCheck]</code> <p>List of compliance checks performed</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional metadata</p> <code>cost</code> <code>Optional[float]</code> <p>Optional cost information</p> <code>duration_ms</code> <code>Optional[int]</code> <p>Duration of the operation in milliseconds</p>"},{"location":"reference/types/#deepsentinel.types.ProviderConfig","title":"ProviderConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a specific provider.</p> <p>Attributes:</p> Name Type Description <code>provider_type</code> <code>ProviderType</code> <p>Type of the provider</p> <code>api_key</code> <code>Optional[str]</code> <p>API key for authentication</p> <code>base_url</code> <code>Optional[str]</code> <p>Base URL for the provider's API</p> <code>timeout</code> <code>int</code> <p>Request timeout in seconds</p> <code>max_retries</code> <code>int</code> <p>Maximum number of retries</p> <code>retry_delay</code> <code>float</code> <p>Delay between retries in seconds</p> <code>rate_limit</code> <code>Optional[Dict[str, Any]]</code> <p>Rate limit configuration</p> <code>headers</code> <code>Dict[str, str]</code> <p>Additional headers to send</p> <code>extra_config</code> <code>Dict[str, Any]</code> <p>Provider-specific configuration</p>"},{"location":"reference/types/#deepsentinel.types.StreamChunk","title":"StreamChunk","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents a chunk of streamed response data.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Chunk identifier</p> <code>object</code> <code>str</code> <p>Object type</p> <code>created</code> <code>int</code> <p>Creation timestamp</p> <code>model</code> <code>str</code> <p>Model used</p> <code>choices</code> <code>List[Dict[str, Any]]</code> <p>List of choice deltas</p> <code>usage</code> <code>Optional[Usage]</code> <p>Optional usage information (usually only in final chunk)</p>"},{"location":"reference/types/#deepsentinel.types.MCPToolCall","title":"MCPToolCall","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents an MCP tool call.</p> <p>Attributes:</p> Name Type Description <code>server_name</code> <code>str</code> <p>Name of the MCP server</p> <code>tool_name</code> <code>str</code> <p>Name of the tool to call</p> <code>arguments</code> <code>Dict[str, Any]</code> <p>Arguments to pass to the tool</p> <code>call_id</code> <code>str</code> <p>Unique identifier for the call</p>"},{"location":"reference/types/#deepsentinel.types.MCPToolResult","title":"MCPToolResult","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represents the result of an MCP tool call.</p> <p>Attributes:</p> Name Type Description <code>call_id</code> <code>str</code> <p>Identifier of the original call</p> <code>success</code> <code>bool</code> <p>Whether the call was successful</p> <code>result</code> <code>Optional[Any]</code> <p>The result data</p> <code>error</code> <code>Optional[str]</code> <p>Error information if the call failed</p> <code>metadata</code> <code>Dict[str, Any]</code> <p>Additional metadata</p>"},{"location":"reference/compliance/","title":"deepsentinel.compliance","text":""},{"location":"reference/compliance/#deepsentinel.compliance","title":"compliance","text":"<p>Compliance checking and policy enforcement components.</p>"},{"location":"reference/compliance/#deepsentinel.compliance-modules","title":"Modules","text":""},{"location":"reference/compliance/#deepsentinel.compliance.detection","title":"detection","text":"<p>Local detection system for sensitive data patterns.</p>"},{"location":"reference/compliance/#deepsentinel.compliance.detection-modules","title":"Modules","text":""},{"location":"reference/compliance/#deepsentinel.compliance.detection.engine","title":"engine","text":"<p>Main detection engine for sensitive data pattern matching.</p> <p>This module provides the core detection engine that coordinates multiple detection modules to identify sensitive data patterns in text content.</p> Classes\u00b6 DetectionEngine \u00b6 <pre><code>DetectionEngine(config)\n</code></pre> <p>Main detection engine for sensitive data identification.</p> <p>This class coordinates multiple detection modules to identify various types of sensitive data patterns in text content.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>engines</code> <code>Dict[str, Any]</code> <p>Dictionary of detection engines by name</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze_text <code>async</code> \u00b6 <pre><code>analyze_text(text_content, context=None)\n</code></pre> <p>Analyze text content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text_content</code> <code>List[str]</code> <p>List of text strings to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results from all engines</p> <code></code> analyze_single_text <code>async</code> \u00b6 <pre><code>analyze_single_text(text, engine_names=None, context=None)\n</code></pre> <p>Analyze a single text string with specified engines.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text string to analyze</p> required <code>engine_names</code> <code>Optional[List[str]]</code> <p>Optional list of engine names to use</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results</p> <code></code> get_engine \u00b6 <pre><code>get_engine(engine_name)\n</code></pre> <p>Get a specific detection engine by name.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Detection engine instance or None if not found</p> <code></code> list_engines \u00b6 <pre><code>list_engines()\n</code></pre> <p>Get list of available detection engine names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of detection engine names</p> <code></code> get_engine_info \u00b6 <pre><code>get_engine_info(engine_name)\n</code></pre> <p>Get information about a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dictionary containing engine information</p> <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get detection engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on all detection engines.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> reload_engines <code>async</code> \u00b6 <pre><code>reload_engines()\n</code></pre> <p>Reload all detection engines with updated configuration.</p> <code></code> enable_engine \u00b6 <pre><code>enable_engine(engine_name)\n</code></pre> <p>Enable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to enable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was enabled, False if not found</p> <code></code> disable_engine \u00b6 <pre><code>disable_engine(engine_name)\n</code></pre> <p>Disable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to disable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was disabled, False if not found</p>"},{"location":"reference/compliance/#deepsentinel.compliance.detection.patterns","title":"patterns","text":"<p>Pattern matching utilities for sensitive data detection.</p> <p>This module provides base pattern matching functionality that can be used by various detection engines to identify sensitive data patterns.</p> Classes\u00b6 PatternMatch \u00b6 <pre><code>PatternMatch(\n    text, start, end, pattern_name, pattern_type, confidence=1.0, metadata=None\n)\n</code></pre> <p>Represents a pattern match result.</p> <p>Attributes:</p> Name Type Description <code>text</code> <p>The matched text</p> <code>start</code> <p>Start position in the original text</p> <code>end</code> <p>End position in the original text</p> <code>pattern_name</code> <p>Name of the pattern that matched</p> <code>pattern_type</code> <p>Type/category of the pattern</p> <code>confidence</code> <p>Confidence score (0.0 to 1.0)</p> <code>metadata</code> <p>Additional metadata about the match</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The matched text</p> required <code>start</code> <code>int</code> <p>Start position in the original text</p> required <code>end</code> <code>int</code> <p>End position in the original text</p> required <code>pattern_name</code> <code>str</code> <p>Name of the pattern that matched</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>1.0</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata about the match</p> <code>None</code> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert match to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the match</p> <code></code> PatternMatcher \u00b6 <pre><code>PatternMatcher(config)\n</code></pre> <p>Base pattern matcher for sensitive data detection.</p> <p>This class provides pattern matching functionality using regex and other techniques to identify sensitive data patterns in text.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>patterns</code> <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary of compiled regex patterns</p> <code>enabled</code> <p>Whether the pattern matcher is enabled</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for pattern matches with performance tracking.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> analyze_batch <code>async</code> \u00b6 <pre><code>analyze_batch(texts, context=None)\n</code></pre> <p>Analyze multiple texts in batch for better performance.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>List[str]</code> <p>List of texts to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of analysis results for each text</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> add_pattern \u00b6 <pre><code>add_pattern(name, pattern, pattern_type, confidence=0.8, flags=0)\n</code></pre> <p>Add a new pattern to the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <code>pattern</code> <code>str</code> <p>Regular expression pattern</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>0.8</code> <code>flags</code> <code>int</code> <p>Regex flags</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was added successfully, False otherwise</p> <code></code> remove_pattern \u00b6 <pre><code>remove_pattern(name)\n</code></pre> <p>Remove a pattern from the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was removed, False if not found</p> <code></code> get_pattern_info \u00b6 <pre><code>get_pattern_info(name)\n</code></pre> <p>Get information about a specific pattern.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Pattern information dictionary or None if not found</p> <code></code> list_patterns \u00b6 <pre><code>list_patterns()\n</code></pre> <p>Get list of available pattern names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of pattern names</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the pattern matcher including performance.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing matcher information and performance stats</p> <code></code> get_performance_stats \u00b6 <pre><code>get_performance_stats()\n</code></pre> <p>Get detailed performance statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the pattern matcher.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the pattern matcher.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the pattern matcher.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/#deepsentinel.compliance.detection.pci","title":"pci","text":"<p>PCI (Payment Card Industry) detection module.</p> <p>This module provides specialized detection for PCI DSS sensitive data types including credit card numbers, bank account numbers, CVV codes, and other payment-related information.</p> Classes\u00b6 PCIDetector \u00b6 <pre><code>PCIDetector(config)\n</code></pre> <p>Specialized detector for PCI DSS sensitive data patterns.</p> <p>This detector focuses on identifying payment card industry data including credit card numbers, bank accounts, CVV codes, and other financial information requiring PCI DSS compliance.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>strict_validation</code> <p>Whether to use strict validation</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PCI-sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> set_strict_validation \u00b6 <pre><code>set_strict_validation(strict)\n</code></pre> <p>Set strict validation mode.</p> <p>Parameters:</p> Name Type Description Default <code>strict</code> <code>bool</code> <p>Whether to use strict validation</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PCI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PCI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/#deepsentinel.compliance.detection.phi","title":"phi","text":"<p>PHI (Protected Health Information) detection module.</p> <p>This module provides specialized detection for PHI data types including medical record numbers, diagnosis codes, medication names, and other health-related information as defined by HIPAA regulations.</p> Classes\u00b6 PHIDetector \u00b6 <pre><code>PHIDetector(config)\n</code></pre> <p>Specialized detector for PHI data patterns.</p> <p>This detector focuses on identifying protected health information including medical records, diagnosis codes, medications, and other healthcare-related sensitive data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>medical_terms</code> <p>Set of medical terminology for context analysis</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PHI patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PHI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PHI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/#deepsentinel.compliance.detection.pii","title":"pii","text":"<p>PII (Personally Identifiable Information) detection module.</p> <p>This module provides specialized detection for PII data types including emails, phone numbers, social security numbers, and other personal identifiers.</p> Classes\u00b6 PIIDetector \u00b6 <pre><code>PIIDetector(config)\n</code></pre> <p>Specialized detector for PII data patterns.</p> <p>This detector focuses on identifying personally identifiable information such as emails, phone numbers, SSNs, addresses, and other personal data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>sensitivity_level</code> <p>Detection sensitivity (low, medium, high)</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PII patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> set_sensitivity_level \u00b6 <pre><code>set_sensitivity_level(level)\n</code></pre> <p>Set the detection sensitivity level.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Sensitivity level (\"low\", \"medium\", \"high\")</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PII detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PII detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/#deepsentinel.compliance.engine","title":"engine","text":"<p>Main compliance processing engine for DeepSentinel SDK.</p> <p>This module contains the core compliance processing engine that orchestrates policy evaluation, detection, and enforcement across all compliance checks.</p>"},{"location":"reference/compliance/#deepsentinel.compliance.engine-classes","title":"Classes","text":""},{"location":"reference/compliance/#deepsentinel.compliance.engine.ComplianceEngine","title":"ComplianceEngine","text":"<pre><code>ComplianceEngine(config)\n</code></pre> <p>Main compliance processing engine.</p> <p>This class orchestrates all compliance checking operations including policy evaluation, detection engines, and enforcement actions.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policy_manager</code> <p>Policy manager instance</p> <code>detection_engine</code> <p>Detection engine instance</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required Functions\u00b6 <code></code> process_request <code>async</code> \u00b6 <pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p> <code></code> process_response <code>async</code> \u00b6 <pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p> <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get compliance engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on compliance engine components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> reload_policies <code>async</code> \u00b6 <pre><code>reload_policies()\n</code></pre> <p>Reload compliance policies from configuration.</p>"},{"location":"reference/compliance/#deepsentinel.compliance.interceptor","title":"interceptor","text":"<p>Request/response interceptor for compliance checking.</p> <p>This module provides interceptor functionality that can be integrated into HTTP clients and middleware to automatically apply compliance checks to all requests and responses.</p>"},{"location":"reference/compliance/#deepsentinel.compliance.interceptor-classes","title":"Classes","text":""},{"location":"reference/compliance/#deepsentinel.compliance.interceptor.ComplianceInterceptor","title":"ComplianceInterceptor","text":"<pre><code>ComplianceInterceptor(engine, enabled=True, bypass_rules=None)\n</code></pre> <p>Interceptor for automatic compliance checking.</p> <p>This class provides interceptor functionality that can be integrated into HTTP clients, middleware, or other components to automatically apply compliance checks to requests and responses.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>Compliance engine instance</p> <code>logger</code> <p>Structured logger</p> <code>enabled</code> <p>Whether the interceptor is enabled</p> <code>bypass_rules</code> <p>Rules for bypassing compliance checks</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>ComplianceEngine</code> <p>Compliance engine to use for checks</p> required <code>enabled</code> <code>bool</code> <p>Whether the interceptor is enabled</p> <code>True</code> <code>bypass_rules</code> <code>Optional[Dict[str, Any]]</code> <p>Optional rules for bypassing compliance checks</p> <code>None</code> Functions\u00b6 <code></code> intercept_request <code>async</code> \u00b6 <pre><code>intercept_request(request, context=None)\n</code></pre> <p>Intercept and process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to intercept and check</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates compliance policies</p> <code></code> intercept_response <code>async</code> \u00b6 <pre><code>intercept_response(response, request, context=None)\n</code></pre> <p>Intercept and process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to intercept and check</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates compliance policies</p> <code></code> create_middleware \u00b6 <pre><code>create_middleware()\n</code></pre> <p>Create middleware function that wraps API calls with compliance.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]], Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]]</code> <p>Middleware function that can wrap API calls</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the interceptor.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the interceptor.</p> <code></code> update_bypass_rules \u00b6 <pre><code>update_bypass_rules(bypass_rules)\n</code></pre> <p>Update bypass rules.</p> <p>Parameters:</p> Name Type Description Default <code>bypass_rules</code> <code>Dict[str, Any]</code> <p>New bypass rules configuration</p> required <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get interceptor performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> reset_metrics \u00b6 <pre><code>reset_metrics()\n</code></pre> <p>Reset performance metrics counters.</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on interceptor.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/#deepsentinel.compliance.policies","title":"policies","text":"<p>Policy management and enforcement for compliance checking.</p> <p>This module provides policy management capabilities including policy loading, evaluation, and enforcement for various compliance requirements.</p>"},{"location":"reference/compliance/#deepsentinel.compliance.policies-classes","title":"Classes","text":""},{"location":"reference/compliance/#deepsentinel.compliance.policies.PolicyManager","title":"PolicyManager","text":"<pre><code>PolicyManager(policies)\n</code></pre> <p>Manager for compliance policies and their evaluation.</p> <p>This class handles policy loading, caching, and evaluation against requests and responses to determine compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policies</code> <code>Dict[str, CompliancePolicy]</code> <p>Dictionary of loaded compliance policies</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies to manage</p> required Functions\u00b6 <code></code> evaluate_request <code>async</code> \u00b6 <pre><code>evaluate_request(request, detection_results, context=None)\n</code></pre> <p>Evaluate request against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to evaluate</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p> <code></code> evaluate_response <code>async</code> \u00b6 <pre><code>evaluate_response(response, request, detection_results, context=None)\n</code></pre> <p>Evaluate response against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to evaluate</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p> <code></code> get_active_policies \u00b6 <pre><code>get_active_policies()\n</code></pre> <p>Get list of active policies.</p> <p>Returns:</p> Type Description <code>List[CompliancePolicy]</code> <p>List of enabled compliance policies</p> <code></code> get_policy \u00b6 <pre><code>get_policy(name)\n</code></pre> <p>Get policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p> <code></code> add_policy \u00b6 <pre><code>add_policy(policy)\n</code></pre> <p>Add or update a policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add or update</p> required <code></code> remove_policy \u00b6 <pre><code>remove_policy(name)\n</code></pre> <p>Remove a policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if policy was removed, False if not found</p> <code></code> reload_policies <code>async</code> \u00b6 <pre><code>reload_policies(policies)\n</code></pre> <p>Reload policies from new configuration.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>New list of policies to load</p> required <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on policy manager.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/detection/","title":"deepsentinel.compliance.detection","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection","title":"detection","text":"<p>Local detection system for sensitive data patterns.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection-modules","title":"Modules","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.engine","title":"engine","text":"<p>Main detection engine for sensitive data pattern matching.</p> <p>This module provides the core detection engine that coordinates multiple detection modules to identify sensitive data patterns in text content.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.engine-classes","title":"Classes","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.engine.DetectionEngine","title":"DetectionEngine","text":"<pre><code>DetectionEngine(config)\n</code></pre> <p>Main detection engine for sensitive data identification.</p> <p>This class coordinates multiple detection modules to identify various types of sensitive data patterns in text content.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>engines</code> <code>Dict[str, Any]</code> <p>Dictionary of detection engines by name</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze_text <code>async</code> \u00b6 <pre><code>analyze_text(text_content, context=None)\n</code></pre> <p>Analyze text content for sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text_content</code> <code>List[str]</code> <p>List of text strings to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results from all engines</p> <code></code> analyze_single_text <code>async</code> \u00b6 <pre><code>analyze_single_text(text, engine_names=None, context=None)\n</code></pre> <p>Analyze a single text string with specified engines.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text string to analyze</p> required <code>engine_names</code> <code>Optional[List[str]]</code> <p>Optional list of engine names to use</p> <code>None</code> <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detection results</p> <code></code> get_engine \u00b6 <pre><code>get_engine(engine_name)\n</code></pre> <p>Get a specific detection engine by name.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Any]</code> <p>Detection engine instance or None if not found</p> <code></code> list_engines \u00b6 <pre><code>list_engines()\n</code></pre> <p>Get list of available detection engine names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of detection engine names</p> <code></code> get_engine_info \u00b6 <pre><code>get_engine_info(engine_name)\n</code></pre> <p>Get information about a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the detection engine</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dictionary containing engine information</p> <code></code> get_metrics \u00b6 <pre><code>get_metrics()\n</code></pre> <p>Get detection engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on all detection engines.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p> <code></code> reload_engines <code>async</code> \u00b6 <pre><code>reload_engines()\n</code></pre> <p>Reload all detection engines with updated configuration.</p> <code></code> enable_engine \u00b6 <pre><code>enable_engine(engine_name)\n</code></pre> <p>Enable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to enable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was enabled, False if not found</p> <code></code> disable_engine \u00b6 <pre><code>disable_engine(engine_name)\n</code></pre> <p>Disable a specific detection engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine_name</code> <code>str</code> <p>Name of the engine to disable</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if engine was disabled, False if not found</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.patterns","title":"patterns","text":"<p>Pattern matching utilities for sensitive data detection.</p> <p>This module provides base pattern matching functionality that can be used by various detection engines to identify sensitive data patterns.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.patterns-classes","title":"Classes","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.patterns.PatternMatch","title":"PatternMatch","text":"<pre><code>PatternMatch(\n    text, start, end, pattern_name, pattern_type, confidence=1.0, metadata=None\n)\n</code></pre> <p>Represents a pattern match result.</p> <p>Attributes:</p> Name Type Description <code>text</code> <p>The matched text</p> <code>start</code> <p>Start position in the original text</p> <code>end</code> <p>End position in the original text</p> <code>pattern_name</code> <p>Name of the pattern that matched</p> <code>pattern_type</code> <p>Type/category of the pattern</p> <code>confidence</code> <p>Confidence score (0.0 to 1.0)</p> <code>metadata</code> <p>Additional metadata about the match</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The matched text</p> required <code>start</code> <code>int</code> <p>Start position in the original text</p> required <code>end</code> <code>int</code> <p>End position in the original text</p> required <code>pattern_name</code> <code>str</code> <p>Name of the pattern that matched</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>1.0</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata about the match</p> <code>None</code> Functions\u00b6 <code></code> to_dict \u00b6 <pre><code>to_dict()\n</code></pre> <p>Convert match to dictionary.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary representation of the match</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.patterns.PatternMatcher","title":"PatternMatcher","text":"<pre><code>PatternMatcher(config)\n</code></pre> <p>Base pattern matcher for sensitive data detection.</p> <p>This class provides pattern matching functionality using regex and other techniques to identify sensitive data patterns in text.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>patterns</code> <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary of compiled regex patterns</p> <code>enabled</code> <p>Whether the pattern matcher is enabled</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for pattern matches with performance tracking.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> analyze_batch <code>async</code> \u00b6 <pre><code>analyze_batch(texts, context=None)\n</code></pre> <p>Analyze multiple texts in batch for better performance.</p> <p>Parameters:</p> Name Type Description Default <code>texts</code> <code>List[str]</code> <p>List of texts to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of analysis results for each text</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing match results</p> <code></code> add_pattern \u00b6 <pre><code>add_pattern(name, pattern, pattern_type, confidence=0.8, flags=0)\n</code></pre> <p>Add a new pattern to the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <code>pattern</code> <code>str</code> <p>Regular expression pattern</p> required <code>pattern_type</code> <code>str</code> <p>Type/category of the pattern</p> required <code>confidence</code> <code>float</code> <p>Confidence score (0.0 to 1.0)</p> <code>0.8</code> <code>flags</code> <code>int</code> <p>Regex flags</p> <code>0</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was added successfully, False otherwise</p> <code></code> remove_pattern \u00b6 <pre><code>remove_pattern(name)\n</code></pre> <p>Remove a pattern from the matcher.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if pattern was removed, False if not found</p> <code></code> get_pattern_info \u00b6 <pre><code>get_pattern_info(name)\n</code></pre> <p>Get information about a specific pattern.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the pattern</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Pattern information dictionary or None if not found</p> <code></code> list_patterns \u00b6 <pre><code>list_patterns()\n</code></pre> <p>Get list of available pattern names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of pattern names</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the pattern matcher including performance.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing matcher information and performance stats</p> <code></code> get_performance_stats \u00b6 <pre><code>get_performance_stats()\n</code></pre> <p>Get detailed performance statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the pattern matcher.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the pattern matcher.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the pattern matcher.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pci","title":"pci","text":"<p>PCI (Payment Card Industry) detection module.</p> <p>This module provides specialized detection for PCI DSS sensitive data types including credit card numbers, bank account numbers, CVV codes, and other payment-related information.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pci-classes","title":"Classes","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pci.PCIDetector","title":"PCIDetector","text":"<pre><code>PCIDetector(config)\n</code></pre> <p>Specialized detector for PCI DSS sensitive data patterns.</p> <p>This detector focuses on identifying payment card industry data including credit card numbers, bank accounts, CVV codes, and other financial information requiring PCI DSS compliance.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>strict_validation</code> <p>Whether to use strict validation</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PCI-sensitive data patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PCI detection results</p> <code></code> set_strict_validation \u00b6 <pre><code>set_strict_validation(strict)\n</code></pre> <p>Set strict validation mode.</p> <p>Parameters:</p> Name Type Description Default <code>strict</code> <code>bool</code> <p>Whether to use strict validation</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PCI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PCI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PCI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.phi","title":"phi","text":"<p>PHI (Protected Health Information) detection module.</p> <p>This module provides specialized detection for PHI data types including medical record numbers, diagnosis codes, medication names, and other health-related information as defined by HIPAA regulations.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.phi-classes","title":"Classes","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.phi.PHIDetector","title":"PHIDetector","text":"<pre><code>PHIDetector(config)\n</code></pre> <p>Specialized detector for PHI data patterns.</p> <p>This detector focuses on identifying protected health information including medical records, diagnosis codes, medications, and other healthcare-related sensitive data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>medical_terms</code> <p>Set of medical terminology for context analysis</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PHI patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PHI detection results</p> <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PHI detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PHI detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PHI detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pii","title":"pii","text":"<p>PII (Personally Identifiable Information) detection module.</p> <p>This module provides specialized detection for PII data types including emails, phone numbers, social security numbers, and other personal identifiers.</p>"},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pii-classes","title":"Classes","text":""},{"location":"reference/compliance/detection/#deepsentinel.compliance.detection.pii.PIIDetector","title":"PIIDetector","text":"<pre><code>PIIDetector(config)\n</code></pre> <p>Specialized detector for PII data patterns.</p> <p>This detector focuses on identifying personally identifiable information such as emails, phone numbers, SSNs, addresses, and other personal data.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>pattern_matcher</code> <p>Base pattern matcher</p> <code>enabled</code> <p>Whether the detector is enabled</p> <code>sensitivity_level</code> <p>Detection sensitivity (low, medium, high)</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required Functions\u00b6 <code></code> analyze \u00b6 <pre><code>analyze(text, context=None)\n</code></pre> <p>Analyze text for PII patterns.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> analyze_async <code>async</code> \u00b6 <pre><code>analyze_async(text, context=None)\n</code></pre> <p>Async wrapper for analyze method.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to analyze</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing PII detection results</p> <code></code> set_sensitivity_level \u00b6 <pre><code>set_sensitivity_level(level)\n</code></pre> <p>Set the detection sensitivity level.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>str</code> <p>Sensitivity level (\"low\", \"medium\", \"high\")</p> required <code></code> get_info \u00b6 <pre><code>get_info()\n</code></pre> <p>Get information about the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detector information</p> <code></code> enable \u00b6 <pre><code>enable()\n</code></pre> <p>Enable the PII detector.</p> <code></code> disable \u00b6 <pre><code>disable()\n</code></pre> <p>Disable the PII detector.</p> <code></code> health_check \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform health check on the PII detector.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/engine/","title":"deepsentinel.compliance.engine","text":""},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine","title":"engine","text":"<p>Main compliance processing engine for DeepSentinel SDK.</p> <p>This module contains the core compliance processing engine that orchestrates policy evaluation, detection, and enforcement across all compliance checks.</p>"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine-classes","title":"Classes","text":""},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine","title":"ComplianceEngine","text":"<pre><code>ComplianceEngine(config)\n</code></pre> <p>Main compliance processing engine.</p> <p>This class orchestrates all compliance checking operations including policy evaluation, detection engines, and enforcement actions.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Sentinel configuration</p> <code>policy_manager</code> <p>Policy manager instance</p> <code>detection_engine</code> <p>Detection engine instance</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing policies and settings</p> required"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine-functions","title":"Functions","text":""},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine.process_request","title":"process_request  <code>async</code>","text":"<pre><code>process_request(request, context=None)\n</code></pre> <p>Process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The request to process</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates policies</p>"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine.process_response","title":"process_response  <code>async</code>","text":"<pre><code>process_response(response, request, context=None)\n</code></pre> <p>Process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>The response to process</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>The original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates policies</p>"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics()\n</code></pre> <p>Get compliance engine performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on compliance engine components.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/engine/#deepsentinel.compliance.engine.ComplianceEngine.reload_policies","title":"reload_policies  <code>async</code>","text":"<pre><code>reload_policies()\n</code></pre> <p>Reload compliance policies from configuration.</p>"},{"location":"reference/compliance/interceptor/","title":"deepsentinel.compliance.interceptor","text":""},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor","title":"interceptor","text":"<p>Request/response interceptor for compliance checking.</p> <p>This module provides interceptor functionality that can be integrated into HTTP clients and middleware to automatically apply compliance checks to all requests and responses.</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor-classes","title":"Classes","text":""},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor","title":"ComplianceInterceptor","text":"<pre><code>ComplianceInterceptor(engine, enabled=True, bypass_rules=None)\n</code></pre> <p>Interceptor for automatic compliance checking.</p> <p>This class provides interceptor functionality that can be integrated into HTTP clients, middleware, or other components to automatically apply compliance checks to requests and responses.</p> <p>Attributes:</p> Name Type Description <code>engine</code> <p>Compliance engine instance</p> <code>logger</code> <p>Structured logger</p> <code>enabled</code> <p>Whether the interceptor is enabled</p> <code>bypass_rules</code> <p>Rules for bypassing compliance checks</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>ComplianceEngine</code> <p>Compliance engine to use for checks</p> required <code>enabled</code> <code>bool</code> <p>Whether the interceptor is enabled</p> <code>True</code> <code>bypass_rules</code> <code>Optional[Dict[str, Any]]</code> <p>Optional rules for bypassing compliance checks</p> <code>None</code>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor-functions","title":"Functions","text":""},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.intercept_request","title":"intercept_request  <code>async</code>","text":"<pre><code>intercept_request(request, context=None)\n</code></pre> <p>Intercept and process a request through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to intercept and check</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Processed request (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If request violates compliance policies</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.intercept_response","title":"intercept_response  <code>async</code>","text":"<pre><code>intercept_response(response, request, context=None)\n</code></pre> <p>Intercept and process a response through compliance checks.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to intercept and check</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Processed response (may be modified)</p> <p>Raises:</p> Type Description <code>ComplianceViolationError</code> <p>If response violates compliance policies</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.create_middleware","title":"create_middleware","text":"<pre><code>create_middleware()\n</code></pre> <p>Create middleware function that wraps API calls with compliance.</p> <p>Returns:</p> Type Description <code>Callable[[Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]], Callable[[Union[ChatRequest, CompletionRequest, EmbeddingRequest], Dict[str, Any]], Union[ChatResponse, CompletionResponse, EmbeddingResponse]]]</code> <p>Middleware function that can wrap API calls</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.enable","title":"enable","text":"<pre><code>enable()\n</code></pre> <p>Enable the interceptor.</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.disable","title":"disable","text":"<pre><code>disable()\n</code></pre> <p>Disable the interceptor.</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.update_bypass_rules","title":"update_bypass_rules","text":"<pre><code>update_bypass_rules(bypass_rules)\n</code></pre> <p>Update bypass rules.</p> <p>Parameters:</p> Name Type Description Default <code>bypass_rules</code> <code>Dict[str, Any]</code> <p>New bypass rules configuration</p> required"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.get_metrics","title":"get_metrics","text":"<pre><code>get_metrics()\n</code></pre> <p>Get interceptor performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.reset_metrics","title":"reset_metrics","text":"<pre><code>reset_metrics()\n</code></pre> <p>Reset performance metrics counters.</p>"},{"location":"reference/compliance/interceptor/#deepsentinel.compliance.interceptor.ComplianceInterceptor.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on interceptor.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/compliance/policies/","title":"deepsentinel.compliance.policies","text":""},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies","title":"policies","text":"<p>Policy management and enforcement for compliance checking.</p> <p>This module provides policy management capabilities including policy loading, evaluation, and enforcement for various compliance requirements.</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies-classes","title":"Classes","text":""},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager","title":"PolicyManager","text":"<pre><code>PolicyManager(policies)\n</code></pre> <p>Manager for compliance policies and their evaluation.</p> <p>This class handles policy loading, caching, and evaluation against requests and responses to determine compliance violations.</p> <p>Attributes:</p> Name Type Description <code>policies</code> <code>Dict[str, CompliancePolicy]</code> <p>Dictionary of loaded compliance policies</p> <code>logger</code> <p>Structured logger</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>List of compliance policies to manage</p> required"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager-functions","title":"Functions","text":""},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.evaluate_request","title":"evaluate_request  <code>async</code>","text":"<pre><code>evaluate_request(request, detection_results, context=None)\n</code></pre> <p>Evaluate request against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Request to evaluate</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.evaluate_response","title":"evaluate_response  <code>async</code>","text":"<pre><code>evaluate_response(response, request, detection_results, context=None)\n</code></pre> <p>Evaluate response against all active policies.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Union[ChatResponse, CompletionResponse, EmbeddingResponse]</code> <p>Response to evaluate</p> required <code>request</code> <code>Union[ChatRequest, CompletionRequest, EmbeddingRequest]</code> <p>Original request</p> required <code>detection_results</code> <code>Dict[str, Any]</code> <p>Results from detection engines</p> required <code>context</code> <code>Optional[Dict[str, Any]]</code> <p>Optional context information</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ComplianceCheck]</code> <p>List of compliance check results</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.get_active_policies","title":"get_active_policies","text":"<pre><code>get_active_policies()\n</code></pre> <p>Get list of active policies.</p> <p>Returns:</p> Type Description <code>List[CompliancePolicy]</code> <p>List of enabled compliance policies</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.get_policy","title":"get_policy","text":"<pre><code>get_policy(name)\n</code></pre> <p>Get policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy</p> required <p>Returns:</p> Type Description <code>Optional[CompliancePolicy]</code> <p>Policy if found, None otherwise</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.add_policy","title":"add_policy","text":"<pre><code>add_policy(policy)\n</code></pre> <p>Add or update a policy.</p> <p>Parameters:</p> Name Type Description Default <code>policy</code> <code>CompliancePolicy</code> <p>Policy to add or update</p> required"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.remove_policy","title":"remove_policy","text":"<pre><code>remove_policy(name)\n</code></pre> <p>Remove a policy by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the policy to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if policy was removed, False if not found</p>"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.reload_policies","title":"reload_policies  <code>async</code>","text":"<pre><code>reload_policies(policies)\n</code></pre> <p>Reload policies from new configuration.</p> <p>Parameters:</p> Name Type Description Default <code>policies</code> <code>List[CompliancePolicy]</code> <p>New list of policies to load</p> required"},{"location":"reference/compliance/policies/#deepsentinel.compliance.policies.PolicyManager.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform health check on policy manager.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Health check results</p>"},{"location":"reference/providers/","title":"deepsentinel.providers","text":""},{"location":"reference/providers/#deepsentinel.providers","title":"providers","text":"<p>Provider adapters for different LLM services.</p>"},{"location":"reference/providers/#deepsentinel.providers-classes","title":"Classes","text":""},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider","title":"AnthropicProvider","text":"<pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p>"},{"location":"reference/providers/#deepsentinel.providers.AnthropicProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/providers/#deepsentinel.providers.BaseLLMProvider","title":"BaseLLMProvider","text":"<pre><code>BaseLLMProvider(config, name)\n</code></pre> <p>               Bases: <code>ProviderAdapter</code></p> <p>Base class for LLM providers with common functionality.</p> <p>This class provides common implementations and utilities that most LLM providers can use, reducing code duplication.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/#deepsentinel.providers.BaseLLMProvider-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.BaseLLMProvider.get_performance_metrics","title":"get_performance_metrics","text":"<pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for this provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter","title":"ProviderAdapter","text":"<pre><code>ProviderAdapter(config, name)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all LLM provider adapters.</p> <p>This class defines the interface that all provider implementations must follow, ensuring consistent behavior across different providers.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter-attributes","title":"Attributes","text":""},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.client","title":"client  <code>property</code>","text":"<pre><code>client\n</code></pre> <p>Get the underlying provider client.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The provider's client instance</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the provider is not initialized</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the provider is initialized.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.initialize","title":"initialize  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the provider client and connection.</p> <p>This method should set up the provider client, validate configuration, and establish any necessary connections.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.cleanup","title":"cleanup  <code>async</code>","text":"<pre><code>cleanup()\n</code></pre> <p>Clean up provider resources.</p> <p>This method should close connections, clean up resources, and prepare the provider for shutdown.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.health_check","title":"health_check  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a health check on the provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.chat_completion","title":"chat_completion  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.chat_completion_stream","title":"chat_completion_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.text_completion","title":"text_completion  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.text_completion_stream","title":"text_completion_stream  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.create_embeddings","title":"create_embeddings  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.list_models","title":"list_models  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.get_model","title":"get_model  <code>abstractmethod</code> <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.transcribe_audio","title":"transcribe_audio  <code>async</code>","text":"<pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.translate_audio","title":"translate_audio  <code>async</code>","text":"<pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.generate_image","title":"generate_image  <code>async</code>","text":"<pre><code>generate_image(prompt, model='dall-e-2', **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.validate_request","title":"validate_request","text":"<pre><code>validate_request(request)\n</code></pre> <p>Validate a request before processing.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>Request to validate</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the request is invalid</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderAdapter.handle_provider_error","title":"handle_provider_error","text":"<pre><code>handle_provider_error(error, operation)\n</code></pre> <p>Handle and wrap provider-specific errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original error from the provider</p> required <code>operation</code> <code>str</code> <p>The operation that failed</p> required <p>Raises:</p> Type Description <code>ProviderError</code> <p>Wrapped provider error</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider","title":"OpenAIProvider","text":"<pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.transcribe_audio","title":"transcribe_audio  <code>async</code>","text":"<pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.translate_audio","title":"translate_audio  <code>async</code>","text":"<pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.OpenAIProvider.generate_image","title":"generate_image  <code>async</code>","text":"<pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry","title":"ProviderRegistry","text":"<pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry-attributes","title":"Attributes","text":""},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.providers","title":"providers  <code>property</code>","text":"<pre><code>providers\n</code></pre> <p>Get all registered providers.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.provider_names","title":"provider_names  <code>property</code>","text":"<pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.default_provider","title":"default_provider  <code>property</code>","text":"<pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.register_provider_class","title":"register_provider_class","text":"<pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.register_model_mapping","title":"register_model_mapping","text":"<pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.register_model_mappings","title":"register_model_mappings","text":"<pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_provider_for_model","title":"get_provider_for_model","text":"<pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_models_for_provider","title":"get_models_for_provider","text":"<pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_provider_metadata","title":"get_provider_metadata","text":"<pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.set_failover_chain","title":"set_failover_chain","text":"<pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_failover_chain","title":"get_failover_chain","text":"<pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.create_provider","title":"create_provider","text":"<pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.register_provider","title":"register_provider  <code>async</code>","text":"<pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.unregister_provider","title":"unregister_provider","text":"<pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_provider","title":"get_provider","text":"<pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.get_provider_with_model_support","title":"get_provider_with_model_support","text":"<pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.has_provider","title":"has_provider","text":"<pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.set_default_provider","title":"set_default_provider","text":"<pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.initialize_all","title":"initialize_all  <code>async</code>","text":"<pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.cleanup_all","title":"cleanup_all  <code>async</code>","text":"<pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.health_check_all","title":"health_check_all  <code>async</code>","text":"<pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p>"},{"location":"reference/providers/#deepsentinel.providers.ProviderRegistry.from_config","title":"from_config  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p>"},{"location":"reference/providers/#deepsentinel.providers-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.create_registry_from_config","title":"create_registry_from_config  <code>async</code>","text":"<pre><code>create_registry_from_config(config, setup_failover=True)\n</code></pre> <p>Create and configure a provider registry from SentinelConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required <code>setup_failover</code> <code>bool</code> <p>Whether to set up default failover chains</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p>"},{"location":"reference/providers/#deepsentinel.providers.get_global_registry","title":"get_global_registry","text":"<pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p>"},{"location":"reference/providers/#deepsentinel.providers.initialize_default_providers","title":"initialize_default_providers  <code>async</code>","text":"<pre><code>initialize_default_providers()\n</code></pre> <p>Initialize default provider classes with model mappings.</p>"},{"location":"reference/providers/#deepsentinel.providers.set_global_registry","title":"set_global_registry","text":"<pre><code>set_global_registry(registry)\n</code></pre> <p>Set the global provider registry instance.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to set as global</p> required"},{"location":"reference/providers/#deepsentinel.providers.setup_default_failover_chains","title":"setup_default_failover_chains","text":"<pre><code>setup_default_failover_chains(registry)\n</code></pre> <p>Set up default failover chains for common scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to configure failover chains for</p> required"},{"location":"reference/providers/#deepsentinel.providers-modules","title":"Modules","text":""},{"location":"reference/providers/#deepsentinel.providers.anthropic","title":"anthropic","text":"<p>Anthropic provider adapter for DeepSentinel.</p> <p>This module implements the Anthropic provider adapter, supporting Claude models with comprehensive functionality including chat completions, streaming support, robust error handling, and middleware integration.</p>"},{"location":"reference/providers/#deepsentinel.providers.anthropic-classes","title":"Classes","text":""},{"location":"reference/providers/#deepsentinel.providers.anthropic.AnthropicProvider","title":"AnthropicProvider","text":"<pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/providers/#deepsentinel.providers.base","title":"base","text":"<p>Base provider adapter for LLM integrations.</p> <p>This module defines the abstract base class for all provider adapters, establishing a consistent interface for different LLM providers.</p>"},{"location":"reference/providers/#deepsentinel.providers.base-classes","title":"Classes","text":""},{"location":"reference/providers/#deepsentinel.providers.base.ProviderAdapter","title":"ProviderAdapter","text":"<pre><code>ProviderAdapter(config, name)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract base class for all LLM provider adapters.</p> <p>This class defines the interface that all provider implementations must follow, ensuring consistent behavior across different providers.</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Attributes\u00b6 <code></code> client <code>property</code> \u00b6 <pre><code>client\n</code></pre> <p>Get the underlying provider client.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The provider's client instance</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the provider is not initialized</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the provider is initialized.</p> Functions\u00b6 <code></code> initialize <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the provider client and connection.</p> <p>This method should set up the provider client, validate configuration, and establish any necessary connections.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails</p> <code></code> cleanup <code>async</code> \u00b6 <pre><code>cleanup()\n</code></pre> <p>Clean up provider resources.</p> <p>This method should close connections, clean up resources, and prepare the provider for shutdown.</p> <code></code> health_check <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a health check on the provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> chat_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> text_completion_stream <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> create_embeddings <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> list_models <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>abstractmethod</code> <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-2', **kwargs)\n</code></pre> <p>Generate images from text prompts.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation</p> <code>'dall-e-2'</code> <code>**kwargs</code> <code>Any</code> <p>Additional provider-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails or is not supported</p> <code></code> validate_request \u00b6 <pre><code>validate_request(request)\n</code></pre> <p>Validate a request before processing.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Any</code> <p>Request to validate</p> required <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the request is invalid</p> <code></code> handle_provider_error \u00b6 <pre><code>handle_provider_error(error, operation)\n</code></pre> <p>Handle and wrap provider-specific errors.</p> <p>Parameters:</p> Name Type Description Default <code>error</code> <code>Exception</code> <p>The original error from the provider</p> required <code>operation</code> <code>str</code> <p>The operation that failed</p> required <p>Raises:</p> Type Description <code>ProviderError</code> <p>Wrapped provider error</p>"},{"location":"reference/providers/#deepsentinel.providers.base.BaseLLMProvider","title":"BaseLLMProvider","text":"<pre><code>BaseLLMProvider(config, name)\n</code></pre> <p>               Bases: <code>ProviderAdapter</code></p> <p>Base class for LLM providers with common functionality.</p> <p>This class provides common implementations and utilities that most LLM providers can use, reducing code duplication.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> get_performance_metrics \u00b6 <pre><code>get_performance_metrics()\n</code></pre> <p>Get performance metrics for this provider.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing performance metrics</p>"},{"location":"reference/providers/#deepsentinel.providers.openai","title":"openai","text":"<p>OpenAI provider adapter for DeepSentinel.</p> <p>This module implements the OpenAI provider adapter, supporting all OpenAI API features including chat completions, text completions, embeddings, and more. Includes comprehensive error handling, streaming support, and middleware.</p>"},{"location":"reference/providers/#deepsentinel.providers.openai-classes","title":"Classes","text":""},{"location":"reference/providers/#deepsentinel.providers.openai.OpenAIProvider","title":"OpenAIProvider","text":"<pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required Functions\u00b6 <code></code> initialize <code>async</code> \u00b6 <pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p> <code></code> health_check <code>async</code> \u00b6 <pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p> <code></code> chat_completion <code>async</code> \u00b6 <pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> chat_completion_stream <code>async</code> \u00b6 <pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion <code>async</code> \u00b6 <pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> text_completion_stream <code>async</code> \u00b6 <pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> create_embeddings <code>async</code> \u00b6 <pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p> <code></code> list_models <code>async</code> \u00b6 <pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> get_model <code>async</code> \u00b6 <pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> transcribe_audio <code>async</code> \u00b6 <pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> translate_audio <code>async</code> \u00b6 <pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code></code> generate_image <code>async</code> \u00b6 <pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/#deepsentinel.providers.registry","title":"registry","text":"<p>Provider registry for managing LLM provider instances.</p> <p>This module provides a centralized registry for managing different LLM provider adapters, including registration, lookup, and lifecycle management.</p>"},{"location":"reference/providers/#deepsentinel.providers.registry-classes","title":"Classes","text":""},{"location":"reference/providers/#deepsentinel.providers.registry.ProviderRegistry","title":"ProviderRegistry","text":"<pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p> Attributes\u00b6 <code></code> providers <code>property</code> \u00b6 <pre><code>providers\n</code></pre> <p>Get all registered providers.</p> <code></code> provider_names <code>property</code> \u00b6 <pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p> <code></code> default_provider <code>property</code> \u00b6 <pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p> <code></code> is_initialized <code>property</code> \u00b6 <pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p> Functions\u00b6 <code></code> register_provider_class \u00b6 <pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p> <code></code> register_model_mapping \u00b6 <pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required <code></code> register_model_mappings \u00b6 <pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required <code></code> get_provider_for_model \u00b6 <pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p> <code></code> get_models_for_provider \u00b6 <pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p> <code></code> get_provider_metadata \u00b6 <pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p> <code></code> set_failover_chain \u00b6 <pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required <code></code> get_failover_chain \u00b6 <pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p> <code></code> create_provider \u00b6 <pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p> <code></code> register_provider <code>async</code> \u00b6 <pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p> <code></code> unregister_provider \u00b6 <pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> get_provider \u00b6 <pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p> <code></code> get_provider_with_model_support \u00b6 <pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p> <code></code> has_provider \u00b6 <pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p> <code></code> set_default_provider \u00b6 <pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p> <code></code> initialize_all <code>async</code> \u00b6 <pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p> <code></code> cleanup_all <code>async</code> \u00b6 <pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p> <code></code> health_check_all <code>async</code> \u00b6 <pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p> <code></code> from_config <code>async</code> <code>classmethod</code> \u00b6 <pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p>"},{"location":"reference/providers/#deepsentinel.providers.registry-functions","title":"Functions","text":""},{"location":"reference/providers/#deepsentinel.providers.registry.get_global_registry","title":"get_global_registry","text":"<pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p>"},{"location":"reference/providers/#deepsentinel.providers.registry.set_global_registry","title":"set_global_registry","text":"<pre><code>set_global_registry(registry)\n</code></pre> <p>Set the global provider registry instance.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to set as global</p> required"},{"location":"reference/providers/#deepsentinel.providers.registry.initialize_default_providers","title":"initialize_default_providers  <code>async</code>","text":"<pre><code>initialize_default_providers()\n</code></pre> <p>Initialize default provider classes with model mappings.</p>"},{"location":"reference/providers/#deepsentinel.providers.registry.setup_default_failover_chains","title":"setup_default_failover_chains","text":"<pre><code>setup_default_failover_chains(registry)\n</code></pre> <p>Set up default failover chains for common scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to configure failover chains for</p> required"},{"location":"reference/providers/#deepsentinel.providers.registry.create_registry_from_config","title":"create_registry_from_config  <code>async</code>","text":"<pre><code>create_registry_from_config(config, setup_failover=True)\n</code></pre> <p>Create and configure a provider registry from SentinelConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required <code>setup_failover</code> <code>bool</code> <p>Whether to set up default failover chains</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p>"},{"location":"reference/providers/anthropic/","title":"deepsentinel.providers.anthropic","text":""},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic","title":"anthropic","text":"<p>Anthropic provider adapter for DeepSentinel.</p> <p>This module implements the Anthropic provider adapter, supporting Claude models with comprehensive functionality including chat completions, streaming support, robust error handling, and middleware integration.</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic-classes","title":"Classes","text":""},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider","title":"AnthropicProvider","text":"<pre><code>AnthropicProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>Anthropic provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive Anthropic Claude API support with: - Chat completions with streaming support - Text completion emulation via chat completions - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging - Support for all Claude models</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (anthropic)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider-functions","title":"Functions","text":""},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the Anthropic client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the Anthropic provider.</p> <p>Tests API connectivity, authentication, and basic functionality.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using Anthropic API.</p> <p>Supports all Anthropic Claude models with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using Anthropic API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using Anthropic API.</p> <p>Note: Anthropic doesn't support traditional text completions, so this method emulates it by using chat completions with a user message.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional Anthropic-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text.</p> <p>Note: Anthropic doesn't currently support embeddings. This method raises a ProviderError.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Raises:</p> Type Description <code>ProviderError</code> <p>Always, as Anthropic doesn't support embeddings</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available Anthropic models.</p> <p>Note: Anthropic doesn't have a models listing API. This method returns a static list of known Claude models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p>"},{"location":"reference/providers/anthropic/#deepsentinel.providers.anthropic.AnthropicProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific model.</p> <p>Note: Anthropic doesn't have a model information API. This method returns static information for known models or raises an error for unknown models.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters (unused)</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the model is not known</p>"},{"location":"reference/providers/openai/","title":"deepsentinel.providers.openai","text":""},{"location":"reference/providers/openai/#deepsentinel.providers.openai","title":"openai","text":"<p>OpenAI provider adapter for DeepSentinel.</p> <p>This module implements the OpenAI provider adapter, supporting all OpenAI API features including chat completions, text completions, embeddings, and more. Includes comprehensive error handling, streaming support, and middleware.</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai-classes","title":"Classes","text":""},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider","title":"OpenAIProvider","text":"<pre><code>OpenAIProvider(config, name)\n</code></pre> <p>               Bases: <code>BaseLLMProvider</code></p> <p>OpenAI provider adapter for DeepSentinel.</p> <p>This adapter provides comprehensive OpenAI API support with: - Chat and text completions with streaming - Embeddings generation - Audio transcription/translation - Image generation - Robust error handling with exponential backoff - Compliance middleware integration - Performance monitoring and logging</p> <p>Attributes:</p> Name Type Description <code>config</code> <p>Provider configuration</p> <code>name</code> <p>Provider name</p> <code>provider_type</code> <p>Type of the provider (openai)</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>name</code> <code>str</code> <p>Name identifier for this provider instance</p> required"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider-functions","title":"Functions","text":""},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.initialize","title":"initialize  <code>async</code>","text":"<pre><code>initialize()\n</code></pre> <p>Initialize the OpenAI client and connection.</p> <p>This method sets up the aiohttp session for API calls, validates configuration, and performs initial connectivity tests.</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If initialization fails or API key is missing</p> <code>AuthenticationError</code> <p>If API key is invalid</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.health_check","title":"health_check  <code>async</code>","text":"<pre><code>health_check()\n</code></pre> <p>Perform a comprehensive health check on the OpenAI provider.</p> <p>Tests API connectivity, authentication, and model availability.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary containing detailed health status information</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If health check fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.chat_completion","title":"chat_completion  <code>async</code>","text":"<pre><code>chat_completion(request, **kwargs)\n</code></pre> <p>Create a chat completion using OpenAI API.</p> <p>Supports all OpenAI chat completion parameters with comprehensive error handling, validation, and performance monitoring.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>ChatResponse</code> <p>Chat completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.chat_completion_stream","title":"chat_completion_stream  <code>async</code>","text":"<pre><code>chat_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming chat completion using OpenAI API.</p> <p>Provides real-time streaming of chat completion responses with proper error handling and chunk validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>ChatRequest</code> <p>Chat completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.text_completion","title":"text_completion  <code>async</code>","text":"<pre><code>text_completion(request, **kwargs)\n</code></pre> <p>Create a text completion using OpenAI API.</p> <p>Supports legacy text completion models with comprehensive error handling and validation.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>CompletionResponse</code> <p>Text completion response</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.text_completion_stream","title":"text_completion_stream  <code>async</code>","text":"<pre><code>text_completion_stream(request, **kwargs)\n</code></pre> <p>Create a streaming text completion using OpenAI API.</p> <p>Provides real-time streaming of text completion responses for legacy completion models.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>CompletionRequest</code> <p>Text completion request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Yields:</p> Type Description <code>AsyncIterator[StreamChunk]</code> <p>Stream chunks containing partial responses</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.create_embeddings","title":"create_embeddings  <code>async</code>","text":"<pre><code>create_embeddings(request, **kwargs)\n</code></pre> <p>Create embeddings for input text using OpenAI API.</p> <p>Supports all OpenAI embedding models with batch processing and comprehensive error handling.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>EmbeddingRequest</code> <p>Embedding request</p> required <code>**kwargs</code> <code>Any</code> <p>Additional OpenAI-specific parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>EmbeddingResponse</code> <p>Embedding response containing vectors</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p> <code>AuthenticationError</code> <p>If authentication fails</p> <code>RateLimitError</code> <p>If rate limits are exceeded</p> <code>ValidationError</code> <p>If request validation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.list_models","title":"list_models  <code>async</code>","text":"<pre><code>list_models(**kwargs)\n</code></pre> <p>List available OpenAI models.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the models list endpoint</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>List of available models with metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.get_model","title":"get_model  <code>async</code>","text":"<pre><code>get_model(model_id, **kwargs)\n</code></pre> <p>Get information about a specific OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>model_id</code> <code>str</code> <p>ID of the model to retrieve</p> required <code>**kwargs</code> <code>Any</code> <p>Additional parameters</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Model information and metadata</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.transcribe_audio","title":"transcribe_audio  <code>async</code>","text":"<pre><code>transcribe_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Transcribe audio to text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for transcription</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Transcription result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.translate_audio","title":"translate_audio  <code>async</code>","text":"<pre><code>translate_audio(audio_file, model='whisper-1', **kwargs)\n</code></pre> <p>Translate audio to English text using OpenAI's Whisper API.</p> <p>Parameters:</p> Name Type Description Default <code>audio_file</code> <code>Union[str, bytes]</code> <p>Path to audio file or audio bytes</p> required <code>model</code> <code>str</code> <p>Model to use for translation</p> <code>'whisper-1'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters for the audio API</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Translation result</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/openai/#deepsentinel.providers.openai.OpenAIProvider.generate_image","title":"generate_image  <code>async</code>","text":"<pre><code>generate_image(prompt, model='dall-e-3', **kwargs)\n</code></pre> <p>Generate images from text prompts using DALL-E.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>str</code> <p>Text prompt for image generation</p> required <code>model</code> <code>str</code> <p>Model to use for generation (e.g., \"dall-e-3\")</p> <code>'dall-e-3'</code> <code>**kwargs</code> <code>Any</code> <p>Additional parameters such as size, quality, style</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Image generation result containing URLs or base64 data</p> <p>Raises:</p> Type Description <code>ProviderError</code> <p>If the operation fails</p>"},{"location":"reference/providers/registry/","title":"deepsentinel.providers.registry","text":""},{"location":"reference/providers/registry/#deepsentinel.providers.registry","title":"registry","text":"<p>Provider registry for managing LLM provider instances.</p> <p>This module provides a centralized registry for managing different LLM provider adapters, including registration, lookup, and lifecycle management.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry-classes","title":"Classes","text":""},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry","title":"ProviderRegistry","text":"<pre><code>ProviderRegistry()\n</code></pre> <p>Registry for managing LLM provider instances.</p> <p>This class provides centralized management of provider adapters, including registration, initialization, lookup operations, model mapping, and failover capabilities with thread-safe operations.</p> <p>Attributes:</p> Name Type Description <code>_providers</code> <code>Dict[str, ProviderAdapter]</code> <p>Dictionary of registered provider instances</p> <code>_provider_classes</code> <code>Dict[str, Type[ProviderAdapter]]</code> <p>Dictionary of available provider classes</p> <code>_default_provider</code> <code>Optional[str]</code> <p>Default provider name</p> <code>_model_mapping</code> <code>Dict[str, str]</code> <p>Mapping from model names to provider names</p> <code>_provider_metadata</code> <code>Dict[str, Dict[str, Any]]</code> <p>Metadata and capabilities for each provider</p> <code>_failover_chains</code> <code>Dict[str, List[str]]</code> <p>Failover chains for providers</p> <code>_health_status</code> <code>Dict[str, Dict[str, Any]]</code> <p>Health status cache for providers</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry-attributes","title":"Attributes","text":""},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.providers","title":"providers  <code>property</code>","text":"<pre><code>providers\n</code></pre> <p>Get all registered providers.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.provider_names","title":"provider_names  <code>property</code>","text":"<pre><code>provider_names\n</code></pre> <p>Get list of registered provider names.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.default_provider","title":"default_provider  <code>property</code>","text":"<pre><code>default_provider\n</code></pre> <p>Get the default provider name.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.is_initialized","title":"is_initialized  <code>property</code>","text":"<pre><code>is_initialized\n</code></pre> <p>Check if the registry is initialized.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry-functions","title":"Functions","text":""},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.register_provider_class","title":"register_provider_class","text":"<pre><code>register_provider_class(\n    provider_type, provider_class, supported_models=None, capabilities=None\n)\n</code></pre> <p>Register a provider class with metadata.</p> <p>Parameters:</p> Name Type Description Default <code>provider_type</code> <code>str</code> <p>Type identifier for the provider</p> required <code>provider_class</code> <code>Type[ProviderAdapter]</code> <p>Provider class to register</p> required <code>supported_models</code> <code>Optional[List[str]]</code> <p>List of models supported by this provider</p> <code>None</code> <code>capabilities</code> <code>Optional[Dict[str, Any]]</code> <p>Dictionary of provider capabilities</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider type is already registered</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.register_model_mapping","title":"register_model_mapping","text":"<pre><code>register_model_mapping(model_name, provider_name)\n</code></pre> <p>Register a mapping from model name to provider.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <code>provider_name</code> <code>str</code> <p>Name of the provider that supports this model</p> required"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.register_model_mappings","title":"register_model_mappings","text":"<pre><code>register_model_mappings(mappings)\n</code></pre> <p>Register multiple model mappings at once.</p> <p>Parameters:</p> Name Type Description Default <code>mappings</code> <code>Dict[str, str]</code> <p>Dictionary mapping model names to provider names</p> required"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_provider_for_model","title":"get_provider_for_model","text":"<pre><code>get_provider_for_model(model_name)\n</code></pre> <p>Get the provider name that supports a specific model.</p> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>Name of the model</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Provider name if found, None otherwise</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_models_for_provider","title":"get_models_for_provider","text":"<pre><code>get_models_for_provider(provider_name)\n</code></pre> <p>Get all models supported by a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of model names supported by the provider</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_provider_metadata","title":"get_provider_metadata","text":"<pre><code>get_provider_metadata(provider_name)\n</code></pre> <p>Get metadata for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Provider metadata if found, None otherwise</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.set_failover_chain","title":"set_failover_chain","text":"<pre><code>set_failover_chain(primary_provider, fallback_providers)\n</code></pre> <p>Set up a failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>primary_provider</code> <code>str</code> <p>Name of the primary provider</p> required <code>fallback_providers</code> <code>List[str]</code> <p>List of fallback provider names in order</p> required"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_failover_chain","title":"get_failover_chain","text":"<pre><code>get_failover_chain(provider_name)\n</code></pre> <p>Get the failover chain for a provider.</p> <p>Parameters:</p> Name Type Description Default <code>provider_name</code> <code>str</code> <p>Name of the provider</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of fallback provider names</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.create_provider","title":"create_provider","text":"<pre><code>create_provider(name, config)\n</code></pre> <p>Create a provider instance from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Created provider instance</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If provider type is not supported</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.register_provider","title":"register_provider  <code>async</code>","text":"<pre><code>register_provider(name, config, initialize=True, set_as_default=False)\n</code></pre> <p>Register a new provider instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name for the provider instance</p> required <code>config</code> <code>ProviderConfig</code> <p>Provider configuration</p> required <code>initialize</code> <code>bool</code> <p>Whether to initialize the provider immediately</p> <code>True</code> <code>set_as_default</code> <code>bool</code> <p>Whether to set as the default provider</p> <code>False</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Registered provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider name already exists</p> <code>ConfigurationError</code> <p>If configuration is invalid</p> <code>ProviderError</code> <p>If initialization fails</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.unregister_provider","title":"unregister_provider","text":"<pre><code>unregister_provider(name)\n</code></pre> <p>Unregister a provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to unregister</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_provider","title":"get_provider","text":"<pre><code>get_provider(name=None, model=None, use_failover=True)\n</code></pre> <p>Get a provider by name or model with failover support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Provider name (uses default if None)</p> <code>None</code> <code>model</code> <code>Optional[str]</code> <p>Model name to get appropriate provider for</p> <code>None</code> <code>use_failover</code> <code>bool</code> <p>Whether to use failover if primary provider fails</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no suitable provider is found</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.get_provider_with_model_support","title":"get_provider_with_model_support","text":"<pre><code>get_provider_with_model_support(model, use_failover=True)\n</code></pre> <p>Get a provider that supports the specified model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>Model name to find provider for</p> required <code>use_failover</code> <code>bool</code> <p>Whether to use failover providers</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderAdapter</code> <p>Provider instance that supports the model</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no provider supports the model</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.has_provider","title":"has_provider","text":"<pre><code>has_provider(name)\n</code></pre> <p>Check if a provider is registered.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Provider name to check</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if provider is registered, False otherwise</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.set_default_provider","title":"set_default_provider","text":"<pre><code>set_default_provider(name)\n</code></pre> <p>Set the default provider.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the provider to set as default</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If provider is not found</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.initialize_all","title":"initialize_all  <code>async</code>","text":"<pre><code>initialize_all()\n</code></pre> <p>Initialize all registered providers.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.cleanup_all","title":"cleanup_all  <code>async</code>","text":"<pre><code>cleanup_all()\n</code></pre> <p>Clean up all providers.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.health_check_all","title":"health_check_all  <code>async</code>","text":"<pre><code>health_check_all()\n</code></pre> <p>Perform health checks on all providers.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dictionary mapping provider names to health check results</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.ProviderRegistry.from_config","title":"from_config  <code>async</code> <code>classmethod</code>","text":"<pre><code>from_config(config)\n</code></pre> <p>Create a provider registry from configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration containing provider configs</p> required <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If configuration is invalid</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry-functions","title":"Functions","text":""},{"location":"reference/providers/registry/#deepsentinel.providers.registry.get_global_registry","title":"get_global_registry","text":"<pre><code>get_global_registry()\n</code></pre> <p>Get the global provider registry instance.</p> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Global provider registry</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.set_global_registry","title":"set_global_registry","text":"<pre><code>set_global_registry(registry)\n</code></pre> <p>Set the global provider registry instance.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to set as global</p> required"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.initialize_default_providers","title":"initialize_default_providers  <code>async</code>","text":"<pre><code>initialize_default_providers()\n</code></pre> <p>Initialize default provider classes with model mappings.</p>"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.setup_default_failover_chains","title":"setup_default_failover_chains","text":"<pre><code>setup_default_failover_chains(registry)\n</code></pre> <p>Set up default failover chains for common scenarios.</p> <p>Parameters:</p> Name Type Description Default <code>registry</code> <code>ProviderRegistry</code> <p>Provider registry to configure failover chains for</p> required"},{"location":"reference/providers/registry/#deepsentinel.providers.registry.create_registry_from_config","title":"create_registry_from_config  <code>async</code>","text":"<pre><code>create_registry_from_config(config, setup_failover=True)\n</code></pre> <p>Create and configure a provider registry from SentinelConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>SentinelConfig</code> <p>Sentinel configuration</p> required <code>setup_failover</code> <code>bool</code> <p>Whether to set up default failover chains</p> <code>True</code> <p>Returns:</p> Type Description <code>ProviderRegistry</code> <p>Configured provider registry</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Step-by-step guides to help you integrate DeepSentinel into your applications. These tutorials cover common use cases and provide practical examples you can adapt for your needs.</p>"},{"location":"tutorials/#getting-started-tutorials","title":"Getting Started Tutorials","text":""},{"location":"tutorials/#basic-integration","title":"Basic Integration","text":"<p>Learn how to integrate DeepSentinel into an existing application that uses OpenAI's API. This tutorial covers the essential steps to add compliance checking with minimal code changes.</p> <p>What you'll learn: - How to replace OpenAI SDK calls with DeepSentinel - Basic compliance configuration - Error handling and logging - Testing your integration</p> <p>Time: 15 minutes</p>"},{"location":"tutorials/#multiple-providers","title":"Multiple Providers","text":"<p>Set up DeepSentinel to work with multiple LLM providers (OpenAI, Anthropic, etc.) and learn how to route requests efficiently.</p> <p>What you'll learn: - Configuring multiple providers - Provider selection strategies - Load balancing and fallback handling - Cost optimization techniques</p> <p>Time: 20 minutes</p>"},{"location":"tutorials/#streaming-responses","title":"Streaming Responses","text":"<p>Implement streaming responses with compliance checking for real-time applications like chatbots and interactive assistants.</p> <p>What you'll learn: - Setting up streaming with DeepSentinel - Handling compliance in streaming contexts - Performance optimization for streams - Error recovery in streaming scenarios</p> <p>Time: 25 minutes</p>"},{"location":"tutorials/#advanced-tutorials","title":"Advanced Tutorials","text":""},{"location":"tutorials/#compliance-setup","title":"Compliance Setup","text":"<p>Configure comprehensive compliance policies for your organization's specific requirements, including GDPR, HIPAA, and custom policies.</p> <p>What you'll learn: - Creating custom compliance policies - Jurisdiction-specific configuration - Risk score tuning - Audit trail setup</p> <p>Time: 30 minutes</p>"},{"location":"tutorials/#error-handling","title":"Error Handling","text":"<p>Build robust applications that gracefully handle compliance violations, provider errors, and network issues.</p> <p>What you'll learn: - Comprehensive error handling strategies - Compliance violation recovery - Provider failover implementation - Monitoring and alerting setup</p> <p>Time: 25 minutes</p>"},{"location":"tutorials/#tutorial-prerequisites","title":"Tutorial Prerequisites","text":"<p>Before starting these tutorials, make sure you have:</p> <ul> <li>Python 3.8+ installed</li> <li>DeepSentinel API key (sign up here)</li> <li>LLM provider API keys (OpenAI, Anthropic, etc.)</li> <li>Basic Python knowledge (variables, functions, error handling)</li> </ul>"},{"location":"tutorials/#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial follows a consistent structure:</p> <ol> <li>Overview - What you'll build and learn</li> <li>Prerequisites - What you need before starting</li> <li>Step-by-step instructions - Detailed implementation steps</li> <li>Code examples - Complete, runnable code samples</li> <li>Testing - How to verify your implementation works</li> <li>Next steps - How to extend what you've learned</li> </ol>"},{"location":"tutorials/#getting-help","title":"Getting Help","text":"<p>If you get stuck during any tutorial:</p> <ul> <li>Check the FAQ for common issues</li> <li>Review the API Reference for detailed documentation</li> <li>Open an issue on GitHub</li> <li>Join our Discord community</li> </ul> <p>Ready to start? Begin with Basic Integration \u2192</p>"},{"location":"tutorials/basic-integration/","title":"Basic Integration Tutorial","text":"<p>This tutorial shows you how to integrate DeepSentinel into an existing application that uses OpenAI's API. You'll learn how to add compliance checking with minimal code changes.</p>"},{"location":"tutorials/basic-integration/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have: - Replaced direct OpenAI API calls with DeepSentinel - Added basic compliance checking for PII and sensitive data - Implemented proper error handling for compliance violations - Set up audit logging for all API interactions</p> <p>Time required: 15 minutes</p>"},{"location":"tutorials/basic-integration/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>An existing application using OpenAI's API</li> <li>DeepSentinel API key (sign up here)</li> <li>OpenAI API key</li> </ul>"},{"location":"tutorials/basic-integration/#step-1-install-deepsentinel","title":"Step 1: Install DeepSentinel","text":"<p>First, install the DeepSentinel SDK:</p> <pre><code>pip install deepsentinel-sdk```\n\n## Step 2: Replace OpenAI Imports\n\n**Before (using OpenAI directly):**\n```python\nimport openai\nfrom openai import OpenAI\n\nclient = OpenAI(api_key=\"your-openai-key\")\n</code></pre> <p>After (using DeepSentinel): <pre><code>from deepsentinel import SentinelClient\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    openai_api_key=\"your-openai-key\"\n)\n</code></pre></p>"},{"location":"tutorials/basic-integration/#step-3-update-api-calls","title":"Step 3: Update API Calls","text":"<p>The great news is that DeepSentinel provides the same interface as OpenAI's SDK, so your existing code will work with minimal changes.</p>"},{"location":"tutorials/basic-integration/#chat-completions","title":"Chat Completions","text":"<p>Before: <pre><code>response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"What are the best practices for data privacy?\"}\n    ],\n    temperature=0.7,\n    max_tokens=150\n)\n\nprint(response.choices[0].message.content)\n</code></pre></p> <p>After: <pre><code># Exactly the same code!\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"What are the best practices for data privacy?\"}\n    ],\n    temperature=0.7,\n    max_tokens=150\n)\n\nprint(response.choices[0].message.content)\n</code></pre></p>"},{"location":"tutorials/basic-integration/#streaming-responses","title":"Streaming Responses","text":"<p>Before: <pre><code>stream = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Write a short story\"}],\n    stream=True\n)\n\nfor chunk in stream:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\")\n</code></pre></p> <p>After: <pre><code># Same interface, now with compliance checking!\nstream = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Write a short story\"}],\n    stream=True\n)\n\nfor chunk in stream:\n    if chunk.choices[0].delta.content is not None:\n        print(chunk.choices[0].delta.content, end=\"\")\n</code></pre></p>"},{"location":"tutorials/basic-integration/#step-4-add-compliance-error-handling","title":"Step 4: Add Compliance Error Handling","text":"<p>Now let's add proper error handling for compliance violations:</p> <pre><code>from deepsentinel import SentinelClient, ComplianceViolationError, ProviderError\n\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    openai_api_key=\"your-openai-key\"\n)\n\ndef safe_chat_completion(messages, model=\"gpt-4o\", **kwargs):\n    \"\"\"Make a chat completion with compliance error handling.\"\"\"\n    try:\n        response = client.chat.completions.create(\n            model=model,\n            messages=messages,\n            **kwargs\n        )\n        return response\n\n    except ComplianceViolationError as e:\n        print(f\"\u274c Compliance violation detected: {e.message}\")\n        print(f\"Violation types: {[v.type for v in e.violations]}\")\n\n        # Handle the violation (e.g., ask user to rephrase)\n        return None\n\n    except ProviderError as e:\n        print(f\"\u274c Provider error: {e.message}\")\n\n        # Handle provider issues (e.g., retry with different provider)\n        return None\n\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {str(e)}\")\n        return None\n\n# Usage\nresponse = safe_chat_completion([\n    {\"role\": \"user\", \"content\": \"Hello, world!\"}\n])\n\nif response:\n    print(response.choices[0].message.content)\nelse:\n    print(\"Request failed due to compliance or technical issues\")\n</code></pre>"},{"location":"tutorials/basic-integration/#step-5-test-compliance-detection","title":"Step 5: Test Compliance Detection","text":"<p>Let's test that compliance detection is working by sending a request with sensitive data:</p> <pre><code># This should trigger a compliance violation\ntest_messages = [\n    {\n        \"role\": \"user\", \n        \"content\": \"My credit card number is 4111-1111-1111-1111 and my SSN is 123-45-6789\"\n    }\n]\n\nprint(\"Testing compliance detection...\")\nresponse = safe_chat_completion(test_messages)\n\nif not response:\n    print(\"\u2705 Compliance detection is working! Sensitive data was blocked.\")\nelse:\n    print(\"\u26a0\ufe0f  Compliance detection may not be configured correctly.\")\n</code></pre>"},{"location":"tutorials/basic-integration/#step-6-configure-basic-compliance-policy","title":"Step 6: Configure Basic Compliance Policy","text":"<p>Create a basic compliance policy for your application:</p> <pre><code>from deepsentinel import SentinelClient, CompliancePolicy\n\n# Create a basic compliance policy\npolicy = CompliancePolicy(\n    name=\"basic-app-policy\",\n    description=\"Basic compliance policy for our application\",\n\n    # Enable detection for common sensitive data types\n    enable_pii_detection=True,\n    enable_phi_detection=False,  # Disable if not handling health data\n    enable_pci_detection=True,\n\n    # Set risk tolerance\n    max_risk_score=0.8,  # Block requests with risk score &gt; 0.8\n    block_on_violation=True,\n\n    # Enable logging\n    log_violations=True\n)\n\n# Initialize client with the policy\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    openai_api_key=\"your-openai-key\",\n    compliance_policies=[policy]\n)\n</code></pre>"},{"location":"tutorials/basic-integration/#step-7-add-logging-and-monitoring","title":"Step 7: Add Logging and Monitoring","text":"<p>Set up basic logging to track compliance events:</p> <pre><code>import logging\nfrom deepsentinel import SentinelClient\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\n\nlogger = logging.getLogger(__name__)\n\ndef chat_with_logging(messages, **kwargs):\n    \"\"\"Chat completion with comprehensive logging.\"\"\"\n    try:\n        logger.info(f\"Making chat completion request with {len(messages)} messages\")\n\n        response = client.chat.completions.create(\n            messages=messages,\n            **kwargs\n        )\n\n        # Log successful completion\n        logger.info(f\"Chat completion successful. Tokens used: {response.usage.total_tokens}\")\n        return response\n\n    except ComplianceViolationError as e:\n        # Log compliance violations\n        logger.warning(f\"Compliance violation: {e.message}\")\n        logger.warning(f\"Violation details: {[v.dict() for v in e.violations]}\")\n        raise\n\n    except ProviderError as e:\n        # Log provider errors\n        logger.error(f\"Provider error: {e.provider} - {e.message}\")\n        raise\n\n    except Exception as e:\n        # Log unexpected errors\n        logger.error(f\"Unexpected error in chat completion: {str(e)}\")\n        raise\n\n# Usage with logging\ntry:\n    response = chat_with_logging([\n        {\"role\": \"user\", \"content\": \"What's the weather like today?\"}\n    ])\n    print(response.choices[0].message.content)\nexcept Exception as e:\n    print(f\"Request failed: {str(e)}\")\n</code></pre>"},{"location":"tutorials/basic-integration/#step-8-complete-integration-example","title":"Step 8: Complete Integration Example","text":"<p>Here's a complete example showing a typical integration:</p> <pre><code>import os\nimport logging\nfrom typing import List, Dict, Optional\nfrom deepsentinel import SentinelClient, CompliancePolicy, ComplianceViolationError\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass ChatBot:\n    \"\"\"Simple chatbot with DeepSentinel integration.\"\"\"\n\n    def __init__(self):\n        # Initialize DeepSentinel client\n        self.client = SentinelClient(\n            sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n            openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n            compliance_policies=[\n                CompliancePolicy(\n                    name=\"chatbot-policy\",\n                    enable_pii_detection=True,\n                    enable_pci_detection=True,\n                    max_risk_score=0.8,\n                    block_on_violation=True\n                )\n            ],\n            debug_mode=False\n        )\n\n        self.conversation_history = []\n\n    def chat(self, user_message: str) -&gt; Optional[str]:\n        \"\"\"Send a message and get a response.\"\"\"\n        # Add user message to history\n        self.conversation_history.append({\n            \"role\": \"user\", \n            \"content\": user_message\n        })\n\n        try:\n            # Make request with full conversation history\n            response = self.client.chat.completions.create(\n                model=\"gpt-4o\",\n                messages=[\n                    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                    *self.conversation_history\n                ],\n                temperature=0.7,\n                max_tokens=200\n            )\n\n            # Extract response content\n            assistant_message = response.choices[0].message.content\n\n            # Add assistant response to history\n            self.conversation_history.append({\n                \"role\": \"assistant\",\n                \"content\": assistant_message\n            })\n\n            logger.info(f\"Chat successful. Tokens used: {response.usage.total_tokens}\")\n            return assistant_message\n\n        except ComplianceViolationError as e:\n            error_msg = f\"I can't process that message because it contains sensitive information: {', '.join([v.type for v in e.violations])}\"\n            logger.warning(f\"Compliance violation: {e.message}\")\n            return error_msg\n\n        except Exception as e:\n            logger.error(f\"Chat error: {str(e)}\")\n            return \"Sorry, I'm having technical difficulties. Please try again.\"\n\n    def reset_conversation(self):\n        \"\"\"Reset conversation history.\"\"\"\n        self.conversation_history = []\n\n# Usage example\nif __name__ == \"__main__\":\n    bot = ChatBot()\n\n    print(\"ChatBot with DeepSentinel Integration\")\n    print(\"Type 'quit' to exit, 'reset' to clear history\")\n    print(\"-\" * 50)\n\n    while True:\n        user_input = input(\"\\nYou: \").strip()\n\n        if user_input.lower() == 'quit':\n            break\n        elif user_input.lower() == 'reset':\n            bot.reset_conversation()\n            print(\"Conversation history cleared.\")\n            continue\n\n        if user_input:\n            response = bot.chat(user_input)\n            print(f\"Bot: {response}\")\n</code></pre>"},{"location":"tutorials/basic-integration/#step-9-test-your-integration","title":"Step 9: Test Your Integration","text":"<p>Create a test script to verify everything works:</p> <pre><code>def test_integration():\n    \"\"\"Test the DeepSentinel integration.\"\"\"\n    print(\"Testing DeepSentinel integration...\")\n\n    # Test 1: Normal request should work\n    print(\"\\n1. Testing normal request...\")\n    try:\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": \"Hello, how are you?\"}]\n        )\n        print(\"\u2705 Normal request successful\")\n    except Exception as e:\n        print(f\"\u274c Normal request failed: {e}\")\n\n    # Test 2: Sensitive data should be blocked\n    print(\"\\n2. Testing compliance detection...\")\n    try:\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": \"My email is test@example.com\"}]\n        )\n        print(\"\u26a0\ufe0f  Sensitive data was not blocked (may be below risk threshold)\")\n    except ComplianceViolationError:\n        print(\"\u2705 Compliance detection working - sensitive data blocked\")\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {e}\")\n\n    # Test 3: Very sensitive data should definitely be blocked\n    print(\"\\n3. Testing high-risk content...\")\n    try:\n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789 and credit card is 4111-1111-1111-1111\"}]\n        )\n        print(\"\u274c High-risk content was not blocked!\")\n    except ComplianceViolationError as e:\n        print(\"\u2705 High-risk content properly blocked\")\n        print(f\"   Detected: {[v.type for v in e.violations]}\")\n    except Exception as e:\n        print(f\"\u274c Unexpected error: {e}\")\n\nif __name__ == \"__main__\":\n    test_integration()\n</code></pre>"},{"location":"tutorials/basic-integration/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've successfully integrated DeepSentinel into your application. Here are some next steps:</p>"},{"location":"tutorials/basic-integration/#immediate-next-steps","title":"Immediate Next Steps","text":"<ol> <li>Monitor compliance events - Set up logging and monitoring for production</li> <li>Tune risk thresholds - Adjust <code>max_risk_score</code> based on your requirements</li> <li>Add custom patterns - Define organization-specific sensitive data patterns</li> </ol>"},{"location":"tutorials/basic-integration/#advanced-features","title":"Advanced Features","text":"<ul> <li>Multiple Providers - Add Anthropic or other providers</li> <li>Streaming Responses - Implement real-time streaming</li> <li>Advanced Compliance - Configure GDPR, HIPAA policies</li> </ul>"},{"location":"tutorials/basic-integration/#production-considerations","title":"Production Considerations","text":"<ul> <li>Environment variables - Use environment variables for API keys</li> <li>Error monitoring - Set up comprehensive error tracking</li> <li>Performance monitoring - Monitor latency and compliance decision times</li> <li>Audit compliance - Regular review of compliance logs and policies</li> </ul>"},{"location":"tutorials/basic-integration/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/basic-integration/#authentication-errors","title":"Authentication Errors","text":"<p><pre><code>AuthenticationError: Invalid API key\n</code></pre> Solution: Verify your DeepSentinel and provider API keys are correct</p>"},{"location":"tutorials/basic-integration/#import-errors","title":"Import Errors","text":"<p><pre><code>ImportError: No module named 'deepsentinel'\n</code></pre> Solution: Install DeepSentinel: <code>pip install deepsentinel-sdk</code></p>"},{"location":"tutorials/basic-integration/#no-compliance-detection","title":"No Compliance Detection","text":"<p>If sensitive data isn't being detected: 1. Check that detection is enabled in your policy 2. Verify the risk score threshold isn't too high 3. Test with obviously sensitive data (SSN, credit card numbers)</p>"},{"location":"tutorials/basic-integration/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ - Common questions and solutions</li> <li>API Reference - Complete API documentation</li> <li>GitHub Issues - Report bugs or request features</li> <li>Discord Community - Get help from other developers</li> </ul> <p>Next Tutorial: Multiple Providers \u2192</p>"},{"location":"tutorials/compliance-setup/","title":"Compliance Setup Tutorial","text":"<p>This tutorial guides you through configuring and customizing DeepSentinel's compliance features to meet your organization's security requirements and regulatory obligations.</p>"},{"location":"tutorials/compliance-setup/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have: - Created basic and advanced compliance policies - Customized detection for different types of sensitive data - Implemented industry-specific policies (HIPAA, PCI DSS, GDPR) - Set up policy hierarchies and context-based policy selection - Added audit logging and monitoring for compliance events</p> <p>Time required: 30 minutes</p>"},{"location":"tutorials/compliance-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>DeepSentinel SDK installed (<code>pip install deepsentinel-sdk</code>)</li> <li>OpenAI or Anthropic API key</li> <li>Basic understanding of DeepSentinel basics</li> <li>Understanding of relevant compliance requirements for your organization</li> </ul>"},{"location":"tutorials/compliance-setup/#step-1-creating-a-basic-compliance-policy","title":"Step 1: Creating a Basic Compliance Policy","text":"<p>Let's start by creating a simple compliance policy:</p> <pre><code>from deepsentinel import SentinelClient, CompliancePolicy\nimport os\n\n# Create a basic policy with default settings\nbasic_policy = CompliancePolicy(\n    name=\"basic-policy\",\n    description=\"Default policy with standard detection settings\",\n\n    # Enable standard detection types\n    enable_pii_detection=True,    # Personal Identifiable Information\n    enable_phi_detection=True,    # Protected Health Information\n    enable_pci_detection=True,    # Payment Card Information\n\n    # Default risk threshold (0-1, lower is stricter)\n    max_risk_score=0.8,\n\n    # Block requests when violations are found\n    block_on_violation=True\n)\n\n# Initialize client with the policy\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[basic_policy]\n)\n</code></pre> <p>This creates a standard policy that: - Detects common types of sensitive data (PII, PHI, PCI) - Blocks any request with a risk score above 0.8 - Applies to all interactions with the LLM provider</p>"},{"location":"tutorials/compliance-setup/#step-2-testing-your-compliance-policy","title":"Step 2: Testing Your Compliance Policy","text":"<p>Let's verify that the compliance policy is working correctly:</p> <pre><code># Test with a safe message\ntry:\n    print(\"Testing with safe content...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"What are the best practices for data security?\"\n        }]\n    )\n    print(\"\u2705 Request allowed\")\n    print(f\"Response: {response.choices[0].message.content[:100]}...\")\n\nexcept ComplianceViolationError as e:\n    print(\"\u274c Request blocked:\", e.message)\n\n# Test with sensitive content\ntry:\n    print(\"\\nTesting with sensitive content...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"My social security number is 123-45-6789 and my credit card is 4111-1111-1111-1111\"\n        }]\n    )\n    print(\"\u26a0\ufe0f Request was not blocked (unexpected)\")\n\nexcept ComplianceViolationError as e:\n    print(\"\u2705 Request correctly blocked\")\n    print(f\"Violation types: {[v.type for v in e.violations]}\")\n    print(f\"Risk score: {e.risk_score}\")\n</code></pre>"},{"location":"tutorials/compliance-setup/#step-3-configuring-detection-sensitivity","title":"Step 3: Configuring Detection Sensitivity","text":"<p>You can adjust how strict the detection is for different types of sensitive data:</p> <pre><code># Create a policy with customized detection levels\ncustom_sensitivity_policy = CompliancePolicy(\n    name=\"custom-sensitivity-policy\",\n    description=\"Policy with customized detection sensitivity\",\n\n    # Enable detection types\n    enable_pii_detection=True,\n    enable_phi_detection=True,\n    enable_pci_detection=True,\n\n    # Set detection sensitivity for each type\n    pii_detection_level=\"strict\",     # Options: \"relaxed\", \"moderate\", \"strict\"\n    phi_detection_level=\"moderate\",   # More permissive for PHI\n    pci_detection_level=\"strict\",     # Very strict for payment data\n\n    # Risk threshold\n    max_risk_score=0.7,\n\n    # Block violations\n    block_on_violation=True\n)\n</code></pre> <p>The detection levels control: - relaxed: Only detects clear, high-confidence instances of sensitive data - moderate: Balanced detection with reasonable confidence - strict: Aggressive detection that may produce some false positives</p>"},{"location":"tutorials/compliance-setup/#step-4-creating-industry-specific-policies","title":"Step 4: Creating Industry-Specific Policies","text":"<p>Different industries have different compliance requirements. Let's create policies for specific industries:</p>"},{"location":"tutorials/compliance-setup/#healthcare-policy-hipaa","title":"Healthcare Policy (HIPAA)","text":"<pre><code># Healthcare policy for HIPAA compliance\nhealthcare_policy = CompliancePolicy(\n    name=\"hipaa-policy\",\n    description=\"Strict healthcare policy for HIPAA compliance\",\n\n    # Enable healthcare-specific detection\n    enable_pii_detection=True,\n    enable_phi_detection=True,  # PHI detection is critical for healthcare\n    enable_pci_detection=True,\n\n    # Add HIPAA to jurisdictions\n    jurisdictions=[\"HIPAA\"],\n\n    # Stricter risk threshold for healthcare\n    max_risk_score=0.6,\n\n    # Block on violation\n    block_on_violation=True,\n\n    # Healthcare-specific settings\n    phi_detection_level=\"strict\",\n    custom_patterns=[\n        r\"(\\b[A-Za-z]{2}\\d{6}\\b)\",  # Medical record number pattern\n        r\"(\\b\\d{3}-\\d{2}-\\d{4}\\b)\"   # SSN pattern\n    ],\n\n    # Anonymize data in audit logs\n    anonymize_audit_logs=True\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#financial-services-policy-pci-dss","title":"Financial Services Policy (PCI DSS)","text":"<pre><code># Financial policy for PCI DSS compliance\nfinancial_policy = CompliancePolicy(\n    name=\"financial-policy\",\n    description=\"Financial services policy for PCI DSS compliance\",\n\n    # Enable financial-specific detection\n    enable_pii_detection=True,\n    enable_phi_detection=False,  # PHI less relevant for financial\n    enable_pci_detection=True,   # PCI critical for financial services\n\n    # Add relevant jurisdictions\n    jurisdictions=[\"PCI-DSS\", \"GDPR\"],\n\n    # Financial risk threshold\n    max_risk_score=0.7,\n\n    # Block on violation\n    block_on_violation=True,\n\n    # Financial-specific settings\n    pci_detection_level=\"strict\",\n    custom_patterns=[\n        r\"(\\b(?:\\d{4}[- ]){3}\\d{4}\\b)\",  # Credit card pattern\n        r\"(\\b\\d{9,18}\\b)\"                # Account number pattern\n    ],\n\n    # Log all violations\n    log_violations=True,\n    log_violation_details=True\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#general-business-policy-gdpr","title":"General Business Policy (GDPR)","text":"<pre><code># General business policy for GDPR compliance\ngeneral_policy = CompliancePolicy(\n    name=\"gdpr-policy\",\n    description=\"General business policy for GDPR compliance\",\n\n    # Enable general detection\n    enable_pii_detection=True,\n    enable_phi_detection=False,\n    enable_pci_detection=False,\n\n    # Add GDPR jurisdiction\n    jurisdictions=[\"GDPR\"],\n\n    # Standard risk threshold\n    max_risk_score=0.8,\n\n    # Anonymize instead of blocking\n    block_on_violation=False,\n    anonymize_sensitive_data=True,\n\n    # PII-specific settings\n    pii_detection_level=\"moderate\",\n    custom_patterns=[\n        r\"(\\b[A-Z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b)\"  # Email\n    ]\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#step-5-data-anonymization-instead-of-blocking","title":"Step 5: Data Anonymization Instead of Blocking","text":"<p>For some use cases, you might want to anonymize sensitive data rather than blocking the entire request:</p> <pre><code># Create a policy that anonymizes instead of blocks\nanonymization_policy = CompliancePolicy(\n    name=\"anonymization-policy\",\n    description=\"Policy that anonymizes sensitive data instead of blocking\",\n\n    # Enable standard detection types\n    enable_pii_detection=True,\n    enable_phi_detection=True,\n    enable_pci_detection=True,\n\n    # Standard risk threshold\n    max_risk_score=0.8,\n\n    # Key settings: Don't block, but anonymize instead\n    block_on_violation=False,\n    anonymize_sensitive_data=True,\n\n    # Configure anonymization\n    anonymization_char=\"*\",         # Use asterisks for redaction\n    preserve_formatting=True,       # Keep the format (like XXX-XX-XXXX for SSN)\n    preserve_data_length=True       # Keep the same length\n)\n\n# Initialize client with the policy\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[anonymization_policy]\n)\n\n# Test with content containing sensitive data\ntry:\n    print(\"\\nSending message with sensitive data for anonymization...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"My email is john.doe@example.com and my phone is 555-123-4567\"\n        }]\n    )\n\n    print(\"\u2705 Request processed with anonymization\")\n    print(\"Original had email and phone number\")\n    print(f\"Anonymized: {response.request.messages[0].content}\")\n    print(f\"Response: {response.choices[0].message.content[:100]}...\")\n\nexcept ComplianceViolationError as e:\n    # This shouldn't happen since we're anonymizing, not blocking\n    print(\"\u274c Request was unexpectedly blocked:\", e.message)\n</code></pre> <p>The anonymization settings determine: - Which character is used for redaction (<code>anonymization_char</code>) - Whether to preserve the format of sensitive data (<code>preserve_formatting</code>) - Whether to maintain the same length as the original data (<code>preserve_data_length</code>)</p>"},{"location":"tutorials/compliance-setup/#step-6-custom-pattern-detection","title":"Step 6: Custom Pattern Detection","text":"<p>You can define custom patterns to detect organization-specific sensitive data:</p> <pre><code># Define custom patterns for organization-specific data\nemployee_id_pattern = r\"\\bEMP-\\d{6}\\b\"  # Format: EMP-123456\nproject_code_pattern = r\"\\bPROJ-[A-Z]{2}-\\d{4}\\b\"  # Format: PROJ-XY-1234\ninternal_code_pattern = r\"\\bINT-[A-Z0-9]{8}\\b\"  # Format: INT-AB12CD34\n\n# Create policy with custom patterns\ncustom_pattern_policy = CompliancePolicy(\n    name=\"custom-pattern-policy\",\n    description=\"Policy with custom patterns for organization-specific data\",\n\n    # Enable standard detection\n    enable_pii_detection=True,\n\n    # Standard risk threshold\n    max_risk_score=0.8,\n\n    # Add custom patterns with friendly names\n    custom_patterns={\n        \"employee_id\": employee_id_pattern,\n        \"project_code\": project_code_pattern,\n        \"internal_code\": internal_code_pattern\n    },\n\n    # Block violations\n    block_on_violation=True\n)\n\n# Initialize client with the policy\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[custom_pattern_policy]\n)\n\n# Test with content containing custom pattern\ntry:\n    print(\"\\nTesting with content containing custom pattern...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"Employee EMP-123456 is working on project PROJ-AB-1234\"\n        }]\n    )\n    print(\"\u26a0\ufe0f Custom pattern was not detected (unexpected)\")\n\nexcept ComplianceViolationError as e:\n    print(\"\u2705 Custom pattern correctly detected\")\n    print(f\"Violation types: {[v.type for v in e.violations]}\")\n</code></pre>"},{"location":"tutorials/compliance-setup/#step-7-allowlists-for-specific-data-types","title":"Step 7: Allowlists for Specific Data Types","text":"<p>In some cases, you might want to allow certain types of potentially sensitive data:</p> <pre><code># Create policy with allowlists\nallowlist_policy = CompliancePolicy(\n    name=\"allowlist-policy\",\n    description=\"Policy that allows certain types of potentially sensitive data\",\n\n    # Enable detection but with allowlists\n    enable_pii_detection=True,\n    enable_phi_detection=False,\n    enable_pci_detection=True,\n\n    # Define allowlists (data types that should be allowed)\n    custom_allowlist=[\n        \"email_addresses\",  # Allow email addresses\n        \"urls\",             # Allow URLs\n        \"ip_addresses\",     # Allow IP addresses\n    ],\n\n    # Block non-allowlisted sensitive data\n    block_on_violation=True,\n    max_risk_score=0.8\n)\n\n# Initialize client with the policy\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[allowlist_policy]\n)\n\n# Test with allowlisted data (email)\ntry:\n    print(\"\\nTesting with allowlisted data type (email)...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"My email is john.doe@example.com and website is https://example.com\"\n        }]\n    )\n    print(\"\u2705 Request with allowlisted data correctly allowed\")\n\nexcept ComplianceViolationError as e:\n    print(\"\u274c Request was incorrectly blocked:\", e.message)\n</code></pre>"},{"location":"tutorials/compliance-setup/#step-8-multiple-policies-with-different-priorities","title":"Step 8: Multiple Policies with Different Priorities","text":"<p>For complex organizations, you can set up multiple policies with different priorities:</p> <pre><code>from deepsentinel import SentinelClient, SentinelConfig, CompliancePolicy\n\n# Policy 1: Base policy (lowest priority)\nbase_policy = CompliancePolicy(\n    name=\"base-policy\",\n    description=\"Default policy for all requests\",\n    enable_pii_detection=True,\n    max_risk_score=0.9,  # Lenient\n    priority=1,  # Lowest priority\n    block_on_violation=False,\n    anonymize_sensitive_data=True\n)\n\n# Policy 2: Finance department policy (medium priority)\nfinance_policy = CompliancePolicy(\n    name=\"finance-policy\",\n    description=\"Policy for finance department\",\n    enable_pii_detection=True,\n    enable_pci_detection=True,\n    max_risk_score=0.7,  # Stricter\n    priority=5,  # Medium priority\n    block_on_violation=True,\n    department=\"finance\"  # Apply only to finance department\n)\n\n# Policy 3: Healthcare data policy (highest priority)\nhealthcare_policy = CompliancePolicy(\n    name=\"healthcare-policy\",\n    description=\"Policy for healthcare data\",\n    enable_pii_detection=True,\n    enable_phi_detection=True,\n    max_risk_score=0.5,  # Very strict\n    priority=10,  # Highest priority\n    block_on_violation=True,\n    data_categories=[\"healthcare\"]  # Apply only to healthcare data\n)\n\n# Initialize client with all policies\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[base_policy, finance_policy, healthcare_policy]\n)\nclient = SentinelClient(config=config)\n</code></pre> <p>Now you can specify which policy should apply based on metadata:</p> <pre><code># Example 1: General query (should use base policy)\ntry:\n    metadata = {\"data_type\": \"general\"}\n    print(\"\\nGeneral query (should use base policy)...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"Hello world\"}],\n        metadata=metadata  # Metadata determines which policy applies\n    )\n    print(\"\u2705 Using base policy\")\nexcept Exception as e:\n    print(f\"\u274c Error: {str(e)}\")\n\n# Example 2: Finance query (should use finance policy)\ntry:\n    metadata = {\"department\": \"finance\"}\n    print(\"\\nFinance department query (should use finance policy)...\")\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\"role\": \"user\", \"content\": \"Quarterly financial report\"}],\n        metadata=metadata\n    )\n    print(\"\u2705 Using finance policy\")\nexcept Exception as e:\n    print(f\"\u274c Error: {str(e)}\")\n</code></pre> <p>The policy selection is based on: 1. Priority - Higher priority policies are evaluated first 2. Metadata - Policies can be tagged with departments, data categories, or other attributes 3. Specificity - More specific policies take precedence over general ones</p>"},{"location":"tutorials/compliance-setup/#step-9-add-audit-logging-for-compliance-events","title":"Step 9: Add Audit Logging for Compliance Events","text":"<p>Comprehensive audit logging is crucial for compliance:</p> <pre><code>import logging\nfrom deepsentinel import SentinelClient, CompliancePolicy, AuditConfig\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    filename='compliance_audit.log'  # Log to file\n)\n\n# Create audit configuration\naudit_config = AuditConfig(\n    enabled=True,\n    log_level=\"info\",\n    include_request_content=True,  # Log full request content\n    include_response_content=True,  # Log full response content\n    include_policy_decisions=True,  # Log policy decisions\n    log_all_requests=True,          # Log all requests, not just violations\n    destination=\"file\",             # \"file\", \"sentinel\", or \"both\"\n    file_path=\"compliance_audit.log\"\n)\n\n# Create compliance policy with audit settings\npolicy = CompliancePolicy(\n    name=\"audited-policy\",\n    enable_pii_detection=True,\n    enable_phi_detection=True,\n    enable_pci_detection=True,\n    max_risk_score=0.8,\n    block_on_violation=True,\n\n    # Audit settings\n    log_violations=True,\n    log_violation_details=True,\n    anonymize_audit_logs=True  # Redact sensitive data in logs\n)\n\n# Initialize client with policy and audit config\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[policy],\n    audit_config=audit_config\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#step-10-complete-implementation-example","title":"Step 10: Complete Implementation Example","text":"<p>Let's put everything together in a comprehensive compliance setup:</p> <pre><code>import os\nimport logging\nfrom typing import List, Dict, Any\nfrom deepsentinel import (\n    SentinelClient,\n    SentinelConfig,\n    CompliancePolicy,\n    AuditConfig,\n    ComplianceViolationError\n)\n\nclass ComplianceManager:\n    \"\"\"Helper class to manage compliance policies and auditing.\"\"\"\n\n    def __init__(self, api_keys: Dict[str, str], log_file: str = \"compliance.log\"):\n        \"\"\"Initialize the compliance manager.\n\n        Args:\n            api_keys: Dictionary with sentinel_api_key and provider keys\n            log_file: Path to log file\n        \"\"\"\n        # Configure logging\n        logging.basicConfig(\n            level=logging.INFO,\n            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n            filename=log_file\n        )\n        self.logger = logging.getLogger(\"compliance\")\n\n        # Create audit config\n        audit_config = AuditConfig(\n            enabled=True,\n            log_level=\"info\",\n            include_request_content=True,\n            include_policy_decisions=True,\n            log_all_requests=True,\n            destination=\"both\",\n            file_path=log_file\n        )\n\n        # Create policies\n        policies = self._create_policies()\n\n        # Create client config\n        config = SentinelConfig(\n            sentinel_api_key=api_keys[\"sentinel_api_key\"],\n            openai_api_key=api_keys.get(\"openai_api_key\"),\n            anthropic_api_key=api_keys.get(\"anthropic_api_key\"),\n            compliance_policies=policies,\n            audit_config=audit_config\n        )\n\n        # Initialize client\n        self.client = SentinelClient(config=config)\n        self.logger.info(\"ComplianceManager initialized with %d policies\", len(policies))\n\n    def _create_policies(self) -&gt; List[CompliancePolicy]:\n        \"\"\"Create compliance policies.\"\"\"\n        # Base policy (applies to all)\n        base_policy = CompliancePolicy(\n            name=\"base-policy\",\n            description=\"Default policy for all requests\",\n            enable_pii_detection=True,\n            max_risk_score=0.9,\n            priority=1,\n            block_on_violation=False,\n            anonymize_sensitive_data=True\n        )\n\n        # HIPAA policy\n        hipaa_policy = CompliancePolicy(\n            name=\"hipaa-policy\",\n            description=\"HIPAA compliance policy\",\n            enable_pii_detection=True,\n            enable_phi_detection=True,\n            max_risk_score=0.6,\n            priority=10,\n            block_on_violation=True,\n            jurisdictions=[\"HIPAA\"],\n            phi_detection_level=\"strict\",\n            anonymize_audit_logs=True,\n            data_categories=[\"healthcare\", \"medical\"]\n        )\n\n        # PCI DSS policy\n        pci_policy = CompliancePolicy(\n            name=\"pci-policy\",\n            description=\"PCI DSS compliance policy\",\n            enable_pii_detection=True,\n            enable_pci_detection=True,\n            max_risk_score=0.7,\n            priority=8,\n            block_on_violation=True,\n            jurisdictions=[\"PCI-DSS\"],\n            pci_detection_level=\"strict\",\n            data_categories=[\"financial\", \"payment\"]\n        )\n\n        # GDPR policy\n        gdpr_policy = CompliancePolicy(\n            name=\"gdpr-policy\",\n            description=\"GDPR compliance policy\",\n            enable_pii_detection=True,\n            max_risk_score=0.8,\n            priority=5,\n            block_on_violation=False,\n            anonymize_sensitive_data=True,\n            jurisdictions=[\"GDPR\"],\n            pii_detection_level=\"moderate\",\n            regions=[\"EU\"]\n        )\n\n        return [base_policy, hipaa_policy, pci_policy, gdpr_policy]\n\n    def process_request(self, messages: List[Dict], metadata: Dict = None, **kwargs) -&gt; Dict:\n        \"\"\"Process a request with appropriate compliance policy.\n\n        Args:\n            messages: List of message objects\n            metadata: Optional metadata for policy selection\n            **kwargs: Additional parameters for the API call\n\n        Returns:\n            Dict containing response or error information\n        \"\"\"\n        metadata = metadata or {}\n        self.logger.info(\"Processing request with metadata: %s\", metadata)\n\n        try:\n            # Make request with metadata for policy selection\n            response = self.client.chat.completions.create(\n                model=kwargs.get(\"model\", \"gpt-4o\"),\n                messages=messages,\n                metadata=metadata,\n                **kwargs\n            )\n\n            # Log success\n            self.logger.info(\n                \"Request processed successfully. Model: %s, Tokens: %d\",\n                response.model,\n                response.usage.total_tokens\n            )\n\n            return {\n                \"success\": True,\n                \"content\": response.choices[0].message.content,\n                \"model\": response.model,\n                \"tokens\": response.usage.total_tokens\n            }\n\n        except ComplianceViolationError as e:\n            # Log compliance violation\n            self.logger.warning(\n                \"Compliance violation: %s, Risk score: %.2f\",\n                e.message,\n                e.risk_score\n            )\n            self.logger.warning(\n                \"Violations: %s\",\n                [v.type for v in e.violations]\n            )\n\n            return {\n                \"success\": False,\n                \"error_type\": \"compliance_violation\",\n                \"message\": e.message,\n                \"violations\": [v.type for v in e.violations],\n                \"risk_score\": e.risk_score\n            }\n\n        except Exception as e:\n            # Log unexpected errors\n            self.logger.error(\"Unexpected error: %s\", str(e))\n\n            return {\n                \"success\": False,\n                \"error_type\": \"unexpected_error\",\n                \"message\": str(e)\n            }\n\n# Usage example\ndef main():\n    \"\"\"Demo of the compliance manager.\"\"\"\n    # Get API keys from environment\n    api_keys = {\n        \"sentinel_api_key\": os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        \"openai_api_key\": os.getenv(\"OPENAI_API_KEY\")\n    }\n\n    # Initialize compliance manager\n    manager = ComplianceManager(api_keys)\n\n    # Test scenarios\n    scenarios = [\n        {\n            \"name\": \"General request\",\n            \"messages\": [{\"role\": \"user\", \"content\": \"What are the best practices for data security?\"}],\n            \"metadata\": {\"data_type\": \"general\"},\n        },\n        {\n            \"name\": \"Healthcare request\",\n            \"messages\": [{\"role\": \"user\", \"content\": \"Summarize treatment options for diabetes\"}],\n            \"metadata\": {\"data_categories\": [\"healthcare\"]},\n        },\n        {\n            \"name\": \"Financial request\",\n            \"messages\": [{\"role\": \"user\", \"content\": \"Explain how credit card processing works\"}],\n            \"metadata\": {\"data_categories\": [\"financial\"]},\n        },\n        {\n            \"name\": \"EU user request\",\n            \"messages\": [{\"role\": \"user\", \"content\": \"How does GDPR affect data storage?\"}],\n            \"metadata\": {\"regions\": [\"EU\"]},\n        }\n    ]\n\n    # Process each scenario\n    for scenario in scenarios:\n        print(f\"\\nScenario: {scenario['name']}\")\n        result = manager.process_request(\n            scenario[\"messages\"],\n            scenario[\"metadata\"]\n        )\n\n        if result[\"success\"]:\n            print(f\"\u2705 Success! Using model: {result['model']}\")\n            print(f\"Response: {result['content'][:100]}...\")\n        else:\n            print(f\"\u274c Error: {result['message']}\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorials/compliance-setup/#compliance-integration-with-existing-systems","title":"Compliance Integration with Existing Systems","text":"<p>To integrate DeepSentinel's compliance features with your existing systems:</p>"},{"location":"tutorials/compliance-setup/#logging-to-siem-systems","title":"Logging to SIEM Systems","text":"<pre><code>from deepsentinel import SentinelClient, AuditConfig\n\n# Configure integration with your SIEM system\naudit_config = AuditConfig(\n    enabled=True,\n    destination=\"webhook\",  # Send to external system\n    webhook_url=\"https://your-siem-system.com/api/logs\",\n    webhook_headers={\n        \"Authorization\": \"Bearer your-token\",\n        \"Content-Type\": \"application/json\"\n    },\n    log_format=\"json\",\n    batch_size=10,  # Send logs in batches\n    include_policy_decisions=True\n)\n\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    audit_config=audit_config\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#dlp-integration","title":"DLP Integration","text":"<pre><code># Example of integrating with existing DLP systems\ndlp_patterns = fetch_patterns_from_dlp_system()  # Your function to get patterns\n\n# Create policy with patterns from DLP\ndlp_policy = CompliancePolicy(\n    name=\"dlp-integration-policy\",\n    enable_pii_detection=True,\n    custom_patterns=dlp_patterns,\n    max_risk_score=0.8,\n    block_on_violation=True\n)\n</code></pre>"},{"location":"tutorials/compliance-setup/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've set up comprehensive compliance policies with DeepSentinel. Here are some next steps:</p>"},{"location":"tutorials/compliance-setup/#advanced-compliance-features","title":"Advanced Compliance Features","text":"<ol> <li>Custom Detection Engines - Create specialized detectors for your industry</li> <li>Real-time Policy Updates - Implement dynamic policy updates</li> <li>Compliance Reporting - Set up periodic compliance reports</li> </ol>"},{"location":"tutorials/compliance-setup/#next-topics-to-explore","title":"Next Topics to Explore","text":"<ul> <li>Error Handling - Gracefully handle compliance violations</li> <li>Best Practices - Compliance best practices</li> <li>Performance Optimization - Optimize compliance checking</li> </ul>"},{"location":"tutorials/compliance-setup/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/compliance-setup/#false-positives","title":"False Positives","text":"<p><pre><code>ComplianceViolationError: Detected SSN in content, but it was actually a product code\n</code></pre> Solution: Add the pattern to an allowlist or reduce detection sensitivity</p>"},{"location":"tutorials/compliance-setup/#policy-selection-issues","title":"Policy Selection Issues","text":"<p><pre><code>Warning: No policy matched metadata {\"department\": \"legal\"}, using default policy\n</code></pre> Solution: Ensure you've configured policies for all relevant departments/categories</p>"},{"location":"tutorials/compliance-setup/#performance-impact","title":"Performance Impact","text":"<p><pre><code>High latency detected in compliance checking: 250ms average\n</code></pre> Solution: See the Performance Guide for optimization tips</p>"},{"location":"tutorials/compliance-setup/#getting-help","title":"Getting Help","text":"<ul> <li>Compliance Concepts - Learn more about compliance concepts</li> <li>API Reference - Complete compliance API documentation</li> <li>GitHub Issues - Report bugs or request features</li> </ul> <p>Next Tutorial: Error Handling \u2192</p>"},{"location":"tutorials/error-handling/","title":"Error Handling Tutorial","text":"<p>This tutorial shows you how to build robust applications with DeepSentinel by implementing comprehensive error handling patterns for various types of failures including compliance violations, provider errors, and network issues.</p>"},{"location":"tutorials/error-handling/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have: - Implemented comprehensive error handling for all DeepSentinel error types - Created recovery strategies for different failure scenarios - Built resilient applications with proper fallback mechanisms - Set up monitoring and alerting for error conditions</p> <p>Time required: 25 minutes</p>"},{"location":"tutorials/error-handling/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>DeepSentinel SDK installed (<code>pip install deepsentinel-sdk</code>)</li> <li>OpenAI or Anthropic API key</li> <li>Basic understanding of DeepSentinel basics</li> </ul>"},{"location":"tutorials/error-handling/#step-1-understanding-deepsentinel-error-types","title":"Step 1: Understanding DeepSentinel Error Types","text":"<p>DeepSentinel provides specific error types for different failure scenarios:</p> <pre><code>from deepsentinel import (\n    SentinelClient,\n    ComplianceViolationError,\n    ProviderError,\n    AuthenticationError,\n    RateLimitError,\n    InvalidRequestError,\n    NetworkError,\n    TimeoutError\n)\n</code></pre> <p>Let's understand each error type:</p> <ul> <li><code>ComplianceViolationError</code> - Sensitive data detected in request/response</li> <li><code>AuthenticationError</code> - Invalid API keys or authentication failures</li> <li><code>ProviderError</code> - LLM provider-specific errors (OpenAI, Anthropic, etc.)</li> <li><code>RateLimitError</code> - Rate limits exceeded for provider or DeepSentinel</li> <li><code>InvalidRequestError</code> - Malformed requests or invalid parameters</li> <li><code>NetworkError</code> - Network connectivity issues</li> <li><code>TimeoutError</code> - Request timeouts</li> </ul>"},{"location":"tutorials/error-handling/#step-2-basic-error-handling-function","title":"Step 2: Basic Error Handling Function","text":"<p>Let's create a comprehensive error handling function:</p> <pre><code>from deepsentinel import (\n    SentinelClient,\n    ComplianceViolationError,\n    ProviderError,\n    AuthenticationError,\n    RateLimitError,\n    InvalidRequestError,\n    NetworkError,\n    TimeoutError\n)\nimport os\nimport time\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef safe_completion(client, messages, model=\"gpt-4o\", **kwargs):\n    \"\"\"\n    Make a chat completion request with comprehensive error handling.\n\n    Args:\n        client: The SentinelClient instance\n        messages: List of message objects\n        model: Model to use for completion\n        **kwargs: Additional parameters to pass to the API\n\n    Returns:\n        Dict with success status, data, or error information\n    \"\"\"\n    try:\n        # Attempt to create a chat completion\n        response = client.chat.completions.create(\n            model=model,\n            messages=messages,\n            **kwargs\n        )\n\n        logger.info(f\"Request successful. Model: {response.model}, Tokens: {response.usage.total_tokens}\")\n\n        return {\n            \"success\": True,\n            \"data\": response,\n            \"content\": response.choices[0].message.content,\n            \"model\": response.model,\n            \"tokens\": response.usage.total_tokens\n        }\n\n    except ComplianceViolationError as e:\n        # Handle compliance violations (PII, PCI, PHI, etc.)\n        logger.warning(f\"Compliance violation: {e.message}, Risk score: {e.risk_score}\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"compliance_violation\",\n            \"message\": f\"Request blocked due to sensitive data: {e.message}\",\n            \"violations\": [v.type for v in e.violations],\n            \"risk_score\": e.risk_score,\n            \"recoverable\": False,  # Usually not recoverable without user intervention\n            \"suggested_action\": \"Remove sensitive information and try again\"\n        }\n\n    except AuthenticationError as e:\n        # Handle authentication issues (invalid API keys)\n        logger.error(f\"Authentication error: {e.message}\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"authentication\",\n            \"message\": f\"Authentication failed: {e.message}\",\n            \"recoverable\": False,  # Requires fixing API keys\n            \"suggested_action\": \"Verify your API keys are correct and valid\"\n        }\n\n    except RateLimitError as e:\n        # Handle rate limiting (too many requests)\n        logger.warning(f\"Rate limit exceeded: {e.message}, Retry after: {e.retry_after}s\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"rate_limit\",\n            \"message\": f\"Rate limit exceeded: {e.message}\",\n            \"retry_after\": e.retry_after,\n            \"recoverable\": True,  # Can retry after waiting\n            \"suggested_action\": f\"Wait {e.retry_after} seconds and retry\"\n        }\n\n    except ProviderError as e:\n        # Handle provider-specific errors (OpenAI, Anthropic)\n        logger.error(f\"Provider error ({e.provider}): {e.message}, Status: {e.status_code}\")\n\n        # Determine if error is temporary or permanent\n        recoverable = e.status_code in [429, 500, 502, 503, 504]\n\n        return {\n            \"success\": False,\n            \"error_type\": \"provider\",\n            \"message\": f\"Provider error ({e.provider}): {e.message}\",\n            \"provider\": e.provider,\n            \"status_code\": e.status_code,\n            \"recoverable\": recoverable,\n            \"suggested_action\": \"Try again later\" if recoverable else \"Check request parameters\"\n        }\n\n    except InvalidRequestError as e:\n        # Handle malformed requests\n        logger.error(f\"Invalid request: {e.message}\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"invalid_request\",\n            \"message\": f\"Invalid request: {e.message}\",\n            \"recoverable\": False,  # Requires fixing the request\n            \"suggested_action\": \"Check your request parameters and format\"\n        }\n\n    except (NetworkError, TimeoutError) as e:\n        # Handle network and timeout issues\n        logger.warning(f\"Network/timeout error: {e.message}\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"network_timeout\",\n            \"message\": f\"Network/timeout error: {e.message}\",\n            \"recoverable\": True,  # Usually temporary\n            \"suggested_action\": \"Check network connection and retry\"\n        }\n\n    except Exception as e:\n        # Catch any other unexpected errors\n        logger.error(f\"Unexpected error: {str(e)}\")\n\n        return {\n            \"success\": False,\n            \"error_type\": \"unexpected\",\n            \"message\": f\"Unexpected error: {str(e)}\",\n            \"recoverable\": True,  # Unknown, so assume it might be temporary\n            \"suggested_action\": \"Try again or contact support\"\n        }\n</code></pre>"},{"location":"tutorials/error-handling/#step-3-implementing-retry-logic","title":"Step 3: Implementing Retry Logic","text":"<p>For recoverable errors, implement intelligent retry logic:</p> <pre><code>import time\nimport random\nfrom typing import Optional, Callable\n\ndef exponential_backoff(attempt: int, base_delay: float = 1.0, max_delay: float = 60.0) -&gt; float:\n    \"\"\"Calculate exponential backoff delay.\"\"\"\n    delay = base_delay * (2 ** attempt)\n    # Add jitter to prevent thundering herd\n    jitter = random.uniform(0.1, 0.5) * delay\n    return min(delay + jitter, max_delay)\n\ndef retry_with_backoff(\n    func: Callable,\n    max_retries: int = 3,\n    backoff_strategy: str = \"exponential\",\n    base_delay: float = 1.0,\n    recoverable_errors: Optional[list] = None\n):\n    \"\"\"\n    Retry a function with backoff strategy.\n\n    Args:\n        func: Function to retry\n        max_retries: Maximum number of retry attempts\n        backoff_strategy: \"exponential\", \"linear\", or \"fixed\"\n        base_delay: Base delay in seconds\n        recoverable_errors: List of recoverable error types\n    \"\"\"\n    if recoverable_errors is None:\n        recoverable_errors = [\"rate_limit\", \"network_timeout\", \"provider\"]\n\n    for attempt in range(max_retries + 1):\n        result = func()\n\n        # If successful, return immediately\n        if result[\"success\"]:\n            if attempt &gt; 0:\n                logger.info(f\"Request succeeded after {attempt} retries\")\n            return result\n\n        # If not recoverable, don't retry\n        if not result.get(\"recoverable\", False):\n            logger.info(f\"Error not recoverable: {result['error_type']}\")\n            return result\n\n        # If we've exhausted retries, return the last error\n        if attempt &gt;= max_retries:\n            logger.error(f\"Max retries ({max_retries}) exceeded\")\n            return result\n\n        # Calculate delay for next attempt\n        if backoff_strategy == \"exponential\":\n            delay = exponential_backoff(attempt, base_delay)\n        elif backoff_strategy == \"linear\":\n            delay = base_delay * (attempt + 1)\n        else:  # fixed\n            delay = base_delay\n\n        # Special handling for rate limits\n        if result[\"error_type\"] == \"rate_limit\" and \"retry_after\" in result:\n            delay = max(delay, result[\"retry_after\"])\n\n        logger.info(f\"Retry attempt {attempt + 1} in {delay:.2f} seconds...\")\n        time.sleep(delay)\n\n    return result\n\n# Usage example\ndef make_request_with_retry():\n    \"\"\"Make a request with automatic retry logic.\"\"\"\n    client = SentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    def _request():\n        return safe_completion(\n            client,\n            [{\"role\": \"user\", \"content\": \"What are best practices for error handling?\"}],\n            model=\"gpt-4o\"\n        )\n\n    return retry_with_backoff(\n        _request,\n        max_retries=3,\n        backoff_strategy=\"exponential\",\n        base_delay=1.0\n    )\n\n# Test the retry logic\nresult = make_request_with_retry()\nif result[\"success\"]:\n    print(f\"Success: {result['content'][:100]}...\")\nelse:\n    print(f\"Failed after retries: {result['message']}\")\n</code></pre>"},{"location":"tutorials/error-handling/#step-4-provider-failover-implementation","title":"Step 4: Provider Failover Implementation","text":"<p>When using multiple providers, implement automatic failover:</p> <pre><code>from deepsentinel import SentinelClient\nimport os\n\nclass MultiProviderClient:\n    \"\"\"Client with automatic provider failover.\"\"\"\n\n    def __init__(self, api_keys: dict, provider_priority: list = None):\n        \"\"\"\n        Initialize client with multiple providers.\n\n        Args:\n            api_keys: Dict with API keys for different services\n            provider_priority: List of providers in order of preference\n        \"\"\"\n        self.client = SentinelClient(**api_keys)\n        self.provider_priority = provider_priority or [\"openai\", \"anthropic\"]\n        self.provider_models = {\n            \"openai\": \"gpt-4o\",\n            \"anthropic\": \"claude-3-opus-20240229\"\n        }\n\n    def completion_with_failover(self, messages, **kwargs):\n        \"\"\"Make completion with automatic provider failover.\"\"\"\n        last_error = None\n\n        for provider in self.provider_priority:\n            model = self.provider_models.get(provider)\n            if not model:\n                continue\n\n            logger.info(f\"Trying provider: {provider}\")\n\n            result = safe_completion(\n                self.client,\n                messages,\n                model=model,\n                provider=provider,\n                **kwargs\n            )\n\n            # If successful, return immediately\n            if result[\"success\"]:\n                logger.info(f\"Request successful with provider: {provider}\")\n                return result\n\n            # Store the error for potential return\n            last_error = result\n\n            # If it's a non-recoverable error specific to the request\n            # (not the provider), don't try other providers\n            if result[\"error_type\"] in [\"compliance_violation\", \"invalid_request\"]:\n                logger.info(f\"Non-recoverable error, not trying other providers: {result['error_type']}\")\n                break\n\n            # If it's a provider-specific error, try the next provider\n            if result[\"error_type\"] in [\"authentication\", \"provider\", \"rate_limit\"]:\n                logger.warning(f\"Provider {provider} failed: {result['message']}\")\n                continue\n\n        # All providers failed\n        logger.error(\"All providers failed\")\n        return last_error or {\"success\": False, \"error_type\": \"all_providers_failed\", \"message\": \"All providers failed\"}\n\n# Usage example\ndef test_provider_failover():\n    \"\"\"Test provider failover functionality.\"\"\"\n    api_keys = {\n        \"sentinel_api_key\": os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        \"openai_api_key\": os.getenv(\"OPENAI_API_KEY\"),\n        \"anthropic_api_key\": os.getenv(\"ANTHROPIC_API_KEY\")\n    }\n\n    multi_client = MultiProviderClient(api_keys, provider_priority=[\"openai\", \"anthropic\"])\n\n    # Test with normal request\n    result = multi_client.completion_with_failover([\n        {\"role\": \"user\", \"content\": \"Explain quantum computing in simple terms.\"}\n    ])\n\n    if result[\"success\"]:\n        print(f\"\u2705 Success with provider failover\")\n        print(f\"Response: {result['content'][:100]}...\")\n    else:\n        print(f\"\u274c All providers failed: {result['message']}\")\n\ntest_provider_failover()\n</code></pre>"},{"location":"tutorials/error-handling/#step-5-compliance-violation-recovery","title":"Step 5: Compliance Violation Recovery","text":"<p>Handle compliance violations gracefully by offering recovery options:</p> <pre><code>from deepsentinel import ComplianceViolationError\nimport re\n\nclass ComplianceRecoveryHandler:\n    \"\"\"Handler for compliance violation recovery.\"\"\"\n\n    def __init__(self, client):\n        self.client = client\n\n    def sanitize_input(self, text: str, violations: list) -&gt; str:\n        \"\"\"\n        Attempt to sanitize input by removing detected sensitive data.\n\n        Args:\n            text: Original text with violations\n            violations: List of compliance violations\n\n        Returns:\n            Sanitized text\n        \"\"\"\n        sanitized = text\n\n        for violation in violations:\n            violation_type = violation.type\n\n            if violation_type == \"ssn\":\n                # Remove SSN patterns\n                sanitized = re.sub(r'\\b\\d{3}-\\d{2}-\\d{4}\\b', '[SSN REMOVED]', sanitized)\n                sanitized = re.sub(r'\\b\\d{9}\\b', '[SSN REMOVED]', sanitized)\n\n            elif violation_type == \"credit_card\":\n                # Remove credit card patterns\n                sanitized = re.sub(r'\\b(?:\\d{4}[- ]){3}\\d{4}\\b', '[CARD REMOVED]', sanitized)\n                sanitized = re.sub(r'\\b\\d{16}\\b', '[CARD REMOVED]', sanitized)\n\n            elif violation_type == \"email\":\n                # Remove email addresses\n                sanitized = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '[EMAIL REMOVED]', sanitized)\n\n            elif violation_type == \"phone\":\n                # Remove phone numbers\n                sanitized = re.sub(r'\\b\\d{3}-\\d{3}-\\d{4}\\b', '[PHONE REMOVED]', sanitized)\n                sanitized = re.sub(r'\\(\\d{3}\\)\\s*\\d{3}-\\d{4}', '[PHONE REMOVED]', sanitized)\n\n        return sanitized\n\n    def handle_compliance_violation(self, messages, violation_error):\n        \"\"\"\n        Handle compliance violations with recovery options.\n\n        Args:\n            messages: Original messages that caused violation\n            violation_error: ComplianceViolationError instance\n\n        Returns:\n            Dict with recovery options and results\n        \"\"\"\n        violations = violation_error.violations\n        risk_score = violation_error.risk_score\n\n        print(f\"\ud83d\udea8 Compliance violation detected!\")\n        print(f\"Risk score: {risk_score:.2f}\")\n        print(f\"Violations: {[v.type for v in violations]}\")\n\n        # Offer recovery options\n        print(\"\\nRecovery options:\")\n        print(\"1. Sanitize input automatically\")\n        print(\"2. Edit input manually\")\n        print(\"3. Cancel request\")\n\n        choice = input(\"Choose option (1-3): \").strip()\n\n        if choice == \"1\":\n            # Automatic sanitization\n            original_content = messages[-1][\"content\"]  # Assuming last message has the violation\n            sanitized_content = self.sanitize_input(original_content, violations)\n\n            print(f\"\\nOriginal: {original_content}\")\n            print(f\"Sanitized: {sanitized_content}\")\n\n            # Create new messages with sanitized content\n            new_messages = messages[:-1] + [{\"role\": \"user\", \"content\": sanitized_content}]\n\n            # Retry with sanitized input\n            result = safe_completion(self.client, new_messages)\n\n            return {\n                \"recovery_method\": \"automatic_sanitization\",\n                \"result\": result,\n                \"sanitized_input\": sanitized_content\n            }\n\n        elif choice == \"2\":\n            # Manual editing\n            original_content = messages[-1][\"content\"]\n            print(f\"\\nOriginal content: {original_content}\")\n            new_content = input(\"Enter corrected content: \").strip()\n\n            if new_content:\n                new_messages = messages[:-1] + [{\"role\": \"user\", \"content\": new_content}]\n                result = safe_completion(self.client, new_messages)\n\n                return {\n                    \"recovery_method\": \"manual_edit\",\n                    \"result\": result,\n                    \"edited_input\": new_content\n                }\n            else:\n                return {\n                    \"recovery_method\": \"cancelled\",\n                    \"result\": {\"success\": False, \"message\": \"No input provided\"}\n                }\n\n        else:\n            return {\n                \"recovery_method\": \"cancelled\",\n                \"result\": {\"success\": False, \"message\": \"Request cancelled by user\"}\n            }\n\n# Usage example\ndef interactive_compliance_recovery():\n    \"\"\"Interactive example of compliance violation recovery.\"\"\"\n    client = SentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    recovery_handler = ComplianceRecoveryHandler(client)\n\n    # Test with content that will trigger compliance violation\n    test_messages = [\n        {\"role\": \"user\", \"content\": \"My SSN is 123-45-6789 and email is john@example.com\"}\n    ]\n\n    try:\n        result = safe_completion(client, test_messages)\n\n        if result[\"success\"]:\n            print(\"\u2705 Request successful\")\n            print(f\"Response: {result['content'][:100]}...\")\n\n    except ComplianceViolationError as e:\n        print(\"Compliance violation occurred, attempting recovery...\")\n        recovery_result = recovery_handler.handle_compliance_violation(test_messages, e)\n\n        if recovery_result[\"result\"][\"success\"]:\n            print(f\"\u2705 Recovery successful using {recovery_result['recovery_method']}\")\n            print(f\"Response: {recovery_result['result']['content'][:100]}...\")\n        else:\n            print(f\"\u274c Recovery failed: {recovery_result['result']['message']}\")\n\n# Run the interactive example\n# interactive_compliance_recovery()\n</code></pre>"},{"location":"tutorials/error-handling/#step-6-monitoring-and-alerting","title":"Step 6: Monitoring and Alerting","text":"<p>Set up comprehensive monitoring for error conditions:</p> <pre><code>import logging\nimport json\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict, Counter\nfrom typing import Dict, List\n\nclass ErrorMonitor:\n    \"\"\"Monitor and track errors for alerting and analysis.\"\"\"\n\n    def __init__(self, alert_thresholds: Dict = None):\n        \"\"\"\n        Initialize error monitor.\n\n        Args:\n            alert_thresholds: Dict with error type -&gt; threshold mappings\n        \"\"\"\n        self.error_history = []\n        self.error_counts = Counter()\n        self.alert_thresholds = alert_thresholds or {\n            \"compliance_violation\": 10,  # Alert after 10 violations in window\n            \"rate_limit\": 5,\n            \"provider\": 3,\n            \"authentication\": 1,  # Alert immediately for auth errors\n            \"network_timeout\": 15\n        }\n        self.alert_window = timedelta(minutes=10)  # 10-minute window\n\n        # Set up logging\n        self.logger = logging.getLogger(\"error_monitor\")\n        handler = logging.FileHandler(\"error_monitor.log\")\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        self.logger.addHandler(handler)\n        self.logger.setLevel(logging.INFO)\n\n    def record_error(self, error_result: Dict):\n        \"\"\"Record an error for monitoring.\"\"\"\n        if error_result.get(\"success\"):\n            return  # Not an error\n\n        error_record = {\n            \"timestamp\": datetime.now(),\n            \"error_type\": error_result.get(\"error_type\"),\n            \"message\": error_result.get(\"message\"),\n            \"recoverable\": error_result.get(\"recoverable\"),\n            \"provider\": error_result.get(\"provider\"),\n            \"status_code\": error_result.get(\"status_code\")\n        }\n\n        self.error_history.append(error_record)\n        self.error_counts[error_record[\"error_type\"]] += 1\n\n        # Log the error\n        self.logger.error(f\"Error recorded: {json.dumps(error_record, default=str)}\")\n\n        # Check if we need to send alerts\n        self._check_alerts(error_record)\n\n    def _check_alerts(self, error_record: Dict):\n        \"\"\"Check if error thresholds are exceeded and send alerts.\"\"\"\n        error_type = error_record[\"error_type\"]\n        threshold = self.alert_thresholds.get(error_type, float('inf'))\n\n        # Count errors of this type in the alert window\n        cutoff_time = datetime.now() - self.alert_window\n        recent_errors = [\n            e for e in self.error_history \n            if e[\"timestamp\"] &gt; cutoff_time and e[\"error_type\"] == error_type\n        ]\n\n        if len(recent_errors) &gt;= threshold:\n            self._send_alert(error_type, len(recent_errors), recent_errors)\n\n    def _send_alert(self, error_type: str, count: int, recent_errors: List):\n        \"\"\"Send alert for error threshold breach.\"\"\"\n        alert_message = f\"\ud83d\udea8 ALERT: {error_type} errors exceeded threshold\"\n        alert_details = f\"Count: {count} in last {self.alert_window.total_seconds()/60:.0f} minutes\"\n\n        # Log alert\n        self.logger.critical(f\"{alert_message} - {alert_details}\")\n\n        # In a real implementation, you would send this to:\n        # - Slack/Teams webhook\n        # - Email notification service\n        # - PagerDuty or similar alerting system\n        # - Monitoring dashboard\n\n        print(f\"\\n{alert_message}\")\n        print(f\"{alert_details}\")\n        print(\"Recent errors:\")\n        for error in recent_errors[-5:]:  # Show last 5 errors\n            print(f\"  - {error['timestamp']}: {error['message']}\")\n\n    def get_error_summary(self, hours: int = 24) -&gt; Dict:\n        \"\"\"Get error summary for the specified time window.\"\"\"\n        cutoff_time = datetime.now() - timedelta(hours=hours)\n        recent_errors = [e for e in self.error_history if e[\"timestamp\"] &gt; cutoff_time]\n\n        error_summary = defaultdict(int)\n        provider_summary = defaultdict(int)\n        recoverable_summary = {\"recoverable\": 0, \"non_recoverable\": 0}\n\n        for error in recent_errors:\n            error_summary[error[\"error_type\"]] += 1\n            if error.get(\"provider\"):\n                provider_summary[error[\"provider\"]] += 1\n\n            if error.get(\"recoverable\"):\n                recoverable_summary[\"recoverable\"] += 1\n            else:\n                recoverable_summary[\"non_recoverable\"] += 1\n\n        return {\n            \"time_window_hours\": hours,\n            \"total_errors\": len(recent_errors),\n            \"error_types\": dict(error_summary),\n            \"provider_errors\": dict(provider_summary),\n            \"recoverability\": recoverable_summary,\n            \"error_rate\": len(recent_errors) / max(1, hours)  # errors per hour\n        }\n\n# Integration with our safe_completion function\ndef monitored_completion(client, messages, monitor: ErrorMonitor, **kwargs):\n    \"\"\"Make completion with error monitoring.\"\"\"\n    result = safe_completion(client, messages, **kwargs)\n\n    # Record error if unsuccessful\n    if not result[\"success\"]:\n        monitor.record_error(result)\n\n    return result\n\n# Usage example\ndef test_error_monitoring():\n    \"\"\"Test error monitoring functionality.\"\"\"\n    client = SentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    # Set up monitoring with custom thresholds\n    monitor = ErrorMonitor(alert_thresholds={\n        \"compliance_violation\": 2,  # Alert after 2 violations for testing\n        \"rate_limit\": 3\n    })\n\n    # Test various scenarios\n    test_scenarios = [\n        # Normal request\n        [{\"role\": \"user\", \"content\": \"Hello, how are you?\"}],\n\n        # Compliance violation\n        [{\"role\": \"user\", \"content\": \"My SSN is 123-45-6789\"}],\n\n        # Another compliance violation (should trigger alert)\n        [{\"role\": \"user\", \"content\": \"Credit card: 4111-1111-1111-1111\"}],\n\n        # Invalid model (provider error)\n        [{\"role\": \"user\", \"content\": \"Hello\"}],  # We'll use invalid model for this\n    ]\n\n    for i, messages in enumerate(test_scenarios):\n        print(f\"\\nTest scenario {i+1}:\")\n\n        # Use invalid model for the last test\n        model = \"non-existent-model\" if i == 3 else \"gpt-4o\"\n\n        result = monitored_completion(client, messages, monitor, model=model)\n\n        if result[\"success\"]:\n            print(f\"\u2705 Success: {result['content'][:50]}...\")\n        else:\n            print(f\"\u274c Error: {result['message']}\")\n\n    # Print error summary\n    print(\"\\n\" + \"=\"*50)\n    print(\"ERROR SUMMARY\")\n    print(\"=\"*50)\n    summary = monitor.get_error_summary(1)  # Last 1 hour\n    print(f\"Total errors in last hour: {summary['total_errors']}\")\n    print(f\"Error types: {summary['error_types']}\")\n    print(f\"Error rate: {summary['error_rate']:.2f} errors/hour\")\n\n# Run the monitoring test\n# test_error_monitoring()\n</code></pre>"},{"location":"tutorials/error-handling/#step-7-circuit-breaker-pattern","title":"Step 7: Circuit Breaker Pattern","text":"<p>Implement a circuit breaker to prevent cascading failures:</p> <pre><code>import time\nfrom enum import Enum\nfrom typing import Callable, Any\n\nclass CircuitState(Enum):\n    CLOSED = \"closed\"      # Normal operation\n    OPEN = \"open\"          # Circuit breaker is open, failing fast\n    HALF_OPEN = \"half_open\"  # Testing if service has recovered\n\nclass CircuitBreaker:\n    \"\"\"Circuit breaker implementation for protecting against cascading failures.\"\"\"\n\n    def __init__(\n        self, \n        failure_threshold: int = 5,\n        timeout: float = 60.0,\n        expected_exception: type = Exception\n    ):\n        \"\"\"\n        Initialize circuit breaker.\n\n        Args:\n            failure_threshold: Number of failures before opening circuit\n            timeout: Time to wait before trying again (seconds)\n            expected_exception: Exception type that counts as failure\n        \"\"\"\n        self.failure_threshold = failure_threshold\n        self.timeout = timeout\n        self.expected_exception = expected_exception\n\n        self.failure_count = 0\n        self.last_failure_time = None\n        self.state = CircuitState.CLOSED\n\n    def call(self, func: Callable, *args, **kwargs) -&gt; Any:\n        \"\"\"\n        Call function through circuit breaker.\n\n        Args:\n            func: Function to call\n            *args, **kwargs: Arguments for the function\n\n        Returns:\n            Function result or raises exception\n        \"\"\"\n        if self.state == CircuitState.OPEN:\n            if self._should_attempt_reset():\n                self.state = CircuitState.HALF_OPEN\n            else:\n                raise Exception(\"Circuit breaker is OPEN\")\n\n        try:\n            result = func(*args, **kwargs)\n            self._on_success()\n            return result\n\n        except self.expected_exception as e:\n            self._on_failure()\n            raise e\n\n    def _should_attempt_reset(self) -&gt; bool:\n        \"\"\"Check if enough time has passed to attempt reset.\"\"\"\n        return (\n            self.last_failure_time and \n            time.time() - self.last_failure_time &gt;= self.timeout\n        )\n\n    def _on_success(self):\n        \"\"\"Handle successful call.\"\"\"\n        self.failure_count = 0\n        self.state = CircuitState.CLOSED\n\n    def _on_failure(self):\n        \"\"\"Handle failed call.\"\"\"\n        self.failure_count += 1\n        self.last_failure_time = time.time()\n\n        if self.failure_count &gt;= self.failure_threshold:\n            self.state = CircuitState.OPEN\n\n# Integration with DeepSentinel\nclass ResilientSentinelClient:\n    \"\"\"DeepSentinel client with circuit breaker protection.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize client with circuit breaker.\"\"\"\n        self.client = SentinelClient(**kwargs)\n        self.circuit_breaker = CircuitBreaker(\n            failure_threshold=3,\n            timeout=30.0,\n            expected_exception=Exception\n        )\n        self.logger = logging.getLogger(\"resilient_client\")\n\n    def completion(self, messages, **kwargs):\n        \"\"\"Make completion request through circuit breaker.\"\"\"\n        def _make_request():\n            result = safe_completion(self.client, messages, **kwargs)\n\n            # Treat non-recoverable errors as circuit breaker failures\n            if not result[\"success\"] and not result.get(\"recoverable\", True):\n                raise Exception(f\"Non-recoverable error: {result['message']}\")\n\n            return result\n\n        try:\n            return self.circuit_breaker.call(_make_request)\n        except Exception as e:\n            self.logger.error(f\"Circuit breaker prevented request: {str(e)}\")\n            return {\n                \"success\": False,\n                \"error_type\": \"circuit_breaker\",\n                \"message\": f\"Circuit breaker is {self.circuit_breaker.state.value}\",\n                \"circuit_state\": self.circuit_breaker.state.value\n            }\n\n# Usage example\ndef test_circuit_breaker():\n    \"\"\"Test circuit breaker functionality.\"\"\"\n    client = ResilientSentinelClient(\n        sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n    )\n\n    # Simulate multiple failed requests to trigger circuit breaker\n    for i in range(6):\n        print(f\"\\nRequest {i+1}:\")\n\n        # Use invalid model to simulate failures\n        result = client.completion(\n            [{\"role\": \"user\", \"content\": \"Hello\"}],\n            model=\"non-existent-model\"\n        )\n\n        print(f\"Success: {result['success']}\")\n        print(f\"Error type: {result.get('error_type')}\")\n        print(f\"Circuit state: {result.get('circuit_state', 'N/A')}\")\n\n        if result.get(\"circuit_state\") == \"open\":\n            print(\"\ud83d\udd34 Circuit breaker is now OPEN\")\n            break\n\n        time.sleep(1)  # Brief delay between requests\n\n# Run circuit breaker test\n# test_circuit_breaker()\n</code></pre>"},{"location":"tutorials/error-handling/#step-8-complete-error-handling-application","title":"Step 8: Complete Error Handling Application","text":"<p>Let's put everything together in a comprehensive error handling application:</p> <pre><code>import os\nimport time\nimport logging\nfrom typing import Dict, List, Optional\nfrom deepsentinel import SentinelClient, ComplianceViolationError\n\nclass RobustDeepSentinelApp:\n    \"\"\"Complete application with comprehensive error handling.\"\"\"\n\n    def __init__(self, api_keys: Dict[str, str]):\n        \"\"\"Initialize the robust application.\"\"\"\n        # Set up logging\n        logging.basicConfig(level=logging.INFO)\n        self.logger = logging.getLogger(\"robust_app\")\n\n        # Initialize components\n        self.client = SentinelClient(**api_keys)\n        self.error_monitor = ErrorMonitor()\n        self.circuit_breaker = CircuitBreaker(failure_threshold=3, timeout=30.0)\n\n        # Statistics\n        self.request_count = 0\n        self.success_count = 0\n        self.error_count = 0\n\n    def chat(self, message: str, context: List[Dict] = None, **kwargs) -&gt; Dict:\n        \"\"\"\n        Send a chat message with comprehensive error handling.\n\n        Args:\n            message: User message\n            context: Optional conversation context\n            **kwargs: Additional parameters\n\n        Returns:\n            Dict with response or error information\n        \"\"\"\n        self.request_count += 1\n        messages = (context or []) + [{\"role\": \"user\", \"content\": message}]\n\n        def _make_request():\n            return safe_completion(self.client, messages, **kwargs)\n\n        try:\n            # Make request through circuit breaker\n            result = self.circuit_breaker.call(_make_request)\n\n            # Record success/failure\n            if result[\"success\"]:\n                self.success_count += 1\n                self.logger.info(f\"Request {self.request_count} successful\")\n            else:\n                self.error_count += 1\n                self.error_monitor.record_error(result)\n                self.logger.warning(f\"Request {self.request_count} failed: {result['error_type']}\")\n\n            return result\n\n        except Exception as e:\n            # Circuit breaker prevented request\n            self.error_count += 1\n            error_result = {\n                \"success\": False,\n                \"error_type\": \"circuit_breaker\",\n                \"message\": f\"Circuit breaker prevented request: {str(e)}\"\n            }\n            self.error_monitor.record_error(error_result)\n            return error_result\n\n    def chat_with_recovery(self, message: str, **kwargs) -&gt; Dict:\n        \"\"\"Chat with automatic recovery for compliance violations.\"\"\"\n        result = self.chat(message, **kwargs)\n\n        # If compliance violation, attempt automatic recovery\n        if result.get(\"error_type\") == \"compliance_violation\":\n            self.logger.info(\"Attempting automatic compliance recovery\")\n\n            # Simple sanitization (remove common patterns)\n            sanitized_message = self._sanitize_message(message, result.get(\"violations\", []))\n\n            if sanitized_message != message:\n                self.logger.info(\"Retrying with sanitized input\")\n                recovery_result = self.chat(sanitized_message, **kwargs)\n\n                if recovery_result[\"success\"]:\n                    recovery_result[\"recovery_applied\"] = True\n                    recovery_result[\"original_message\"] = message\n                    recovery_result[\"sanitized_message\"] = sanitized_message\n\n                return recovery_result\n\n        return result\n\n    def _sanitize_message(self, message: str, violations: List) -&gt; str:\n        \"\"\"Simple message sanitization.\"\"\"\n        import re\n\n        sanitized = message\n\n        # Remove common sensitive patterns\n        sanitized = re.sub(r'\\b\\d{3}-\\d{2}-\\d{4}\\b', '[REDACTED]', sanitized)  # SSN\n        sanitized = re.sub(r'\\b(?:\\d{4}[- ]){3}\\d{4}\\b', '[REDACTED]', sanitized)  # Credit card\n        sanitized = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '[REDACTED]', sanitized)  # Email\n        sanitized = re.sub(r'\\b\\d{3}-\\d{3}-\\d{4}\\b', '[REDACTED]', sanitized)  # Phone\n\n        return sanitized\n\n    def get_health_status(self) -&gt; Dict:\n        \"\"\"Get application health status.\"\"\"\n        success_rate = (self.success_count / max(1, self.request_count)) * 100\n\n        return {\n            \"total_requests\": self.request_count,\n            \"successful_requests\": self.success_count,\n            \"failed_requests\": self.error_count,\n            \"success_rate\": f\"{success_rate:.1f}%\",\n            \"circuit_breaker_state\": self.circuit_breaker.state.value,\n            \"error_summary\": self.error_monitor.get_error_summary(1)\n        }\n\n    def demo_conversation(self):\n        \"\"\"Run a demo conversation showing error handling.\"\"\"\n        print(\"\ud83e\udd16 Robust DeepSentinel Chat Demo\")\n        print(\"=\" * 50)\n\n        test_messages = [\n            \"Hello! How are you today?\",\n            \"What are the best practices for data security?\",\n            \"My SSN is 123-45-6789 and I need help.\",  # Compliance violation\n            \"Can you explain quantum computing?\",\n            \"Thanks for your help!\"\n        ]\n\n        for i, message in enumerate(test_messages):\n            print(f\"\\n\ud83d\udde3\ufe0f  User: {message}\")\n\n            result = self.chat_with_recovery(message)\n\n            if result[\"success\"]:\n                print(f\"\ud83e\udd16 Assistant: {result['content'][:100]}...\")\n\n                if result.get(\"recovery_applied\"):\n                    print(f\"\u26a0\ufe0f  Note: Input was sanitized due to sensitive content\")\n            else:\n                print(f\"\u274c Error: {result['message']}\")\n\n                # Show recovery suggestions\n                if result.get(\"suggested_action\"):\n                    print(f\"\ud83d\udca1 Suggestion: {result['suggested_action']}\")\n\n        # Show final health status\n        print(\"\\n\" + \"=\"*50)\n        print(\"HEALTH STATUS\")\n        print(\"=\"*50)\n        health = self.get_health_status()\n        for key, value in health.items():\n            if key != \"error_summary\":\n                print(f\"{key}: {value}\")\n\n# Usage\ndef main():\n    \"\"\"Run the robust application demo.\"\"\"\n    api_keys = {\n        \"sentinel_api_key\": os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        \"openai_api_key\": os.getenv(\"OPENAI_API_KEY\")\n    }\n\n    if not all(api_keys.values()):\n        print(\"\u274c Please set your API keys in environment variables\")\n        return\n\n    app = RobustDeepSentinelApp(api_keys)\n    app.demo_conversation()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorials/error-handling/#best-practices-summary","title":"Best Practices Summary","text":"<ol> <li>Categorize Errors - Use specific error types to handle different failure modes appropriately</li> <li>Implement Retry Logic - Use exponential backoff for recoverable errors</li> <li>Provider Failover - Use multiple providers for resilience</li> <li>Monitor and Alert - Track error patterns and set up alerting</li> <li>Circuit Breakers - Prevent cascading failures</li> <li>Graceful Degradation - Provide fallbacks when possible</li> <li>User-Friendly Messages - Transform technical errors into actionable user guidance</li> <li>Compliance Recovery - Offer automatic and manual recovery for compliance violations</li> </ol>"},{"location":"tutorials/error-handling/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've implemented comprehensive error handling for DeepSentinel. Here are some next steps:</p>"},{"location":"tutorials/error-handling/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Best Practices - Production-ready patterns</li> <li>Performance Optimization - Optimize error handling performance</li> <li>Multiple Providers - Advanced provider management</li> </ul>"},{"location":"tutorials/error-handling/#production-considerations","title":"Production Considerations","text":"<ul> <li>Set up centralized logging and monitoring</li> <li>Implement proper alerting systems</li> <li>Create error dashboards and reports</li> <li>Regular error pattern analysis</li> </ul>"},{"location":"tutorials/error-handling/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/error-handling/#high-error-rates","title":"High Error Rates","text":"<p>Solution: Review error patterns, adjust retry strategies, and check provider health</p>"},{"location":"tutorials/error-handling/#false-compliance-alerts","title":"False Compliance Alerts","text":"<p>Solution: Fine-tune compliance policies and detection sensitivity</p>"},{"location":"tutorials/error-handling/#circuit-breaker-stuck-open","title":"Circuit Breaker Stuck Open","text":"<p>Solution: Reduce failure threshold or increase timeout period</p>"},{"location":"tutorials/error-handling/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ - Common questions and solutions</li> <li>API Reference - Complete API documentation</li> <li>GitHub Issues - Report bugs</li> </ul> <p>Next Guide: Best Practices \u2192</p>"},{"location":"tutorials/multiple-providers/","title":"Multiple Providers Tutorial","text":"<p>This tutorial shows you how to configure DeepSentinel to work with multiple LLM providers (OpenAI and Anthropic) and implement advanced routing strategies to optimize your application.</p>"},{"location":"tutorials/multiple-providers/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have: - Set up DeepSentinel with multiple LLM providers - Implemented provider selection strategies - Created a simple routing system based on query content - Added automatic failover between providers</p> <p>Time required: 20 minutes</p>"},{"location":"tutorials/multiple-providers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>DeepSentinel SDK installed (<code>pip install deepsentinel-sdk</code>)</li> <li>API keys for OpenAI and Anthropic</li> <li>Basic understanding of the DeepSentinel basics</li> </ul>"},{"location":"tutorials/multiple-providers/#step-1-install-and-configure-multiple-providers","title":"Step 1: Install and Configure Multiple Providers","text":"<p>First, make sure you have the DeepSentinel SDK installed:</p> <pre><code>pip install deepsentinel-sdk\n</code></pre> <p>Next, create a client with multiple provider configurations:</p> <pre><code>from deepsentinel import SentinelClient\n\n# Initialize with multiple provider API keys\nclient = SentinelClient(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    openai_api_key=\"your-openai-key\",\n    anthropic_api_key=\"your-anthropic-key\"\n)\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-2-basic-provider-selection","title":"Step 2: Basic Provider Selection","text":"<p>The simplest way to use multiple providers is to explicitly specify which provider to use for each request:</p> <pre><code># Use OpenAI as the provider\nopenai_response = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Explain quantum computing.\"}],\n    provider=\"openai\"  # Explicitly specify OpenAI\n)\n\nprint(f\"OpenAI Response: {openai_response.choices[0].message.content[:100]}...\")\n\n# Use Anthropic as the provider\nanthropic_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",\n    messages=[{\"role\": \"user\", \"content\": \"Explain quantum computing.\"}],\n    provider=\"anthropic\"  # Explicitly specify Anthropic\n)\n\nprint(f\"Anthropic Response: {anthropic_response.choices[0].message.content[:100]}...\")\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-3-provider-selection-based-on-model","title":"Step 3: Provider Selection Based on Model","text":"<p>DeepSentinel can automatically select the appropriate provider based on the model you specify:</p> <pre><code># Automatically routes to OpenAI\ngpt_response = client.chat.completions.create(\n    model=\"gpt-4o\",  # OpenAI model, automatically selects OpenAI provider\n    messages=[{\"role\": \"user\", \"content\": \"Write a haiku about AI.\"}]\n)\n\n# Automatically routes to Anthropic\nclaude_response = client.chat.completions.create(\n    model=\"claude-3-opus-20240229\",  # Anthropic model, automatically selects Anthropic\n    messages=[{\"role\": \"user\", \"content\": \"Write a haiku about AI.\"}]\n)\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-4-advanced-configuration-with-provider-specific-options","title":"Step 4: Advanced Configuration with Provider-Specific Options","text":"<p>For more control, use the <code>SentinelConfig</code> to configure providers with specific settings:</p> <pre><code>from deepsentinel import SentinelClient, SentinelConfig, ProviderConfig\n\n# Create provider-specific configurations\nconfig = SentinelConfig(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    default_provider=\"openai\",  # Set the default provider\n    provider_configs=[\n        ProviderConfig(\n            name=\"openai\",\n            api_key=\"your-openai-key\",\n            base_url=\"https://api.openai.com/v1\",  # Default OpenAI API URL\n            timeout=30.0,\n            max_retries=3,\n            model_aliases={\n                \"gpt-4-latest\": \"gpt-4o\",  # Map shorthand names to actual models\n                \"gpt-3.5\": \"gpt-3.5-turbo\"\n            }\n        ),\n        ProviderConfig(\n            name=\"anthropic\",\n            api_key=\"your-anthropic-key\",\n            base_url=\"https://api.anthropic.com\",  # Default Anthropic API URL\n            timeout=45.0,\n            max_retries=2\n        )\n    ]\n)\n\n# Create client with the configuration\nclient = SentinelClient(config=config)\n\n# Use with default provider (OpenAI)\nresponse = client.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello!\"}]\n)\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-5-implement-automatic-failover","title":"Step 5: Implement Automatic Failover","text":"<p>Set up automatic failover between providers to increase reliability:</p> <pre><code>from deepsentinel import SentinelClient, SentinelConfig\n\n# Create configuration with failover settings\nconfig = SentinelConfig(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    providers={\n        \"openai\": {\n            \"api_key\": \"your-openai-key\",\n            \"default_model\": \"gpt-4o\"\n        },\n        \"anthropic\": {\n            \"api_key\": \"your-anthropic-key\",\n            \"default_model\": \"claude-3-opus-20240229\"\n        }\n    },\n    fallback_strategy={\n        \"primary\": \"openai\",        # Try OpenAI first\n        \"fallbacks\": [\"anthropic\"],  # Fall back to Anthropic if OpenAI fails\n        \"auto_failover\": True,       # Enable automatic failover\n        \"max_retries\": 3,            # Number of retries before failing\n        \"retry_delay\": 1,            # Seconds between retries\n        \"fallback_conditions\": [\"rate_limit\", \"timeout\", \"server_error\"]\n    }\n)\n\n# Initialize client with failover config\nclient = SentinelClient(config=config)\n\n# This will try OpenAI first, then fall back to Anthropic if needed\ntry:\n    response = client.chat.completions.create(\n        messages=[{\n            \"role\": \"user\",\n            \"content\": \"What is the difference between OpenAI and Anthropic models?\"\n        }],\n        # No need to specify model or provider - handled by fallback strategy\n    )\n\n    print(f\"Response from: {response.model}\")\n    print(f\"Content: {response.choices[0].message.content[:100]}...\")\n\nexcept Exception as e:\n    print(f\"All providers failed: {str(e)}\")\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-6-implement-content-based-provider-routing","title":"Step 6: Implement Content-Based Provider Routing","text":"<p>Implement a smart routing system that selects the most appropriate provider based on the content:</p> <pre><code>def select_provider_by_use_case(content):\n    \"\"\"\n    Select the most appropriate provider based on the content.\n\n    Args:\n        content: The user's query content\n\n    Returns:\n        Dict with provider and model to use\n    \"\"\"\n    # Simple routing logic based on content\n    content_lower = content.lower()\n\n    if \"code\" in content_lower or \"program\" in content_lower:\n        # OpenAI may be better for coding tasks\n        return {\"provider\": \"openai\", \"model\": \"gpt-4o\"}\n\n    elif \"creative\" in content_lower or \"story\" in content_lower:\n        # Anthropic might be better for creative writing\n        return {\"provider\": \"anthropic\", \"model\": \"claude-3-opus-20240229\"}\n\n    elif len(content) &gt; 500:\n        # For longer prompts, Anthropic models might handle context better\n        return {\"provider\": \"anthropic\", \"model\": \"claude-3-opus-20240229\"}\n\n    else:\n        # Default to OpenAI for general queries\n        return {\"provider\": \"openai\", \"model\": \"gpt-4o\"}\n\n# Example usage\nuser_query = \"Write a function in Python to calculate the Fibonacci sequence.\"\nselection = select_provider_by_use_case(user_query)\nprovider = selection[\"provider\"]\nmodel = selection[\"model\"]\n\nprint(f\"Selected provider: {provider}, model: {model}\")\n\n# Make the request with the selected provider\nresponse = client.chat.completions.create(\n    model=model,\n    messages=[{\"role\": \"user\", \"content\": user_query}],\n    provider=provider\n)\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-7-implement-load-balancing","title":"Step 7: Implement Load Balancing","text":"<p>For high-volume applications, you can implement load balancing across providers:</p> <pre><code>from deepsentinel import SentinelConfig, LoadBalancingStrategy\n\nconfig = SentinelConfig(\n    sentinel_api_key=\"your-deepsentinel-key\",\n    providers={\n        \"openai\": {\"api_key\": \"your-openai-key\"},\n        \"anthropic\": {\"api_key\": \"your-anthropic-key\"}\n    },\n    load_balancing=LoadBalancingStrategy(\n        strategy=\"round_robin\",  # Options: \"round_robin\", \"weighted\", \"least_latency\"\n        providers=[\"openai\", \"anthropic\"],\n        weights={\"openai\": 0.7, \"anthropic\": 0.3}  # For weighted strategy\n    )\n)\n\nclient = SentinelClient(config=config)\n\n# Requests will be distributed according to the load balancing strategy\nfor i in range(5):\n    response = client.chat.completions.create(\n        messages=[{\"role\": \"user\", \"content\": f\"Query {i}: What is AI?\"}]\n    )\n    print(f\"Query {i} handled by: {response.provider}\")\n</code></pre>"},{"location":"tutorials/multiple-providers/#step-8-complete-implementation-example","title":"Step 8: Complete Implementation Example","text":"<p>Here's a complete implementation demonstrating multiple providers with advanced features:</p> <pre><code>import os\nfrom deepsentinel import SentinelClient, SentinelConfig, ProviderConfig\n\n# Load API keys from environment variables\nsentinel_api_key = os.getenv(\"DEEPSENTINEL_API_KEY\")\nopenai_api_key = os.getenv(\"OPENAI_API_KEY\")\nanthropic_api_key = os.getenv(\"ANTHROPIC_API_KEY\")\n\n# Create configuration with multiple providers and advanced settings\nconfig = SentinelConfig(\n    sentinel_api_key=sentinel_api_key,\n    default_provider=\"openai\",\n    provider_configs=[\n        ProviderConfig(\n            name=\"openai\",\n            api_key=openai_api_key,\n            timeout=30.0,\n            max_retries=3,\n            rate_limit={\n                \"requests_per_minute\": 3500,\n                \"tokens_per_minute\": 90000\n            }\n        ),\n        ProviderConfig(\n            name=\"anthropic\",\n            api_key=anthropic_api_key, \n            timeout=45.0,\n            max_retries=2,\n            rate_limit={\n                \"requests_per_minute\": 1000,\n                \"tokens_per_minute\": 40000\n            }\n        )\n    ],\n    fallback_strategy={\n        \"primary\": \"openai\",\n        \"fallbacks\": [\"anthropic\"],\n        \"auto_failover\": True,\n        \"max_retries\": 3\n    }\n)\n\n# Create client with advanced config\nclient = SentinelClient(config=config)\n\nclass MultiProviderRouter:\n    \"\"\"Helper class to route requests to the appropriate provider.\"\"\"\n\n    def __init__(self, client):\n        self.client = client\n\n    def query(self, user_input, **kwargs):\n        \"\"\"Send a query to the most appropriate provider.\"\"\"\n        selection = self._select_provider(user_input)\n        provider = selection[\"provider\"]\n        model = selection[\"model\"]\n\n        try:\n            response = self.client.chat.completions.create(\n                model=model,\n                messages=[{\"role\": \"user\", \"content\": user_input}],\n                provider=provider,\n                **kwargs\n            )\n\n            print(f\"Query handled by {provider} using {model}\")\n            return response.choices[0].message.content\n\n        except Exception as e:\n            print(f\"Error with primary provider {provider}: {str(e)}\")\n\n            # Try alternate provider\n            alt_provider = \"anthropic\" if provider == \"openai\" else \"openai\"\n            alt_model = \"claude-3-opus-20240229\" if alt_provider == \"anthropic\" else \"gpt-4o\"\n\n            print(f\"Trying alternate provider: {alt_provider}\")\n            response = self.client.chat.completions.create(\n                model=alt_model,\n                messages=[{\"role\": \"user\", \"content\": user_input}],\n                provider=alt_provider,\n                **kwargs\n            )\n\n            return response.choices[0].message.content\n\n    def _select_provider(self, content):\n        \"\"\"Select the most appropriate provider based on content.\"\"\"\n        content_lower = content.lower()\n\n        if \"code\" in content_lower or \"program\" in content_lower:\n            return {\"provider\": \"openai\", \"model\": \"gpt-4o\"}\n        elif \"creative\" in content_lower or \"story\" in content_lower:\n            return {\"provider\": \"anthropic\", \"model\": \"claude-3-opus-20240229\"}\n        elif len(content) &gt; 500:\n            return {\"provider\": \"anthropic\", \"model\": \"claude-3-opus-20240229\"}\n        else:\n            return {\"provider\": \"openai\", \"model\": \"gpt-4o\"}\n\n# Usage\nrouter = MultiProviderRouter(client)\n\n# Example queries\nqueries = [\n    \"Explain how a neural network works.\",\n    \"Write a creative short story about a robot learning to paint.\",\n    \"Write a Python function to sort a list using merge sort.\",\n]\n\nfor query in queries:\n    print(f\"\\nQuery: {query}\")\n    response = router.query(query, temperature=0.7)\n    print(f\"Response: {response[:150]}...\")\n</code></pre>"},{"location":"tutorials/multiple-providers/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've set up DeepSentinel with multiple providers and implemented advanced routing strategies. Here are some next steps to consider:</p>"},{"location":"tutorials/multiple-providers/#additional-optimizations","title":"Additional Optimizations","text":"<ol> <li>Cost Optimization - Route requests to cheaper providers for simpler tasks</li> <li>Performance Monitoring - Track performance metrics for each provider</li> <li>Custom Adapters - Create adapters for additional providers</li> </ol>"},{"location":"tutorials/multiple-providers/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Streaming Responses - Implement streaming with multiple providers</li> <li>Performance Optimization - Optimize for high throughput</li> <li>Error Handling - Robust error handling with multiple providers</li> </ul>"},{"location":"tutorials/multiple-providers/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/multiple-providers/#authentication-errors","title":"Authentication Errors","text":"<p><pre><code>AuthenticationError: Invalid API key for provider anthropic\n</code></pre> Solution: Verify that your Anthropic API key is correct and has been properly configured.</p>"},{"location":"tutorials/multiple-providers/#provider-not-available","title":"Provider Not Available","text":"<p><pre><code>ProviderError: Provider 'anthropic' not configured\n</code></pre> Solution: Ensure you've added all required providers to your configuration.</p>"},{"location":"tutorials/multiple-providers/#model-not-found","title":"Model Not Found","text":"<p><pre><code>InvalidRequestError: Model 'claude-3-haiku-20240307' not found\n</code></pre> Solution: Check that you're using the correct model names for each provider.</p>"},{"location":"tutorials/multiple-providers/#getting-help","title":"Getting Help","text":"<ul> <li>Provider Documentation - Learn more about provider integration</li> <li>API Reference - Complete API documentation</li> <li>GitHub Issues - Report bugs or request features</li> </ul> <p>Next Tutorial: Streaming Responses \u2192</p>"},{"location":"tutorials/streaming/","title":"Streaming Responses Tutorial","text":"<p>This tutorial shows you how to implement streaming responses with DeepSentinel. Streaming allows you to receive and display LLM responses in real-time as they're being generated, providing a more interactive user experience.</p>"},{"location":"tutorials/streaming/#overview","title":"Overview","text":"<p>By the end of this tutorial, you'll have: - Implemented basic streaming responses - Added real-time processing of streamed tokens - Built an interactive chat interface with streaming - Learned how compliance checking works with streams</p> <p>Time required: 25 minutes</p>"},{"location":"tutorials/streaming/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>DeepSentinel SDK installed (<code>pip install deepsentinel-sdk</code>)</li> <li>OpenAI or Anthropic API key</li> <li>Basic understanding of DeepSentinel basics</li> </ul>"},{"location":"tutorials/streaming/#step-1-set-up-basic-streaming","title":"Step 1: Set Up Basic Streaming","text":"<p>First, let's implement a simple streaming example:</p> <pre><code>from deepsentinel import SentinelClient, ComplianceViolationError\nimport os\nimport sys\nimport time\n\n# Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\n# Create a streaming request\ntry:\n    stream = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\", \n            \"content\": \"Write a short poem about AI safety\"\n        }],\n        stream=True,  # Enable streaming\n        temperature=0.7,\n        max_tokens=200\n    )\n\n    # Process the stream\n    print(\"Response: \", end=\"\")\n    for chunk in stream:\n        if chunk.choices[0].delta.content is not None:\n            content = chunk.choices[0].delta.content\n            print(content, end=\"\", flush=True)\n            # Optional: add small delay to simulate typing effect\n            time.sleep(0.01)\n\n    print(\"\\n\\nStream completed\")\n\nexcept ComplianceViolationError as e:\n    print(f\"Compliance violation: {e.message}\")\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n</code></pre> <p>The key points in this example: - Set <code>stream=True</code> in the <code>create</code> method - Loop through each chunk in the returned stream - Access <code>chunk.choices[0].delta.content</code> to get each piece of text as it arrives - Use <code>end=\"\"</code> and <code>flush=True</code> in print statements to display a continuous output</p>"},{"location":"tutorials/streaming/#step-2-token-by-token-processing","title":"Step 2: Token-by-Token Processing","text":"<p>You can process each token in the stream as it arrives for real-time effects:</p> <pre><code># Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\n# Track tokens and words\nword_count = 0\ntoken_count = 0\ncurrent_word = \"\"\n\ntry:\n    stream = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\", \n            \"content\": \"Explain how neural networks process information\"\n        }],\n        stream=True,\n        max_tokens=200\n    )\n\n    print(\"Processing stream in real-time...\")\n    print(\"Response: \", end=\"\")\n\n    # Process each chunk in the stream\n    for chunk in stream:\n        if not chunk.choices[0].delta.content:\n            continue\n\n        content = chunk.choices[0].delta.content\n        token_count += 1\n\n        # Process content character by character\n        for char in content:\n            # Track word boundaries\n            if char.isalnum() or char == \"'\":\n                current_word += char\n            elif current_word:  # Word boundary found\n                word_count += 1\n                current_word = \"\"\n\n            # Print with color highlighting based on content\n            if char in \".,!?;:\":  # Highlight punctuation\n                sys.stdout.write(f\"\\033[31m{char}\\033[0m\")  # Red\n            elif char.isupper():  # Highlight uppercase\n                sys.stdout.write(f\"\\033[34m{char}\\033[0m\")  # Blue\n            else:\n                sys.stdout.write(char)\n\n            sys.stdout.flush()\n            time.sleep(0.01)\n\n    # Count the last word if content ends without punctuation\n    if current_word:\n        word_count += 1\n\n    print(\"\\n\\nStream Statistics:\")\n    print(f\"  Tokens received: {token_count}\")\n    print(f\"  Words counted: {word_count}\")\n    print(f\"  Approximate words per token: {word_count/token_count:.2f}\")\n\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n</code></pre> <p>This example demonstrates: - Counting tokens and words in real-time - Applying color highlighting to different character types - Calculating streaming statistics</p>"},{"location":"tutorials/streaming/#step-3-progress-tracking-for-long-responses","title":"Step 3: Progress Tracking for Long Responses","text":"<p>For longer responses, you can implement a progress bar or tracking mechanism:</p> <pre><code># Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\ntry:\n    # Start a streaming request with a longer response\n    print(\"Generating a story with progress tracking...\")\n    stream = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=[{\n            \"role\": \"user\", \n            \"content\": \"Write a short story about a robot learning ethics\"\n        }],\n        stream=True,\n        max_tokens=500\n    )\n\n    # Variables for progress tracking\n    start_time = time.time()\n    token_count = 0\n    estimated_tokens = 500  # Our max_tokens value\n    response_text = \"\"\n\n    # Track progress as tokens arrive\n    print(\"Progress: \", end=\"\")\n    for chunk in stream:\n        if chunk.choices[0].delta.content is not None:\n            content = chunk.choices[0].delta.content\n            token_count += 1\n            response_text += content\n\n            # Update progress bar\n            progress = min(token_count / estimated_tokens, 1.0)\n            bars = int(progress * 30)\n            sys.stdout.write(\"\\r\")\n            sys.stdout.write(\n                f\"Progress: [{'#' * bars}{' ' * (30 - bars)}] \"\n                f\"{int(progress * 100)}% ({token_count}/{estimated_tokens})\"\n            )\n            sys.stdout.flush()\n\n    # Calculate statistics\n    elapsed_time = time.time() - start_time\n    tokens_per_second = token_count / elapsed_time\n\n    # Print final statistics\n    print(\"\\n\\nGeneration Statistics:\")\n    print(f\"  Total tokens: {token_count}\")\n    print(f\"  Total time: {elapsed_time:.2f} seconds\")\n    print(f\"  Speed: {tokens_per_second:.2f} tokens/second\")\n\n    # Print the full response\n    print(\"\\nFull story:\")\n    print(response_text)\n\nexcept Exception as e:\n    print(f\"Error: {str(e)}\")\n</code></pre> <p>This implementation shows: - Creating a dynamic progress bar - Tracking generation speed - Recording the complete response as it builds</p>"},{"location":"tutorials/streaming/#step-4-building-an-interactive-chat-interface","title":"Step 4: Building an Interactive Chat Interface","text":"<p>Now let's create an interactive chat application with streaming responses:</p> <pre><code>from deepsentinel import SentinelClient, ComplianceViolationError\nimport os\nimport time\n\n# Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\n# Initialize conversation history\nconversation = [\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}\n]\n\nprint(\"Interactive Streaming Chat\")\nprint(\"Type your messages and receive streaming responses.\")\nprint(\"Type 'exit' or 'quit' to end the conversation.\")\n\nwhile True:\n    # Get user input\n    user_input = input(\"\\nYou: \")\n    if user_input.lower() in [\"exit\", \"quit\", \"bye\"]:\n        print(\"Goodbye!\")\n        break\n\n    # Add user message to conversation\n    conversation.append({\"role\": \"user\", \"content\": user_input})\n\n    try:\n        # Start streaming response\n        print(\"Assistant: \", end=\"\")\n\n        stream = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=conversation,\n            stream=True,\n            temperature=0.7\n        )\n\n        # Collect assistant's response\n        assistant_response = \"\"\n\n        # Process the stream\n        for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                content = chunk.choices[0].delta.content\n                print(content, end=\"\", flush=True)\n                assistant_response += content\n                time.sleep(0.01)\n\n        # Add assistant response to conversation history\n        conversation.append({\n            \"role\": \"assistant\",\n            \"content\": assistant_response\n        })\n\n    except ComplianceViolationError as e:\n        print(f\"\\nCompliance violation: {e.message}\")\n        print(f\"Please avoid sending sensitive information.\")\n    except Exception as e:\n        print(f\"\\nError: {str(e)}\")\n</code></pre> <p>This example demonstrates: - Maintaining conversation history - Processing streaming responses in an interactive format - Handling compliance violations</p>"},{"location":"tutorials/streaming/#step-5-compliance-checking-with-streaming","title":"Step 5: Compliance Checking with Streaming","text":"<p>DeepSentinel's compliance checking works differently with streaming responses. Let's explore how to handle compliance issues in streaming contexts:</p> <pre><code>from deepsentinel import SentinelClient, ComplianceViolationError, CompliancePolicy\nimport os\nimport time\n\n# Create a strict compliance policy\nstrict_policy = CompliancePolicy(\n    name=\"strict-streaming-policy\",\n    description=\"Strict policy for streaming responses\",\n    enable_pii_detection=True,\n    enable_pci_detection=True,\n    max_risk_score=0.6,  # Lower threshold than default\n    block_on_violation=True\n)\n\n# Initialize client with the strict policy\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    compliance_policies=[strict_policy]\n)\n\ndef test_streaming_compliance():\n    \"\"\"Test how compliance checking works with streaming.\"\"\"\n    print(\"Testing streaming compliance checks...\")\n\n    # Example 1: Safe content\n    print(\"\\n1. Testing with safe content...\")\n    try:\n        stream = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\n                \"role\": \"user\",\n                \"content\": \"Write a short poem about mountains\"\n            }],\n            stream=True\n        )\n\n        print(\"Response: \", end=\"\")\n        for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                content = chunk.choices[0].delta.content\n                print(content, end=\"\", flush=True)\n                time.sleep(0.01)\n\n        print(\"\\n\u2705 Safe content successfully streamed\")\n\n    except ComplianceViolationError as e:\n        print(f\"\\n\u274c Unexpected compliance violation: {e.message}\")\n    except Exception as e:\n        print(f\"\\n\u274c Error: {str(e)}\")\n\n    # Example 2: Content with PII\n    print(\"\\n2. Testing with sensitive content...\")\n    try:\n        stream = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[{\n                \"role\": \"user\",\n                \"content\": \"My social security number is 123-45-6789\"\n            }],\n            stream=True\n        )\n\n        print(\"Response: \", end=\"\")\n        for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                content = chunk.choices[0].delta.content\n                print(content, end=\"\", flush=True)\n                time.sleep(0.01)\n\n        print(\"\\n\u26a0\ufe0f Sensitive content was not blocked (unexpected)\")\n\n    except ComplianceViolationError as e:\n        print(f\"\\n\u2705 Compliance violation correctly detected: {e.message}\")\n        print(f\"Violation types: {[v.type for v in e.violations]}\")\n    except Exception as e:\n        print(f\"\\n\u274c Error: {str(e)}\")\n\n# Run the compliance test\ntest_streaming_compliance()\n</code></pre> <p>Note: For streaming responses, compliance checking happens before streaming begins. If a compliance violation is detected in the prompt, the stream won't start and will raise a <code>ComplianceViolationError</code>. For responses, DeepSentinel monitors the stream and terminates it if a violation is detected.</p>"},{"location":"tutorials/streaming/#step-6-streaming-with-multiple-providers","title":"Step 6: Streaming with Multiple Providers","text":"<p>You can use streaming with different LLM providers:</p> <pre><code>from deepsentinel import SentinelClient\nimport os\nimport time\n\n# Initialize client with multiple providers\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    anthropic_api_key=os.getenv(\"ANTHROPIC_API_KEY\")\n)\n\ndef stream_from_provider(provider, model, prompt):\n    \"\"\"Stream a response from a specific provider.\"\"\"\n    print(f\"\\nStreaming from {provider} ({model}):\")\n    print(\"-\" * 40)\n\n    try:\n        stream = client.chat.completions.create(\n            model=model,\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n            provider=provider,\n            stream=True,\n            max_tokens=150\n        )\n\n        print(\"Response: \", end=\"\")\n        for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                content = chunk.choices[0].delta.content\n                print(content, end=\"\", flush=True)\n                time.sleep(0.01)\n\n        print(\"\\n\")\n\n    except Exception as e:\n        print(f\"Error with {provider}: {str(e)}\")\n\n# Stream from both providers with the same prompt\nprompt = \"Explain the concept of streaming in AI in three sentences.\"\nstream_from_provider(\"openai\", \"gpt-4o\", prompt)\nstream_from_provider(\"anthropic\", \"claude-3-opus-20240229\", prompt)\n</code></pre> <p>This example demonstrates: - Using the same streaming interface across different providers - Comparing streaming behavior between providers</p>"},{"location":"tutorials/streaming/#step-7-error-handling-for-streams","title":"Step 7: Error Handling for Streams","text":"<p>Let's implement robust error handling for streaming responses:</p> <pre><code>from deepsentinel import (\n    SentinelClient, \n    ComplianceViolationError,\n    ProviderError,\n    RateLimitError\n)\nimport os\nimport time\n\n# Initialize the client\nclient = SentinelClient(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\")\n)\n\ndef stream_with_error_handling(messages, model=\"gpt-4o\", **kwargs):\n    \"\"\"Stream a response with comprehensive error handling.\"\"\"\n    try:\n        stream = client.chat.completions.create(\n            model=model,\n            messages=messages,\n            stream=True,\n            **kwargs\n        )\n\n        print(\"Response: \", end=\"\")\n        response_text = \"\"\n\n        for chunk in stream:\n            if chunk.choices[0].delta.content is not None:\n                content = chunk.choices[0].delta.content\n                print(content, end=\"\", flush=True)\n                response_text += content\n                time.sleep(0.01)\n\n        print(\"\\n\")\n        return {\"success\": True, \"content\": response_text}\n\n    except ComplianceViolationError as e:\n        print(f\"\\nCompliance violation: {e.message}\")\n        return {\n            \"success\": False, \n            \"error_type\": \"compliance\",\n            \"message\": e.message,\n            \"violations\": [v.type for v in e.violations]\n        }\n\n    except RateLimitError as e:\n        print(f\"\\nRate limit exceeded. Retry after {e.retry_after} seconds.\")\n        return {\n            \"success\": False,\n            \"error_type\": \"rate_limit\",\n            \"retry_after\": e.retry_after\n        }\n\n    except ProviderError as e:\n        print(f\"\\nProvider error ({e.provider}): {e.message}\")\n        return {\n            \"success\": False,\n            \"error_type\": \"provider\",\n            \"provider\": e.provider,\n            \"message\": e.message\n        }\n\n    except Exception as e:\n        print(f\"\\nUnexpected error: {str(e)}\")\n        return {\n            \"success\": False,\n            \"error_type\": \"unknown\",\n            \"message\": str(e)\n        }\n\n# Test error handling with different cases\ntest_cases = [\n    # Normal case\n    [{\"role\": \"user\", \"content\": \"Hello, how are you?\"}],\n\n    # Potentially triggering compliance\n    [{\"role\": \"user\", \"content\": \"My credit card is 4111-1111-1111-1111\"}],\n\n    # Invalid model (will cause provider error)\n    [{\"role\": \"user\", \"content\": \"Hello\"}], \n]\n\nfor i, messages in enumerate(test_cases):\n    print(f\"\\nTest case {i+1}:\")\n\n    # For the last test, use an invalid model\n    model = \"non-existent-model\" if i == 2 else \"gpt-4o\"\n\n    result = stream_with_error_handling(messages, model=model)\n\n    if result[\"success\"]:\n        print(f\"Success! Generated {len(result['content'])} characters\")\n    else:\n        print(f\"Failed with {result['error_type']} error: {result.get('message', '')}\")\n</code></pre> <p>This implementation provides: - Structured error handling for all stream-related errors - Detailed error reporting - Options for error recovery</p>"},{"location":"tutorials/streaming/#step-8-complete-implementation-example","title":"Step 8: Complete Implementation Example","text":"<p>Let's put everything together in a comprehensive streaming chat application:</p> <pre><code>import os\nimport sys\nimport time\nfrom typing import List, Dict, Optional, Any\nfrom deepsentinel import SentinelClient, ComplianceViolationError\n\nclass StreamingChatApp:\n    \"\"\"Interactive streaming chat application with DeepSentinel.\"\"\"\n\n    def __init__(self, api_keys: Dict[str, str], model: str = \"gpt-4o\"):\n        \"\"\"Initialize the chat application.\n\n        Args:\n            api_keys: Dictionary with sentinel_api_key and provider keys\n            model: Default model to use\n        \"\"\"\n        self.client = SentinelClient(**api_keys)\n        self.model = model\n        self.conversation = [\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}\n        ]\n        self.token_count = 0\n        self.response_time = 0\n\n    def chat(self, message: str) -&gt; Dict[str, Any]:\n        \"\"\"Send a message and stream the response.\n\n        Args:\n            message: User message to send\n\n        Returns:\n            Dictionary with results\n        \"\"\"\n        # Add user message to history\n        self.conversation.append({\"role\": \"user\", \"content\": message})\n\n        try:\n            # Start timing\n            start_time = time.time()\n\n            # Create streaming request\n            stream = self.client.chat.completions.create(\n                model=self.model,\n                messages=self.conversation,\n                stream=True,\n                temperature=0.7\n            )\n\n            # Process stream\n            print(\"Assistant: \", end=\"\")\n            response_content = \"\"\n            tokens = 0\n\n            for chunk in stream:\n                if chunk.choices[0].delta.content is not None:\n                    content = chunk.choices[0].delta.content\n                    print(content, end=\"\", flush=True)\n                    response_content += content\n                    tokens += 1\n                    time.sleep(0.01)\n\n            # Record metrics\n            self.response_time = time.time() - start_time\n            self.token_count += tokens\n\n            # Add response to conversation history\n            self.conversation.append({\n                \"role\": \"assistant\",\n                \"content\": response_content\n            })\n\n            return {\n                \"success\": True,\n                \"content\": response_content,\n                \"tokens\": tokens,\n                \"response_time\": self.response_time\n            }\n\n        except ComplianceViolationError as e:\n            print(f\"\\nCompliance violation: {e.message}\")\n            return {\n                \"success\": False,\n                \"error\": \"compliance_violation\",\n                \"message\": e.message\n            }\n\n        except Exception as e:\n            print(f\"\\nError: {str(e)}\")\n            return {\n                \"success\": False,\n                \"error\": \"general_error\",\n                \"message\": str(e)\n            }\n\n    def display_stats(self):\n        \"\"\"Display chat statistics.\"\"\"\n        messages = len(self.conversation) - 1  # Exclude system message\n        user_messages = messages // 2\n\n        print(\"\\n----- Chat Statistics -----\")\n        print(f\"Messages exchanged: {user_messages} user, {user_messages} assistant\")\n        print(f\"Approximate tokens: {self.token_count}\")\n        print(f\"Last response time: {self.response_time:.2f} seconds\")\n\n    def reset(self):\n        \"\"\"Reset the conversation.\"\"\"\n        self.conversation = [self.conversation[0]]  # Keep system message\n        self.token_count = 0\n        print(\"Conversation has been reset.\")\n\ndef main():\n    \"\"\"Run the streaming chat application.\"\"\"\n    # Get API keys from environment\n    api_keys = {\n        \"sentinel_api_key\": os.getenv(\"DEEPSENTINEL_API_KEY\"),\n        \"openai_api_key\": os.getenv(\"OPENAI_API_KEY\")\n    }\n\n    # Initialize chat app\n    app = StreamingChatApp(api_keys)\n\n    print(\"\ud83d\ude80 DeepSentinel Streaming Chat\")\n    print(\"=\" * 40)\n    print(\"Type your messages and receive streaming responses.\")\n    print(\"Commands: /stats - Show statistics, /reset - Reset conversation, /exit - Exit\")\n\n    while True:\n        # Get user input\n        user_input = input(\"\\nYou: \").strip()\n\n        # Handle commands\n        if user_input.lower() in [\"/exit\", \"/quit\"]:\n            print(\"Goodbye!\")\n            break\n\n        elif user_input.lower() == \"/stats\":\n            app.display_stats()\n            continue\n\n        elif user_input.lower() == \"/reset\":\n            app.reset()\n            continue\n\n        # Process regular messages\n        if user_input:\n            result = app.chat(user_input)\n            print()  # Add newline after response\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>This complete application provides: - An interactive streaming chat interface - Command handling for statistics and conversation reset - Comprehensive error handling - Performance tracking</p>"},{"location":"tutorials/streaming/#performance-considerations-for-streaming","title":"Performance Considerations for Streaming","text":"<p>Streaming responses have different performance characteristics compared to non-streaming:</p> <ol> <li>Lower perceived latency - Users see results immediately, even if total completion time is the same</li> <li>Increased connection time - Streaming keeps connections open longer</li> <li>Potential timeout issues - Long streams may hit timeout limits</li> <li>Compliance checking overhead - Real-time scanning adds complexity</li> </ol> <p>To optimize streaming performance:</p> <pre><code># Configure optimized settings for streaming\nfrom deepsentinel import SentinelClient, SentinelConfig, PerformanceConfig\n\n# Create performance-optimized config\nperf_config = PerformanceConfig(\n    connection_pool_size=50,  # Increase connection pool for parallel streams\n    connection_timeout=10.0,  # Longer timeout for streaming connections\n    read_timeout=60.0,        # Extended read timeout for long streams\n    keep_alive=True,          # Keep connections alive between requests\n)\n\nconfig = SentinelConfig(\n    sentinel_api_key=os.getenv(\"DEEPSENTINEL_API_KEY\"),\n    openai_api_key=os.getenv(\"OPENAI_API_KEY\"),\n    performance_config=perf_config\n)\n\n# Create client with optimized config\nclient = SentinelClient(config=config)\n</code></pre>"},{"location":"tutorials/streaming/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've implemented streaming responses with DeepSentinel. Here are some ways to build on what you've learned:</p>"},{"location":"tutorials/streaming/#advanced-techniques","title":"Advanced Techniques","text":"<ol> <li>Front-end Integration - Connect these streams to a web UI using WebSockets</li> <li>Multi-stream Processing - Process multiple parallel streams for batch operations</li> <li>Stream Filtering - Implement real-time content filtering or transformation</li> </ol>"},{"location":"tutorials/streaming/#next-topics-to-explore","title":"Next Topics to Explore","text":"<ul> <li>Compliance Setup - Detailed compliance configuration</li> <li>Multiple Providers - Using multiple providers with streaming</li> <li>Error Handling - More robust error recovery strategies</li> </ul>"},{"location":"tutorials/streaming/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/streaming/#stream-disconnects","title":"Stream Disconnects","text":"<p><pre><code>ConnectionError: Connection closed while streaming response\n</code></pre> Solution: Increase timeouts and implement reconnection logic</p>"},{"location":"tutorials/streaming/#compliance-blocks","title":"Compliance Blocks","text":"<p><pre><code>ComplianceViolationError: Sensitive content detected in response\n</code></pre> Solution: Adjust compliance settings or pre-process user inputs</p>"},{"location":"tutorials/streaming/#buffer-overruns","title":"Buffer Overruns","text":"<p><pre><code>MemoryError: Buffer overflow while collecting stream\n</code></pre> Solution: Process stream chunks individually instead of building a complete response</p>"},{"location":"tutorials/streaming/#getting-help","title":"Getting Help","text":"<ul> <li>FAQ - Common questions and solutions</li> <li>Performance Guide - Optimizing streaming performance</li> <li>API Reference - Complete API documentation</li> </ul> <p>Next Tutorial: Compliance Setup \u2192</p>"}]}